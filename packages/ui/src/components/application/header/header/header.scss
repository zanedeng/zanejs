@use '../../../../global/styles/commons';

:host {
  /**
   * @prop --zane-header-height: Height of the header. Defaults to 3rem.
   */
  --zane-header-height: 3rem;

  /**
   * @prop --zane-header-width: Width of the header. Defaults to 100%.
   */
  --zane-header-width: 100%;

  display: block;
}

.header {
  display: flex;
  align-items: center;
  justify-content: center;

  .header-container {
    display: grid;
    grid-template-columns: 1fr auto 1fr;
    align-items: center;
    width: var(--zane-header-width);
    height: var(--zane-header-height);

    .left-section {
      justify-self: flex-start;
    }

    .center-section {
      justify-self: center;
    }

    .right-section {
      justify-self: flex-end;
    }

    .section {
      display: flex;
      align-items: center;
      height: 100%;

      slot::slotted(*) {
        display: flex;
        align-items: center;
        height: 100%;
        color: var(--header-text-color);
      }
    }
  }

  &.three-column .header-container {
    grid-template-columns: 1fr auto 1fr;
  }

  &.two-column .header-container {
    grid-template-columns: auto 1fr;
  }

  &.float {
    @each $color in [primary, secondary, success, info, warning, error, white,
      black, brand-primary, brand-secondary]
    {
      &#{'.color-' + $color} .header-container {
        background: commons.v(--color-#{$color});
      }
    }

    .header-container {
      margin: commons.v(--spacing-05);
      overflow: clip;
      border: 1px solid var(--layer-accent);
      border-radius: commons.v(--border-radius);
      box-shadow: v(--shadow-md);
    }
  }

  &:not(.float) {
    @each $color in [primary, secondary, success, info, warning, error, white,
      black, brand-primary, brand-secondary]
    {
      &#{'.color-' + $color} {
        background: commons.v(--color-#{$color});
      }
    }
  }
}

:host([color-is='dark']):host {
  --header-text-color: #{commons.v(--color-white)};
}

:host([color-is='light']):host {
  --header-text-color: #{commons.v(--color-black)};
}
