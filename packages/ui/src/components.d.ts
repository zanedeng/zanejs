/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Language } from "./constants";
export { Language } from "./constants";
export namespace Components {
    /**
     * 可折叠面板(Accordion)容器组件
     * 提供可折叠内容区域的容器组件，管理多个折叠项的状态和交互。
     * 支持单开/多开模式、多种尺寸和图标位置配置。
     */
    interface ZaneAccordion {
        /**
          * 控制折叠指示图标的位置  1. `end`: 图标显示在面板标题的末尾(右侧)(默认值) 2. `start`: 图标显示在面板标题的开头(左侧)
          * @type {'end' | 'start'}
          * @default 'end'
          * @reflectToAttr 属性值会同步到DOM元素上
          * @example <zane-accordion align="start"></zane-accordion>
         */
        "align": 'end' | 'start';
        /**
          * 是否允许多个面板同时展开  - true: 允许多个面板同时保持展开状态 - false: 同一时间只能展开一个面板(默认值)
          * @type {boolean}
          * @default false
          * @example <zane-accordion multiple></zane-accordion>
         */
        "multiple": boolean;
        /**
          * 控制折叠面板的尺寸变体  - 'lg': 大尺寸，适合需要突出显示的内容 - 'md': 中等尺寸(默认值)，通用尺寸 - 'sm': 小尺寸，适合紧凑布局
          * @type {'lg' | 'md' | 'sm'}
          * @default 'md'
          * @reflectToAttr 属性值会同步到DOM元素上
          * @example <zane-accordion size="lg"></zane-accordion>
         */
        "size": 'lg' | 'md' | 'sm';
    }
    /**
     * 可折叠面板项(Accordion Item)组件
     * 作为zane-accordion的子组件使用，实现单个可折叠面板项的功能
     * @component 
     * @shadowDom 使用Shadow DOM封装组件样式
     */
    interface ZaneAccordionItem {
        /**
          * 禁用状态控制  - true: 禁用该折叠项，不可交互 - false: 正常状态(默认)
          * @type {boolean}
          * @default false
         */
        "disabled": boolean;
        /**
          * 面板标题文本  当heading插槽无内容时显示此文本
          * @type {string}
         */
        "heading": string;
        /**
          * 面板展开状态  - true: 面板已展开 - false: 面板已折叠(默认)
          * @type {boolean}
          * @default false
          * @mutable 允许组件内部修改
          * @reflectToAttr 同步到DOM属性
         */
        "open": boolean;
    }
    /**
     * 头像组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 指定组件样式文件
     * @tag 定义组件在HTML中的标签名
     */
    interface ZaneAvatar {
        /**
          * 用户姓名（用于生成首字母头像）
          * @type {string}
          * @default ''
         */
        "name": string;
        /**
          * 头像尺寸（支持CSS单位）
          * @type {string}
          * @default '2rem'
         */
        "size": string;
        /**
          * 头像图片URL（优先级高于name）
          * @type {string}
          * @default ''
         */
        "src": string;
    }
    /**
     * 徽章组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 指定组件样式文件
     * @tag 定义组件在HTML中的标签名
     */
    interface ZaneBadge {
        /**
          * 徽章颜色主题
          * @type {'error'|'primary'|'secondary'|'success'|'warning'}
          * @default 'error'
          * @reflect 属性值会反射到DOM属性  枚举说明： - error: 错误状态（红色系） - primary: 主要状态（品牌主色系） - secondary: 次要状态（中性色系） - success: 成功状态（绿色系） - warning: 警告状态（黄色系）
         */
        "color": | 'error'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning';
        /**
          * 徽章显示内容
          * @type {string}
         */
        "content": string;
    }
    /**
     * 面包屑导航组件
     * 用于显示当前页面在网站层次结构中的位置，并提供快速导航功能。
     * @example ```html
     * <zane-breadcrumb>
     *   <zane-breadcrumb-item href="/home">首页</zane-breadcrumb-item>
     *   <zane-breadcrumb-item href="/products">产品</zane-breadcrumb-item>
     *   <zane-breadcrumb-item>当前页面</zane-breadcrumb-item>
     * </zane-breadcrumb>
     * ```
     * @Component 装饰器定义了组件的元数据
     * @property {boolean} shadow - 启用 Shadow DOM 封装
     * @property {string} styleUrl - 组件样式文件路径
     * @property {string} tag - 组件的自定义元素标签名
     */
    interface ZaneBreadcrumb {
    }
    /**
     * 面包屑导航项组件
     * 作为面包屑导航系统的单个项使用，必须作为`zane-breadcrumb`的子元素使用。
     * 支持链接导航、活动状态指示和Schema.org 结构化数据。
     * @example ```html
     * <!-- 活动状态项(当前页面) -->
     * <zane-breadcrumb-item active>
     *   当前页面
     * </zane-breadcrumb-item>
     * <!-- 可点击链接项 -->
     * <zane-breadcrumb-item href="/products" position="2">
     *   产品列表
     * </zane-breadcrumb-item>
     * ```
     * @Component 配置项说明：
     * @property {boolean} shadow - 启用Shadow DOM封装
     * @property {string} styleUrl - 组件样式文件路径
     * @property {string} tag - 自定义元素标签名
     */
    interface ZaneBreadcrumbItem {
        /**
          * 活动状态标识  表示当前面包屑项是否为活动状态(通常是当前页面)。 当设置为true时，该项会以非链接形式呈现。
          * @type {boolean}
          * @default false
          * @memberof BreadcrumbItem
         */
        "active": boolean;
        /**
          * 链接目标地址  指定面包屑项的跳转链接。未设置时表示该项不可点击。 当active为true时，此属性会被忽略。
          * @type {string}
          * @memberof BreadcrumbItem
         */
        "href": string;
        /**
          * 项在列表中的位置  表示该项在面包屑导航中的序号位置(从1开始)。 用于Schema.org 微数据和样式控制。
          * @type {string}
          * @memberof BreadcrumbItem
         */
        "position": string;
        /**
          * 链接打开方式  指定链接的打开方式，等同于HTML的target属性。 常用值: '_blank'|'_self'|'_parent'|'_top'
          * @type {string}
          * @memberof BreadcrumbItem
         */
        "target": string;
    }
    /**
     * 多功能按钮组件
     * 提供丰富的交互样式和状态管理，支持：
     * - 多种视觉变体(variant)
     * - 完整的大小(size)控制
     * - 主题颜色(color)系统
     * - 暗黑模式适配
     * - 完善的ARIA可访问性
     * - 图标集成
     * - 加载状态
     * @example 基础使用
     * ```html
     * <zane-button>普通按钮</zane-button>
     * <zane-button variant="outline">轮廓按钮</zane-button>
     * <zane-button icon="settings" iconAlign="start">带图标按钮</zane-button>
     * ```
     * @example 高级使用
     * ```html
     * <zane-button
     * color="danger"
     * darkModeColor="warning"
     * variant="ghost.simple"
     * size="xl"
     * disabled
     * disabledReason="权限不足"
     * >
     * 危险操作
     * </zane-button>
     * ```
     */
    interface ZaneButton {
        /**
          * 附加数据对象  会在点击事件中回传，用于携带上下文数据
          * @type {any}
         */
        "appendData": any;
        /**
          * 按钮主题色  支持预设颜色或自定义颜色名称(需在CSS中定义对应变量)
          * @type {'black' | 'danger' | 'primary' | 'secondary' | 'success' | 'warning' | 'white'}
          * @default 'primary'
          * @example 预设颜色 - 'primary': 品牌主色 - 'danger': 危险操作红色 - 'success': 成功操作绿色
          * @example 自定义颜色 需在CSS中定义: --color-custom和--color-custom-10等变量
         */
        "color": | 'black'
    | 'danger'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning'
    | 'white';
        /**
          * ARIA 可访问性配置 可动态修改并反映到DOM属性
          * @type {Object}
          * @default {}
         */
        "configAria": any;
        /**
          * 暗黑模式下的替代颜色  当检测到暗黑模式时自动切换为此颜色
          * @type {'black' | 'danger' | 'primary' | 'secondary' | 'success' | 'warning' | 'white'}
         */
        "darkModeColor"?: | 'black'
    | 'danger'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning'
    | 'white';
        /**
          * 按钮禁用状态
          * @type {boolean}
          * @default false
          * @reflectToAttr
         */
        "disabled": boolean;
        /**
          * 禁用原因说明  会以ARIA方式提供给辅助技术，提升可访问性
          * @type {string}
          * @default ''
         */
        "disabledReason": string;
        /**
          * 链接地址（使按钮表现为链接） 设置后按钮渲染为 <a> 标签
         */
        "href": string;
        /**
          * 图标名称  指定要显示的图标，需要配合zane-icon组件使用
          * @type {string}
         */
        "icon"?: string;
        /**
          * 图标对齐方式  控制图标相对于文本的位置
          * @type {'end' | 'start'}
          * @default 'end'
          * @description - 'start': 图标在文本左侧 - 'end': 图标在文本右侧
         */
        "iconAlign": 'end' | 'start';
        /**
          * 按钮选中状态  常用于按钮组或切换场景
          * @type {boolean}
          * @default false
          * @reflectToAttr
         */
        "selected": boolean;
        /**
          * 以编程方式使按钮失去焦点
          * @method 
          * @async 
          * @returns
         */
        "setBlur": () => Promise<void>;
        /**
          * 以编程方式聚焦按钮
          * @method 
          * @async 
          * @returns
         */
        "setFocus": () => Promise<void>;
        /**
          * 显示加载指示器  设置为true时会显示旋转加载图标并禁用交互
          * @type {boolean}
          * @default false
         */
        "showLoader": boolean;
        /**
          * 按钮尺寸  支持从xs到2xl共6种预设尺寸
          * @type {'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl'}
          * @default 'md'
          * @reflectToAttr 
          * @description - xs: 超小尺寸(24px) - sm: 小尺寸(32px) - md: 中尺寸(40px) - lg: 大尺寸(48px) - xl: 超大尺寸(56px) - 2xl: 特大尺寸(64px)
         */
        "size": '2xl' | 'lg' | 'md' | 'sm' | 'xl' | 'xs';
        /**
          * 链接打开目标（当href存在时有效）
          * @default '_self'
         */
        "target": string;
        /**
          * 点击事件节流延迟(ms)
          * @default 200
         */
        "throttleDelay": number;
        /**
          * 是否为切换型按钮 启用时点击会保持激活状态
          * @default false
         */
        "toggle": boolean;
        /**
          * 以编程方式触发按钮点击
          * @method 
          * @async 
          * @returns
         */
        "triggerClick": () => Promise<void>;
        /**
          * 按钮类型（当作为表单按钮时） - 'button': 普通按钮 - 'reset': 表单重置按钮 - 'submit': 表单提交按钮
          * @default 'button'
         */
        "type": 'button' | 'reset' | 'submit';
        /**
          * 按钮视觉变体  支持基础变体和带.simple后缀的简化变体
          * @type {    * 'default' | 'default.simple'  | 'ghost' | 'ghost.simple'  | 'light' | 'light.simple'  | 'link' | 'link.simple'  | 'neo' | 'neo.simple'  | 'outline' | 'outline.simple' }
          * @default 'default'
          * @reflectToAttr 
          * @description - default: 实心填充按钮 - ghost: 透明背景按钮 - light: 浅色背景按钮 - link: 链接样式按钮 - neo: 新拟态风格按钮 - outline: 边框轮廓按钮 - .simple: 简化版变体(减少视觉效果)
         */
        "variant": | 'default'
    | 'default.simple'
    | 'ghost'
    | 'ghost.simple'
    | 'light'
    | 'light.simple'
    | 'link'
    | 'link.simple'
    | 'neo'
    | 'neo.simple'
    | 'outline'
    | 'outline.simple';
    }
    /**
     * 按钮组容器组件
     */
    interface ZaneButtonGroup {
    }
    /**
     * 卡片组件
     * 提供可自定义阴影级别的卡片容器
     */
    interface ZaneCard {
        /**
          * 卡片阴影级别
          * @type {'lg' | 'md' | 'sm' | 'xl' | 'xs' | 'xxl' | undefined} - 'xs': 超小阴影 (extra small) - 'sm': 小阴影 (small) - 'md': 中等阴影 (medium，默认未指定时) - 'lg': 大阴影 (large) - 'xl': 超大阴影 (extra large) - 'xxl': 特大阴影 (extra extra large) - undefined: 无阴影 阴影级别应在card.scss中定义对应的box-shadow值
         */
        "shadowLevel": 'lg' | 'md' | 'sm' | 'xl' | 'xs' | 'xxl' | undefined;
    }
    /**
     * 自定义复选框组件
     * 实现可定制的复选框控件，支持选中/未选/中间态三种状态，
     * 提供完整的ARIA支持、键盘交互和事件响应机制。
     * @example ```html
     * <zane-checkbox
     *   label="同意协议"
     *   size="md"
     *   layer="02"
     *   rounded
     *   required
     * ></zane-checkbox>
     * ```
     */
    interface ZaneCheckbox {
        /**
          * ARIA属性配置对象  用于动态设置ARIA属性（如aria-label, aria-describedby等）， 组件会自动收集元素上所有`aria-*`属性到该对象。
          * @defaultValue `{}`
         */
        "configAria": any;
        /**
          * 禁用状态  当设置为`true`时，组件不可交互且视觉上变灰
          * @defaultValue `false`
         */
        "disabled": boolean;
        /**
          * 获取组件ID
          * @returns 组件唯一标识符
         */
        "getComponentId": () => Promise<string>;
        /**
          * 中间态状态  当设置为`true`时显示"-"图标，表示部分选中状态， 与`value`属性互斥（中间态时`value`应为false）
          * @defaultValue `false`
         */
        "intermediate": boolean;
        /**
          * 复选框标签文本
         */
        "label": string;
        /**
          * 视觉层级  控制组件在UI中的层级深度，影响阴影和背景色： - `01`: 表层组件（最高层级） - `02`: 中层组件 - `background`: 背景层组件（最低层级）
         */
        "layer"?: '01' | '02' | 'background';
        /**
          * 表单字段名（自动生成）
          * @default `zane-input-${this.gid}`
         */
        "name": string;
        /**
          * 只读状态
          * @default false
         */
        "readonly": boolean;
        /**
          * 必填状态
          * @default false
         */
        "required": boolean;
        /**
          * 圆角样式
          * @default false
         */
        "rounded": boolean;
        /**
          * 移除焦点
         */
        "setBlur": () => Promise<void>;
        /**
          * 设置焦点
         */
        "setFocus": () => Promise<void>;
        /**
          * 尺寸规格  - `lg`: 大尺寸(48px) - `md`: 中尺寸(40px) - `sm`: 小尺寸(32px)
          * @defaultValue `'md'`
         */
        "size": 'lg' | 'md' | 'sm';
        /**
          * 选中状态  当设置为`true`时显示选中图标， 与`intermediate`属性互斥
          * @defaultValue `false`
         */
        "value": boolean;
    }
    /**
     * 基于Monaco Editor的代码编辑器组件
     * 提供语法高亮、智能提示等专业编辑功能，支持暗黑/亮色主题切换，
     * 内置防抖机制优化高频变更事件，适用于代码片段展示和实时编辑场景。
     * @example ```html
     * <zane-code-editor
     *   language="javascript"
     *   minimap
     *   debounce="500"
     *   value="console.log('Hello  World')"
     * ></zane-code-editor>
     * ```
     */
    interface ZaneCodeEditor {
        /**
          * 变更事件防抖时间（毫秒）  避免高频输入时频繁触发变更事件， 设置为0可禁用防抖
          * @defaultValue `250`
         */
        "debounce": number;
        /**
          * 禁用状态  禁用时编辑器不可编辑但可滚动查看内容
          * @defaultValue `false`
         */
        "disabled": boolean;
        /**
          * 获取组件ID
          * @returns 组件唯一标识符
         */
        "getComponentId": () => Promise<string>;
        /**
          * 编程语言支持  支持的语法类型： - `html`: HTML/XML标记语言 - `javascript`: JavaScript/TypeScript - `json`: JSON数据格式
          * @defaultValue `'javascript'`
         */
        "language": 'html' | 'javascript' | 'json';
        /**
          * 类型声明库源码  用于提供智能提示的类型定义， 格式应为对应语言的类型声明字符串
         */
        "libSource": any;
        /**
          * 行号显示控制  - `on`: 显示行号 - `off`: 隐藏行号
          * @defaultValue `'on'`
         */
        "lineNumbers": 'off' | 'on';
        /**
          * 缩略图显示  在编辑器右侧显示代码导航缩略图
          * @defaultValue `false`
         */
        "minimap": boolean;
        /**
          * 表单字段名（自动生成）
          * @default `zane-input-${this.gid}`
         */
        "name": string;
        /**
          * 只读模式  开启后禁止编辑但保留代码高亮
          * @defaultValue `false`
         */
        "readonly": boolean;
        /**
          * 必填状态
          * @defaultValue `false`
         */
        "required": boolean;
        /**
          * 移除编辑器焦点
         */
        "setBlur": () => Promise<void>;
        /**
          * 设置编辑器焦点
         */
        "setFocus": () => Promise<void>;
        /**
          * 编辑器内容  双向绑定的代码文本值
         */
        "value": string;
    }
    /**
     * 代码高亮组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 组件样式表路径
     * @tag 组件自定义标签名称
     */
    interface ZaneCodeHighlighter {
        /**
          * 是否格式化代码
          * @Prop 装饰器表示这是组件的公开属性
          * @mutable 表示属性可变
          * @reflect 表示属性值会反映到DOM属性上
         */
        "format": boolean;
        /**
          * 是否隐藏复制按钮
          * @Prop 默认值为false
          * @default false
         */
        "hideCopy": boolean;
        /**
          * 是否为内联模式（非块级显示）
          * @Prop 装饰器，reflect表示会反映到DOM属性上
          * @default false
         */
        "inline": boolean;
        /**
          * 代码语言类型
          * @Prop 装饰器，reflect表示会反映到DOM属性上 默认值为'javascript'
          * @default 'javascript'
         */
        "language": Language;
        /**
          * 是否显示行号
          * @Prop 装饰器，reflect表示会反映到DOM属性上
          * @default false
         */
        "lineNumbers": boolean;
        /**
          * 代码内容
          * @Prop 装饰器
          * @default ''
         */
        "value": string;
    }
    /**
     * 容器布局组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 组件样式表路径
     * @tag 组件自定义标签名称
     */
    interface ZaneContainer {
        /**
          * 容器尺寸选项 - 'full': 全宽容器 - 'lg': 大号容器 - 'max': 最大宽度容器 - 'md': 中等容器 (默认值) - 'sm': 小号容器 - 'xl': 超大容器
          * @Prop 装饰器表示这是组件的公开属性
          * @reflect 表示属性值会反映到DOM属性上 默认值为 'full'
          * @default 'full'
         */
        "size": 'full' | 'lg' | 'max' | 'md' | 'sm' | 'xl';
    }
    /**
     * 当前时间显示组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 组件样式表路径
     * @tag 组件自定义标签名称
     */
    interface ZaneCurrentTime {
        /**
          * 时区设置 遵循IANA时区数据库的时区字符串格式 例如: "Asia/Shanghai", "America/New_York"
          * @Prop 装饰器表示这是组件的公开属性 未指定时使用运行环境的默认时区
         */
        "timezone": string;
    }
    /**
     * 日期选择器组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 组件样式表路径
     * @tag 组件自定义标签名称
     */
    interface ZaneDatePicker {
        /**
          * ARIA无障碍属性配置对象 用于存储所有aria-*属性
          * @Prop 装饰器表示这是组件的公开属性
          * @mutable 表示属性可变
          * @reflect 表示属性值会反映到DOM属性上
          * @default {}
         */
        "configAria": any;
        /**
          * 事件防抖时间(毫秒) 用于控制change事件的触发频率
          * @Prop 默认值为300ms
          * @default 300
         */
        "debounce": number;
        /**
          * 是否禁用组件
          * @Prop 装饰器，reflect表示会反映到DOM属性上 默认值为false
          * @default false
         */
        "disabled": boolean;
        /**
          * 获取组件ID的公共方法
          * @Method 装饰器定义公共方法
          * @returns 组件唯一ID
         */
        "getComponentId": () => Promise<string>;
        /**
          * 辅助文本 显示在输入框下方的帮助信息
          * @Prop
         */
        "helperText": string;
        /**
          * 是否为内联模式
          * @Prop 装饰器，reflect表示会反映到DOM属性上
          * @default false
         */
        "inline": boolean;
        /**
          * 是否为无效状态
          * @Prop 
          * @default false
         */
        "invalid": boolean;
        /**
          * 无效状态提示文本
          * @Prop
         */
        "invalidText": string;
        /**
          * 标签文本
          * @Prop
         */
        "label": string;
        /**
          * 输入框name属性 默认值为"zane-input-{唯一ID}"
          * @Prop 
          * @default `zane-input-${this.gid}`
         */
        "name": string;
        /**
          * 占位符文本
          * @Prop
         */
        "placeholder": string;
        /**
          * 是否为只读状态
          * @Prop 装饰器，reflect表示会反映到DOM属性上
          * @default false
         */
        "readonly": boolean;
        /**
          * 是否为必填项
          * @Prop 装饰器，reflect表示会反映到DOM属性上
          * @default false
         */
        "required": boolean;
        /**
          * 设置失去焦点的公共方法
          * @Method 装饰器定义公共方法
         */
        "setBlur": () => Promise<void>;
        /**
          * 设置获得焦点的公共方法
          * @Method 装饰器定义公共方法
         */
        "setFocus": () => Promise<void>;
        /**
          * 组件尺寸 - 'lg': 大尺寸 - 'md': 中等尺寸(默认) - 'sm': 小尺寸
          * @Prop 装饰器，reflect表示会反映到DOM属性上
          * @default 'md'
         */
        "size": 'lg' | 'md' | 'sm';
        /**
          * 当前值 可以是null、number或string类型
          * @Prop 装饰器，mutable表示属性可变
          * @default ''
         */
        "value"?: null | number | string;
        /**
          * 是否为警告状态
          * @Prop 
          * @default false
         */
        "warn": boolean;
        /**
          * 警告状态提示文本
          * @Prop
         */
        "warnText": string;
    }
    /**
     * 分割线组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 组件样式表路径
     * @tag 组件自定义标签名称
     */
    interface ZaneDivider {
        /**
          * 是否为垂直方向
          * @Prop 装饰器，reflect表示会反映到DOM属性上 默认值为false(水平方向)
          * @default false
         */
        "vertical": boolean;
    }
    /**
     * 下拉菜单组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 组件样式表路径
     * @tag 组件自定义标签名称
     */
    interface ZaneDropdown {
        /**
          * 是否禁用下拉菜单
          * @Prop 默认值为false
          * @default false
         */
        "disabled": boolean;
        /**
          * 是否为受控模式 在受控模式下，组件的状态完全由外部控制
          * @Prop 装饰器，reflect表示会反映到DOM属性上
          * @default false
         */
        "managed": boolean;
        /**
          * 下拉菜单是否打开
          * @Prop 装饰器，mutable表示属性可变，reflect表示会反映到DOM属性上
          * @default false
         */
        "open": boolean;
        /**
          * 下拉菜单位置选项 多个位置用逗号分隔，按优先级排序
          * @Prop 装饰器，reflect表示会反映到DOM属性上 默认值为'bottom-start,top-start,bottom-end,top-end'
          * @default 'bottom-start,top-start,bottom-end,top-end'
         */
        "placements": string;
        /**
          * 设置焦点的公共方法
          * @Method 装饰器定义公共方法
         */
        "setFocus": () => Promise<void>;
        /**
          * 触发下拉菜单的方式 - 'click': 点击触发 - 'hover': 悬停触发 - 'manual': 手动控制
          * @Prop 装饰器，reflect表示会反映到DOM属性上 默认值为'click'
          * @default 'click'
         */
        "trigger": 'click' | 'hover' | 'manual';
    }
    /**
     * 下拉菜单内容组件（需与zane-dropdown配合使用）
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 组件样式表路径
     * @tag 组件自定义标签名称
     */
    interface ZaneDropdownMenu {
        /**
          * 设置焦点的公共方法 将焦点设置到菜单组件
          * @Method 装饰器定义公共方法
         */
        "setFocus": () => Promise<void>;
    }
    /**
     * 空状态(Empty State)组件
     * 用于展示无数据时的占位内容，包含插图、标题、描述和操作按钮
     * @component 
     * @shadowDom 使用Shadow DOM封装组件样式
     * @implements ComponentInterface 实现Stencil组件生命周期接口
     */
    interface ZaneEmptyState {
        /**
          * 操作按钮文本  当设置此属性时会显示操作按钮
          * @type {string}
          * @reflectToAttr 同步到DOM属性
         */
        "action": string;
        /**
          * 禁用操作按钮  - true: 禁用操作按钮 - false: 启用操作按钮(默认)
          * @type {boolean}
          * @default false
         */
        "actionDisabled": boolean;
        /**
          * 操作按钮跳转链接  设置后会渲染为<a>标签而非<button>
          * @type {string}
         */
        "actionUrl": string;
        /**
          * 操作按钮样式变体  - 'default': 默认填充样式 - 'ghost': 幽灵按钮样式 - 'outline': 描边按钮样式(默认)
          * @type {'default' | 'ghost' | 'outline'}
          * @default 'default'
         */
        "actionVariant": 'default' | 'ghost' | 'outline';
        /**
          * 描述文本  支持HTML内容，会自动进行XSS过滤
          * @type {string}
          * @reflectToAttr 同步到DOM属性
         */
        "description": string;
        /**
          * 标题文本
          * @type {string}
          * @reflectToAttr 同步到DOM属性
         */
        "headline": string;
        /**
          * 插图名称  对应assets/images/empty-state目录下的SVG文件名
          * @type {string}
          * @default 'no-document'
          * @reflectToAttr 同步到DOM属性
         */
        "illustration": string;
    }
    /**
     * 页脚(Footer)组件
     * 提供可定制的页脚布局，支持多种变体和插槽内容
     * @component 
     * @shadowDom 使用Shadow DOM封装组件样式
     */
    interface ZaneFooter {
        /**
          * 页脚样式变体  通过CSS类名控制不同样式变体 默认值'simple'会生成'variant-simple'类名
          * @type {string}
          * @default 'simple'
          * @reflectToAttr 同步到DOM属性
         */
        "variant": string;
        /**
          * 版权年份  默认为当前年份，可通过属性覆盖
          * @type {number}
          * @default new Date().getFullYear()
         */
        "year": number;
    }
    /**
     * 页脚版权(Footer Copyright)组件
     * 用于展示标准版权声明，包含年份、版权所有者链接和保留权利声明
     * @component 
     * @shadowDom 使用Shadow DOM封装组件样式
     */
    interface ZaneFooterCopyright {
        /**
          * 版权所有者名称  将显示为可点击链接（当copyrightHref设置时）
          * @type {string}
         */
        "copyright": string;
        /**
          * 版权所有者链接  设置后会将版权名称渲染为可点击链接
          * @type {string}
         */
        "copyrightHref": string;
        /**
          * 版权年份  默认为当前年份，可通过属性覆盖
          * @type {number}
          * @default new Date().getFullYear()
         */
        "year": number;
    }
    /**
     * 页脚链接(Footer Links)组件
     * 用于展示页脚导航链接列表，支持动态链接数据传入
     * @component 
     * @shadowDom 使用Shadow DOM封装组件样式
     */
    interface ZaneFooterLinks {
        /**
          * 链接数据数组  支持两种格式： 1. 对象数组格式: [{href: string, name: string}] 2. JSON字符串格式: '[{"href":"...","name":"..."}]'
          * @type {(Array<{href: string, name: string}>|string)}
          * @default []
         */
        "links": { href: string; name: string }[]|string;
    }
    /**
     * 表单控件容器组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 组件样式表路径
     * @tag 组件自定义标签名称
     */
    interface ZaneFormControl {
        /**
          * 辅助文本 显示在表单控件下方的帮助信息
          * @Prop
         */
        "helperText": string;
        /**
          * 是否为内联布局
          * @Prop 装饰器，reflect表示会反映到DOM属性上 默认值为false
          * @default false
         */
        "inline": boolean;
        /**
          * 是否为无效状态
          * @Prop 
          * @default false
         */
        "invalid": boolean;
        /**
          * 无效状态提示文本
          * @Prop
         */
        "invalidText": string;
        /**
          * 标签文本
          * @Prop
         */
        "label": string;
        /**
          * 是否为必填项
          * @Prop 
          * @default false
         */
        "required": boolean;
        /**
          * 是否显示骨架屏 用于加载状态
          * @Prop 
          * @default false
         */
        "skeleton": boolean;
        /**
          * 是否为警告状态
          * @Prop 
          * @default false
         */
        "warn": boolean;
        /**
          * 警告状态提示文本
          * @Prop
         */
        "warnText": string;
    }
    /**
     * 头部组件，提供可定制的页面顶部导航栏
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 指定组件样式文件
     * @tag 定义组件在HTML中的标签名
     */
    interface ZaneHeader {
        /**
          * 头部组件的颜色主题
          * @Prop 可从外部设置的属性
          * @type {'black' | 'danger' | 'primary' | 'secondary' | 'success' | 'warning' | 'white' | string} - 'black': 黑色主题 - 'danger': 危险/错误状态颜色 - 'primary': 主品牌色 - 'secondary': 次要颜色 - 'success': 成功状态颜色 - 'warning': 警告状态颜色 - 'white': 白色主题 - string: 自定义颜色值
          * @default 'black'
         */
        "color": | 'black'
    | 'danger'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning'
    | 'white'
    | string;
        /**
          * 暗黑模式下的颜色主题
          * @Prop 可选属性，暗黑模式下的替代颜色
          * @type {'black' | 'danger' | 'primary' | 'secondary' | 'success' | 'warning' | 'white' | string} 枚举值与color属性相同
         */
        "darkModeColor"?: | 'black'
    | 'danger'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning'
    | 'white'
    | string;
        /**
          * 是否启用浮动模式
          * @Prop 控制头部是否浮动在内容上方
          * @default false
         */
        "float": boolean;
    }
    /**
     * 头部操作按钮组件，用于在头部导航栏中创建可交互的操作项
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 指定组件样式文件
     * @tag 定义组件在HTML中的标签名
     */
    interface ZaneHeaderAction {
        /**
          * 徽标内容
          * @Prop 可从外部设置的属性
          * @default '_self'
         */
        "badge": string;
        /**
          * ARIA可访问性配置
          * @Prop 可从外部设置的属性
          * @mutable 允许组件内部修改
          * @reflect 将属性值反映到DOM属性
          * @default {}
         */
        "configAria": any;
        /**
          * 链接地址
          * @Prop 可从外部设置的属性
          * @reflect 将属性值反映到DOM属性
         */
        "href": string;
        /**
          * 图标名称
          * @Prop 可从外部设置的属性
         */
        "icon": string;
        /**
          * 是否选中状态
          * @Prop 可从外部设置的属性
          * @default false
         */
        "selected": boolean;
        /**
          * 设置按钮颜色
          * @Method 暴露给外部调用的方法
          * @param color 要设置的颜色值
         */
        "setColor": (color: string) => Promise<void>;
        /**
          * 按钮尺寸
          * @Prop 可从外部设置的属性
          * @type {'lg' | 'md' | 'none' | 'sm' | 'xl' | 'xxl'} - 'lg': 大尺寸 - 'md': 中等尺寸(默认) - 'none': 无特定尺寸 - 'sm': 小尺寸 - 'xl': 超大尺寸 - 'xxl': 特大尺寸
          * @default 'md'
         */
        "size": 'lg' | 'md' | 'none' | 'sm' | 'xl' | 'xxl';
        /**
          * 链接打开方式
          * @Prop 可从外部设置的属性
          * @default '_self'
         */
        "target": string;
    }
    /**
     * 头部品牌标识组件，用于显示网站/应用的品牌标识和名称
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 指定组件样式文件
     * @tag 定义组件在HTML中的标签名
     */
    interface ZaneHeaderBrand {
        /**
          * 品牌链接地址
          * @Prop 可从外部设置的属性
          * @default '#' 默认链接到页面顶部
         */
        "href": string;
        /**
          * 品牌logo图片路径
          * @Prop 可从外部设置的属性 支持SVG和普通图片格式
         */
        "logo": string;
        /**
          * 品牌名称
          * @Prop 可从外部设置的属性
         */
        "name": string;
        /**
          * 设置品牌颜色
          * @Method 暴露给外部调用的方法
          * @param color 要设置的颜色值
          * @async 异步方法
         */
        "setColor": (color: string) => Promise<void>;
        /**
          * 品牌副标题
          * @Prop 可从外部设置的属性
         */
        "subTitle": string;
    }
    /**
     * 基于 Tiptap 的富文本编辑器组件，支持：
     * - HTML 源码编辑
     * - Mention（@提及）自动补全功能
     * - 内置工具条（加粗、斜体、列表等）
     * - 主题切换（vs-dark / vs-light）
     * - 可视化编辑与 HTML 源码切换
     * - 与表单集成（name、required、readonly 等属性）
     */
    interface ZaneHtmlEditor {
        /**
          * 设置事件触发的防抖时间（毫秒），用于优化 `zaneChange` 事件的触发频率。 默认值：250。
          * @default 250
         */
        "debounce": number;
        /**
          * 控制编辑器是否禁用。 - `true`：编辑器不可编辑。 - `false`：编辑器可编辑（默认）。
          * @default false
         */
        "disabled": boolean;
        /**
          * 获取组件的唯一标识符（GID）。 用于生成唯一 name 属性或用于调试。
         */
        "getComponentId": () => Promise<string>;
        /**
          * 设置组件的层级样式类，用于区分不同视觉层级的组件。 可选值： - '01'：主层级，视觉权重最高（如模态框） - '02'：次级层级，用于普通组件 - 'background'：背景层级，通常用于遮罩、背景等
         */
        "layer"?: '01' | '02' | 'background';
        /**
          * 设置是否在代码编辑器中显示行号。 - 'on'：显示行号（默认） - 'off'：不显示行号
          * @default 'on'
         */
        "lineNumbers": 'off' | 'on';
        /**
          * @default []
         */
        "mentions": { label: string; value: string }[];
        /**
          * 配置 Mention 提及功能的搜索方式。 - 'contains'：使用本地数组进行模糊匹配（适合静态数据） - 'managed'：通过事件 `zane-html-editor--search` 获取动态数据（适合异步搜索）
          * @default 'contains'
         */
        "mentionsSearch": 'contains' | 'managed';
        /**
          * 表单字段名称，用于提交或获取数据。 默认值：`zane-input-<index>`，其中 `<index>` 为组件唯一标识符。
          * @default `zane-input-${this.gid}`
         */
        "name": string;
        /**
          * 编辑器的占位文本（未输入内容时显示的提示文本）。
         */
        "placeholder": string;
        /**
          * 设置编辑器是否为只读模式。 - `true`：用户不能修改内容 - `false`：用户可编辑（默认）
          * @default false
         */
        "readonly": boolean;
        /**
          * 设置是否为必填字段，通常用于表单验证。 - `true`：必须输入 - `false`：非必填（默认）
          * @default false
         */
        "required": boolean;
        /**
          * 手动设置编辑器失去焦点。
         */
        "setBlur": () => Promise<void>;
        /**
          * 手动设置编辑器获得焦点。
         */
        "setFocus": () => Promise<void>;
        /**
          * @default true
         */
        "showSuggestionCharacter": boolean;
        /**
          * @default true
         */
        "showToolbar": boolean;
        /**
          * @default '@'
         */
        "suggestionCharacter": string;
        /**
          * 设置编辑器的外观主题。 - 'vs-dark'：深色主题 - 'vs-light'：浅色主题（默认）
          * @default 'vs-light'
         */
        "theme": 'vs-dark' | 'vs-light';
        /**
          * 设置或获取富文本编辑器的当前内容值（HTML 字符串）。
         */
        "value": string;
    }
    /**
     * 图标组件（zane-icon）
     * 该组件基于 Stencil 构建，用于按需异步加载并渲染 SVG 图标。
     * 支持通过属性 name 指定图标名称，通过 size 控制图标尺寸。
     * 组件内部使用 Shadow DOM 实现样式隔离，并暴露 CSS 自定义属性
     * `--zane-icon-size` 供外部覆盖默认尺寸。
     * @example <!-- 基础用法 -->
     * <zane-icon name="home" size="md"></zane-icon>
     * <!-- 自定义尺寸 -->
     * <zane-icon name="user" size="32px"></zane-icon>
     */
    interface ZaneIcon {
        /**
          * 图标名称，对应图标库中的文件名。 当该值发生变化时，组件会重新异步加载对应 SVG。
          * @example <zane-icon name="arrow-down"></zane-icon>
         */
        "name": string;
        /**
          * 图标尺寸。 - 可选内置枚举：'xs' | 'sm' | 'md' | 'lg' | 'xl' - 也可传入任意合法的 CSS 长度值（如 "24px"、"1.5rem"）或纯数字字符串（如 "2"）。
          * @example <zane-icon size="lg"></zane-icon> <zane-icon size="32px"></zane-icon>
         */
        "size": string;
    }
    /**
     * 自适应主题图片组件（zane-image）
     * 该组件能够根据当前系统的明暗主题自动切换显示的图片资源。
     * 当检测到处于暗色模式时，优先使用 darkSrc 指定的暗色主题图片；
     * 否则使用 src 指定的默认图片。
     * 组件内部通过监听主题变化事件实现实时切换，无需手动刷新。
     * @example <!-- 基础用法 -->
     * <zane-image
     *   src="assets/logo-light.svg"
     *   dark-src="assets/logo-dark.svg"
     *   image-title="公司 Logo">
     * </zane-image>
     */
    interface ZaneImage {
        /**
          * 暗色主题下的图片地址。 当系统处于暗色模式且该值存在时，将优先渲染此图片。
          * @example dark-src="assets/banner-dark.png"
         */
        "darkSrc": string;
        /**
          * 图片的替代文本（alt 属性）。 用于无障碍访问及图片加载失败时的占位说明。
          * @example image-title="用户头像"
         */
        "imageTitle": string;
        "src": string;
    }
    /**
     * 自定义输入框组件 zane-input
     * 实现功能：
     * 1. 支持多种输入类型（文本、密码、邮箱等）及尺寸控制
     * 2. 包含表单验证状态（错误/警告）及辅助文本展示
     * 3. 提供前后插槽(start/end)扩展能力
     * 4. 支持防抖事件处理与无障碍访问
     * 5. 集成密码可见性切换功能
     */
    interface ZaneInput {
        /**
          * 自动填充控制 - `on`: 允许浏览器自动填充 - `off`: 禁用自动填充
          * @default 'off'
         */
        "autocomplete": 'off' | 'on';
        /**
          * 动态ARIA属性配置对象 - 收集宿主元素上所有`aria-*`属性并转移到内部input元素 - 需通过mutable允许组件内修改
          * @default {}
         */
        "configAria": any;
        /**
          * 输入内容变化事件(zane-input--change)的防抖延迟(ms)
          * @default 300
         */
        "debounce": number;
        /**
          * 禁用状态 - 设置后阻止用户交互
          * @attr 
          * @default false
         */
        "disabled": boolean;
        /**
          * 获取组件唯一ID
          * @returns 组件全局唯一标识(gid)
         */
        "getComponentId": () => Promise<string>;
        /**
          * 辅助说明文本 - 在非错误/警告状态下显示
         */
        "helperText": string;
        /**
          * 行内布局模式 - 设置后标签与输入框水平排列
          * @attr 
          * @default false
         */
        "inline": boolean;
        /**
          * 验证失败状态 - 激活时会显示invalidText并应用错误样式
          * @default false
         */
        "invalid": boolean;
        /**
          * 验证失败提示文本 - 当invalid=true时显示
         */
        "invalidText": string;
        /**
          * 输入框标签文本 - 显示在输入区域上方
         */
        "label": string;
        /**
          * 输入框名称 - 用于表单提交时识别字段 - 默认生成唯一ID: zane-input-{gid}
          * @default `zane-input-${this.gid}`
         */
        "name": string;
        /**
          * 占位提示文本
         */
        "placeholder": string;
        /**
          * 只读状态 - 允许查看但禁止修改内容
          * @attr 
          * @default false
         */
        "readonly": boolean;
        /**
          * 必填标识 - 显示红色星号(*)并触发浏览器原生验证
          * @attr 
          * @default false
         */
        "required": boolean;
        /**
          * 移除输入框焦点 - 同时更新hasFocus状态
         */
        "setBlur": () => Promise<void>;
        /**
          * 激活输入框焦点 - 同时更新hasFocus状态
         */
        "setFocus": () => Promise<void>;
        /**
          * 尺寸控制 - `sm`: 小尺寸(高度32px) - `md`: 中尺寸(高度40px) - `lg`: 大尺寸(高度48px)
          * @default 'md'
          * @attr
         */
        "size": 'lg' | 'md' | 'sm';
        /**
          * 骨架屏模式 - 加载状态时显示灰色占位块
          * @default false
         */
        "skeleton": boolean;
        /**
          * 输入类型 - `text`: 普通文本 - `password`: 密码(带可见切换按钮) - `email`: 邮箱格式验证 - `tel`: 电话号码输入
          * @default 'text'
         */
        "type": 'email' | 'password' | 'tel' | 'text';
        /**
          * 输入框值 - 使用双向数据绑定
         */
        "value": string;
        /**
          * 警告状态 - 非致命性错误提示，显示warnText
          * @default false
         */
        "warn": boolean;
        /**
          * 警告提示文本 - 当warn=true时显示
         */
        "warnText": string;
    }
    /**
     * 双模式URL输入组件
     * @component zane-input-url
     * @tags form-control, input, url
     * @shadow true
     * @description 提供URL输入与预览双模式交互的输入组件。在展示模式下显示可点击的URL链接，
     * 在编辑模式下提供带验证功能的输入框。支持防抖值变化事件和实时URL验证。
     * @example <!-- 基础用法 -->
     * <zane-input-url
     *   value="https://example.com"
     *   placeholder="输入网站地址"
     * />
     * <!-- 带尺寸控制 -->
     * <zane-input-url size="sm" />
     */
    interface ZaneInputUrl {
        /**
          * 值变化事件的防抖时间（毫秒）
          * @type {number}
          * @default 300
          * @description 控制`valueChange`事件触发前的延迟时间，用于优化频繁输入时的性能表现。 值越小响应越快，值越大可减少事件触发次数。
         */
        "debounce": number;
        /**
          * 禁用状态
          * @type {boolean}
          * @default false
          * @reflect 
          * @description 当设置为true时，组件进入禁用状态： - 输入框不可交互 - 视觉上呈现禁用样式 - 编辑按钮不可点击
         */
        "disabled": boolean;
        /**
          * 编辑模式状态
          * @type {boolean}
          * @default false
          * @mutable 
          * @reflect 
          * @description 控制组件当前交互模式： - `false`: 展示模式（显示URL链接） - `true`: 编辑模式（显示输入框）  该属性支持双向绑定，组件内部状态变化时会自动更新。
         */
        "editing": boolean;
        /**
          * 获取组件唯一标识符
          * @method 
          * @returns 组件全局唯一ID
          * @description 提供获取组件实例唯一标识符的公共方法。 可用于表单关联或组件间通信。
         */
        "getComponentId": () => Promise<string>;
        /**
          * 输入框名称属性
          * @type {string}
          * @default `zane-input-url-${gid}`
          * @description 对应原生input元素的`name`属性，用于表单提交。 默认自动生成格式为`zane-input-url-{唯一ID}`的值。
         */
        "name": string;
        /**
          * 输入框占位文本
          * @type {string}
          * @description 编辑模式下输入框显示的提示文本。 当输入值为空时显示。
         */
        "placeholder": string;
        /**
          * 移除输入框焦点
          * @method 
          * @description 公共方法，以编程方式移除输入框焦点： 1. 调用原生input元素的blur() 2. 更新hasFocus状态
         */
        "setBlur": () => Promise<void>;
        /**
          * 设置输入框焦点
          * @method 
          * @description 公共方法，以编程方式聚焦输入框： 1. 调用原生input元素的focus() 2. 更新hasFocus状态
         */
        "setFocus": () => Promise<void>;
        /**
          * 组件尺寸规格
          * @type {'lg' | 'md' | 'sm'}
          * @default 'md'
          * @reflect 
          * @description 控制组件的视觉尺寸，可选值： - `'sm'`: 小尺寸 (适用于紧凑界面) - `'md'`: 中尺寸 (默认标准尺寸) - `'lg'`: 大尺寸 (适用于强调场景)  该属性会反映到宿主元素的HTML属性上，可通过CSS属性选择器进行样式定制。
         */
        "size": 'lg' | 'md' | 'sm';
        /**
          * 输入值
          * @type {string}
          * @mutable 
          * @description 组件的当前URL值，支持双向绑定。 在展示模式下显示为可点击链接，在编辑模式下作为输入框的值。
         */
        "value": string;
    }
    /**
     * 智能链接组件
     * @component zane-link
     * @tags navigation, link, interactive
     * @shadow true
     * @description 增强型可交互链接组件，支持动态状态反馈和键盘导航优化。
     * 特性包括：
     * - 视觉状态反馈（聚焦/激活）
     * - 空格键触发点击
     * - 跨浏览器兼容的焦点管理
     * - 无障碍属性支持
     * @example <!-- 基础链接 -->
     * <zane-link href="/about">关于我们</zane-link>
     * <!-- 新窗口打开 -->
     * <zane-link href="https://external.com"  target="_blank">
     *   外部链接
     * </zane-link>
     */
    interface ZaneLink {
        /**
          * 链接目标地址
          * @type {string}
          * @reflect 
          * @description 对应 HTML anchor 元素的 href 属性： - 支持绝对路径和相对路径 - 支持哈希锚点定位 - 空值时渲染为无跳转功能的伪链接
         */
        "href": string;
        /**
          * 链接打开方式
          * @type {string}
          * @description 对应 HTML anchor 元素的 target 属性： - `_blank`: 新窗口/标签页打开 - `_self`: 当前窗口打开（默认） - `_parent` / `_top`: 框架控制
         */
        "target": string;
        /**
          * 触发链接点击
          * @method 
          * @async 
          * @description 通过编程方式触发链接的点击行为： - 模拟用户点击效果 - 保持与原生事件的一致性 - 适用于自动化测试场景
         */
        "triggerClick": () => Promise<void>;
    }
    /**
     * 多功能菜单容器组件
     * @component zane-menu
     * @tags navigation, menu, container
     * @shadow true
     * @description 提供标准化的菜单容器实现，支持：
     * - 多种视觉尺寸层级
     * - 键盘导航支持
     * - 空状态展示
     * - 动态焦点管理
     * @example <!-- 基础菜单 -->
     * <zane-menu>
     *   <zane-menu-item>选项一</zane-menu-item>
     *   <zane-menu-item>选项二</zane-menu-item>
     * </zane-menu>
     * <!-- 空状态菜单 -->
     * <zane-menu empty empty-state-headline="无数据" empty-state-description="请添加菜单项">
     * </zane-menu>
     */
    interface ZaneMenu {
        /**
          * 空状态标识
          * @type {boolean}
          * @mutable 
          * @default false
          * @description 控制是否显示空状态界面： - `true`: 显示空状态组件 - `false`: 渲染常规菜单项 当设置为true时，将忽略slot内容
         */
        "empty": boolean;
        /**
          * 空状态描述文本
          * @type {string}
          * @mutable 
          * @default 'There are no items to display'
          * @description 空状态界面中的辅助说明文字 支持HTML转义字符和多语言配置
         */
        "emptyStateDescription": string;
        /**
          * 空状态标题文本
          * @type {string}
          * @mutable 
          * @default 'No items'
          * @description 空状态界面中的主标题文字 通常使用简短有力的提示语
         */
        "emptyStateHeadline": string;
        /**
          * UI层级样式
          * @type {'01' | '02' | 'background'}
          * @reflect 
          * @description 控制菜单的视觉层级深度： - `01`: 表层菜单 (默认层级，高度为1dp) - `02`: 中层菜单 (高度为2dp，更明显的阴影) - `background`: 背景层菜单 (无阴影，用于嵌套场景) 对应不同的box-shadow和z-index值
         */
        "layer"?: '01' | '02' | 'background';
        /**
          * 设置初始焦点
          * @method 
          * @async 
          * @description 公共API方法： - 自动聚焦首个菜单项 - 用于页面加载后的自动聚焦 - 配合屏幕阅读器实现无障碍访问
         */
        "setFocus": () => Promise<void>;
        /**
          * 加载状态标识
          * @type {boolean}
          * @default false
          * @description 控制是否显示加载指示器： - `true`: 显示加载动画 - `false`: 正常显示内容 实际实现需在模板中添加加载器组件
         */
        "showLoader": boolean;
        /**
          * 菜单尺寸
          * @type {'lg' | 'md' | 'sm'}
          * @reflect 
          * @default 'md'
          * @description 控制菜单项尺寸和间距： - `sm`: 紧凑模式 (高度32px，字号12px) - `md`: 标准模式 (高度40px，字号14px) - `lg`: 大尺寸模式 (高度48px，字号16px) 影响内边距和行高
         */
        "size": 'lg' | 'md' | 'sm';
        /**
          * 当前选中值
          * @type {number | string}
          * @description 记录当前选中的菜单项值 应与子组件 zane-menu-item 的 value 属性联动 用于实现受控菜单组件
         */
        "value"?: number | string;
    }
    /**
     * 菜单分隔线组件
     * @component zane-menu-divider
     * @shadow true
     * @description 提供菜单项之间的视觉分隔效果，用于增强菜单结构的可读性。该组件：
     * - 实现菜单项分组逻辑分隔
     * - 支持深浅主题色自动适配
     * - 提供标准化的间距和高度
     * @example <!-- 基础用法 -->
     * <zane-menu>
     *   <zane-menu-item>选项一</zane-menu-item>
     *   <zane-menu-divider></zane-menu-divider> <!-- 分隔线 -->
     *   <zane-menu-item>选项二</zane-menu-item>
     * </zane-menu>
     * <!-- 分组场景 -->
     * <zane-menu>
     *   <zane-menu-item>操作类</zane-menu-item>
     *   <zane-menu-divider></zane-menu-divider>
     *   <zane-menu-item>设置类</zane-menu-item>
     * </zane-menu>
     */
    interface ZaneMenuDivider {
    }
    /**
     * 菜单项组件 (zane-menu-item)
     * @component zane-menu-item
     * @shadow true
     * @description 实现标准导航菜单项的核心组件，提供：
     * - 多状态交互（正常/选中/禁用/聚焦）
     * - 8种语义化色彩主题
     * - 可选中标记功能（带对勾图标）
     * - 原生链接支持（href/target）
     * - 键盘导航支持（空格/回车触发）
     * - 无障碍ARIA兼容设计
     * @example <!-- 基础文本菜单项 -->
     * <zane-menu-item>个人中心</zane-menu-item>
     * <!-- 带图标和选中状态的菜单项 -->
     * <zane-menu-item selected selectable>
     *   收件箱
     *   <zane-badge slot="end">12</zane-badge>
     * </zane-menu-item>
     * <!-- 作为链接的菜单项 -->
     * <zane-menu-item
     *   href="/settings"
     *   color="primary"
     *   target="_blank">
     *   系统设置
     * </zane-menu-item>
     * @designSystem | 状态         | 视觉特征                     |
     * |--------------|----------------------------|
     * | 正常         | 浅灰背景，深灰文字          |
     * | 悬停         | 浅蓝色背景（#f0f7ff）       |
     * | 聚焦         | 2px蓝色边框（#1a73e8）      |
     * | 选中         | 左侧蓝色条+对勾图标         |
     * | 禁用         | 50%透明度，阻止交互事件     |
     */
    interface ZaneMenuItem {
        /**
          * 菜单项色彩主题
          * @prop {string} color - 预定义色彩方案，默认'default'
          * @options - 'black'：深黑商务风 - 'danger'：错误操作（红） - 'default'：中性灰（默认） - 'primary'：品牌主色（蓝） - 'secondary'：辅助色（紫） - 'success'：成功状态（绿） - 'warning'：警示操作（黄） - 'white'：浅色模式专用
          * @default 'default'
         */
        "color": | 'black'
    | 'danger'
    | 'default'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning'
    | 'white';
        /**
          * 禁用状态开关
          * @prop {boolean} disabled - 禁用交互并降低透明度（默认false）
          * @designNote 禁用时阻止所有点击/键盘事件传递
          * @default false
         */
        "disabled": boolean;
        /**
          * 链接目标地址
          * @prop {string} href - 设置后组件渲染为<a>元素（默认undefined）
          * @behavior 点击时自动执行 window.open(href,  target)
         */
        "href": string;
        /**
          * 视觉层级
          * @prop {string} layer - 背景透明度层级（默认继承父菜单）
          * @options '01'|'02'|'background'
         */
        "layer"?: '01' | '02' | 'background';
        /**
          * 可选状态开关
          * @prop {boolean} selectable - 启用选中标记功能（默认false）
          * @visualEffect 激活时显示左侧选中条和对勾图标
          * @default false
         */
        "selectable": boolean;
        /**
          * 选中状态
          * @prop {boolean} selected - 标记为选中项（需selectable=true）
          * @renderCondition 当selectable=true时显示选中状态视觉
          * @default false
         */
        "selected": boolean;
        /**
          * 移除焦点方法
          * @method setBlur
          * @public 
          * @description 通过编程方式使菜单项失去焦点
          * @usage 常用于菜单关闭时清除焦点状态
         */
        "setBlur": () => Promise<void>;
        /**
          * 获取焦点方法
          * @method setFocus
          * @public 
          * @description 通过编程方式聚焦菜单项
          * @usage 常用于键盘导航时移动焦点
         */
        "setFocus": () => Promise<void>;
        /**
          * 链接打开方式
          * @prop {string} target - 同<a>标签target属性（默认'_self'）
          * @default '_self'
         */
        "target": string;
        /**
          * 菜单项值
          * @prop {string|number} value - 事件传递的标识值（默认innerText）
          * @emitChange 点击事件中作为payload.value 传递
         */
        "value"?: null | number | string;
    }
    /**
     * 模态框组件 (zane-modal)
     * @component zane-modal
     * @shadow true
     * @description 提供企业级应用的模态对话框解决方案，支持：
     * - 多种预设尺寸响应式布局
     * - 灵活的内容插槽（头部/主体/底部）
     * - 加载状态可视化
     * - 可控关闭行为（自动关闭/受控关闭）
     * - 无障碍访问支持
     * - 滚动条自动管理
     * @example <!-- 基础用法 -->
     * <zane-modal
     *   heading="确认操作"
     *   open={true}>
     *   <p>确定要删除此项吗？</p>
     *   <div slot="footer">
     *     <zane-button>取消</zane-button>
     *     <zane-button variant="primary">确定</zane-button>
     *   </div>
     * </zane-modal>
     * <!-- 带加载状态的模态框 -->
     * <zane-modal
     *   heading="数据处理中"
     *   open={true}
     *   showLoader={true}>
     *   <p>请稍候，正在保存您的数据...</p>
     * </zane-modal>
     */
    interface ZaneModal {
        /**
          * 模态框主标题
          * @prop {string} heading - 显示在顶部的标题文本
          * @visualEffect 使用 heading 样式（字号1.25rem/粗体）
         */
        "heading": string;
        /**
          * 隐藏关闭按钮
          * @prop {boolean} hideClose - 是否隐藏右上角关闭按钮（默认false）
          * @default false
         */
        "hideClose": boolean;
        /**
          * 受控模式开关
          * @prop {boolean} managed - 是否由外部状态控制关闭行为（默认false）
          * @behavior - false（默认）：组件内部管理 open 状态（点击关闭按钮自动关闭） - true：需外部监听 zane-modal--close 事件并手动更新 open 状态
          * @usageNote 在复杂状态管理场景中使用（如React/Vue集成）
          * @default false
         */
        "managed": boolean;
        /**
          * 模态框开启状态
          * @prop {boolean} open - 控制模态框显示/隐藏（默认false）
          * @important 核心显示控制属性
          * @effect 开启时自动禁用页面滚动（关闭时恢复）
          * @default false
         */
        "open": boolean;
        /**
          * 加载状态显示
          * @prop {boolean} showLoader - 是否显示加载指示器（默认false）
          * @visualEffect - 半透明遮罩层覆盖内容区 - 居中显示旋转加载图标
          * @usageNote 适合异步操作期间禁用交互
          * @default false
         */
        "showLoader": boolean;
        /**
          * 模态框尺寸方案
          * @prop {'lg' | 'md' | 'sm'} size - 预设响应式尺寸（默认'md'）
          * @options - 'sm'：小尺寸 - 'md'：中尺寸- 默认值 - 'lg'：大尺寸
          * @responsive 自动适配移动端（小屏下占满宽度）
          * @default 'md'
         */
        "size": 'lg' | 'md' | 'sm';
        /**
          * 副标题文本
          * @prop {string} subheading - 显示在主标题下方的辅助文本
          * @visualEffect 次级文本样式（字号0.875rem/灰色）
         */
        "subheading": string;
    }
    /**
     * 模态框内容容器组件 (zane-modal-content)
     * @component zane-modal-content
     * @shadow true
     * @description 专为 zane-modal 设计的结构化内容容器，提供三种预设内容样式方案，
     * 支持动态切换内容展示模式。作为模态框生态系统的核心子组件，实现：
     * - 内容区域样式规范化
     * - 自适应内容布局
     * - 多场景内容样式预设
     * - 无缝衔接父级模态框的交互状态
     * @see {@link zane-modal } 关联的父级模态框组件
     * @example <!-- 默认带边框样式 -->
     * <zane-modal-content>
     *   <p>标准内容区块</p>
     * </zane-modal-content>
     * <!-- 无边框模式 -->
     * <zane-modal-content type="borderless">
     *   <img src="data-chart.png"  alt="数据图表"/>
     * </zane-modal-content>
     * <!-- 文本优化模式 -->
     * <zane-modal-content type="text">
     *   <h3>服务条款</h3>
     *   <p>这里是详细的协议文本内容...</p>
     * </zane-modal-content>
     */
    interface ZaneModalContent {
        /**
          * @default 'default'
         */
        "type": 'borderless' | 'default' | 'text';
    }
    /**
     * 智能通知系统组件 (zane-notification)
     * @component zane-notification
     * @shadow true
     * @description 提供多场景智能通知解决方案，支持四态反馈、操作交互和主题适配。
     * 核心功能包括：
     * - 状态图标自动匹配
     * - 暗黑模式/高对比度自适应
     * - 内联/块级布局切换
     * - 可定制的操作按钮
     * - 可控的关闭行为
     * - 无障碍访问支持
     * @example <!-- 基础警告通知 -->
     * <zane-notification state="warning" dismissible>
     *   <span slot="title">存储空间不足</span>
     *   <span slot="subtitle">剩余 5% 磁盘空间，建议清理缓存</span>
     * </zane-notification>
     * <!-- 带操作的成功通知 -->
     * <zane-notification state="success" action="查看详情" high-contrast>
     *   <span slot="title">支付成功</span>
     *   <span slot="subtitle">订单号：20250719-2156</span>
     * </zane-notification>
     */
    interface ZaneNotification {
        /**
          * 操作按钮文本
          * @prop {string} [action] - 显示在通知右侧的操作按钮文字
          * @example <zane-notification action="撤销操作">...</zane-notification>
         */
        "action": string;
        /**
          * 可关闭特性
          * @prop {boolean} [dismissible=false] - 是否显示关闭按钮
          * @example <zane-notification dismissible>...</zane-notification>
          * @default false
         */
        "dismissible": boolean;
        /**
          * 高对比度模式
          * @prop {boolean} [highContrast=false] - 启用高对比度视觉方案 - 设计规范：符合WCAG 2.1 AA标准 - 亮色模式：深色文字+加粗边框 - 暗色模式：反转配色方案
          * @example <zane-notification high-contrast>...</zane-notification>
          * @default false
         */
        "highContrast": boolean;
        /**
          * 内联布局模式
          * @prop {boolean} [inline=false] - 切换为行内样式布局 - 特征： - 移除背景色和边框 - 状态图标与文本对齐 - 操作按钮变为幽灵样式 - 适用场景：表单内联校验提示
          * @example <p>请输入验证码 <zane-notification inline state="error">验证码失效</zane-notification></p>
          * @default false
         */
        "inline": boolean;
        /**
          * 托管关闭模式
          * @prop {boolean} [managed=false] - 关闭行为是否由外部控制 - 当设为true时： - 点击关闭按钮不会隐藏组件 - 必须监听 zane-notification--dismiss 事件手动处理 - 适用场景：通知队列管理/动画关闭
          * @example <zane-notification managed dismissible>...</zane-notification>  <script>   notification.addEventListener('zane-notification--dismiss',  () => {     // 执行动画后移除DOM   }) </script>
          * @default false
         */
        "managed": boolean;
        /**
          * 通知状态类型
          * @prop {'error'|'info'|'success'|'warning'} [state='info'] - 定义通知的语义化状态
          * @option error - 错误状态（红色系） - 图标：❌ 错误图标 - 场景：系统故障/操作失败 - 样式特征： - 背景色：#fee2e2 (浅红) - 边框色：#dc2626 (暗红)
          * @option info - 信息状态（蓝色系） - 图标：ℹ️ 信息图标 - 场景：系统通知/进程提示 - 样式特征： - 背景色：#dbeafe (浅蓝) - 边框色：#2563eb (深蓝)
          * @option success - 成功状态（绿色系） - 图标：✅ 对勾图标 - 场景：操作成功/流程完成 - 样式特征： - 背景色：#dcfce7 (浅绿) - 边框色：#16a34a (深绿)
          * @option warning - 警告状态（橙色系） - 图标：⚠️ 感叹号图标 - 场景：风险提示/操作确认 - 样式特征： - 背景色：#ffedd5 (浅橙) - 边框色：#ea580c (深橙)
          * @default 'info'
         */
        "state": 'error' | 'info' | 'success' | 'warning';
    }
    /**
     * 智能通知管理系统组件 (zane-notification-manager)
     * @component zane-notification-manager
     * @shadow true
     * @description 全局通知管理中心，提供以下核心能力：
     * 1. 跨组件通知聚合：通过事件总线收集全应用通知
     * 2. 多位置布局：支持4种屏幕定位策略
     * 3. 生命周期管理：自动关闭/手动关闭/防重复
     * 4. 安全渲染：内置DOM净化防止XSS攻击
     * 5. 主题适配：自动同步暗黑模式状态
     * @example <!-- 基础用法 -->
     * <zane-notification-manager position="top-right"></zane-notification-manager>
     * <!-- 自定义命名管理器 -->
     * <zane-notification-manager name="dashboard" position="bottom-left"></zane-notification-manager>
     */
    interface ZaneNotificationManager {
        /**
          * 管理器命名空间
          * @prop {string} [name='global'] - 管理器唯一标识 - `global`：默认全局管理器，接收未指定目标的通告 - 自定义名：只接收相同target参数的通告
          * @example // 发送到指定管理器 const event = new CustomEvent('zane-notification', {   detail: { target: 'dashboard', title: '数据更新完成' } }); window.dispatchEvent(event);
          * @default 'global'
         */
        "name": string;
        /**
          * 通知定位策略
          * @prop {'top-left'|'top-right'|'bottom-left'|'bottom-right'} [position='bottom-right'] - 通知容器屏幕位置
          * @option top-left - 左上角定位 - 适用场景：重要实时状态更新（如系统监控） - 设计规范：距顶部20px，距左侧20px
          * @option top-right - 右上角定位（默认） - 适用场景：通用信息提示（如操作反馈） - 设计规范：距顶部20px，距右侧20px
          * @option bottom-left - 左下角定位 - 适用场景：后台任务通知（如文件下载） - 设计规范：距底部20px，距左侧20px
          * @option bottom-right - 右下角定位 - 适用场景：非紧急通知（如新闻推送） - 设计规范：距底部20px，距右侧20px
          * @default 'bottom-right'
         */
        "position": | 'bottom-left'
    | 'bottom-right'
    | 'top-left'
    | 'top-right';
    }
    /**
     * 数字输入框组件 zane-number
     * 核心功能：
     * 1. 支持数字输入及增减按钮控制
     * 2. 提供四种状态反馈（默认/成功/警告/错误）
     * 3. 表单验证支持（必填/禁用/只读）
     * 4. 防抖事件处理与无障碍访问优化
     * 5. 插槽扩展能力（前后扩展区域）
     * @implements ComponentInterface *
     * @implements InputComponentInterface *
     */
    interface ZaneNumber {
        /**
          * 自动填充控制 - `on`: 允许浏览器自动填充 - `off`: 禁用自动填充
          * @default 'off'
         */
        "autocomplete": 'off' | 'on';
        /**
          * @default {}
         */
        "configAria": any;
        /**
          * 防抖延迟(ms) - 控制 zane-number--change 事件触发频率
          * @default 300
         */
        "debounce": number;
        /**
          * @default false
         */
        "disabled": boolean;
        /**
          * 获取组件全局唯一标识
          * @returns 组件ID
         */
        "getComponentId": () => Promise<string>;
        "helperText": string;
        /**
          * 操作按钮可见性控制  - true: 隐藏增减按钮  - false: 显示（默认）
          * @attr 
          * @default false
         */
        "hideActions": boolean;
        /**
          * @default false
         */
        "inline": boolean;
        /**
          * @default false
         */
        "invalid": boolean;
        "invalidText": string;
        "label": string;
        /**
          * @default `zane-input-${this.gid}`
         */
        "name": string;
        "placeholder": string;
        /**
          * @default false
         */
        "readonly": boolean;
        /**
          * @default false
         */
        "required": boolean;
        "setBlur": () => Promise<void>;
        "setFocus": () => Promise<void>;
        /**
          * 尺寸规格 - `sm`: 小尺寸(高度约32px) - `md`: 中尺寸(高度约40px) - `lg`: 大尺寸(高度约48px)
          * @attr 
          * @default 'md'
         */
        "size": 'lg' | 'md' | 'sm';
        /**
          * @default false
         */
        "skeleton": boolean;
        /**
          * 组件状态标识 - `default`: 默认状态（无特殊样式） - `success`: 成功状态（通常用绿色标识） - `warning`: 警告状态（通常用橙色标识） - `error`: 错误状态（通常用红色标识）
          * @attr 
          * @default 'default'
         */
        "state": 'default' | 'error' | 'success' | 'warning';
        /**
          * 输入值（数字类型） - 支持 null 表示空值 - 使用 mutable 实现双向绑定
          * @example <zane-number value={5} />
          * @default null
         */
        "value"?: null | number;
        /**
          * @default false
         */
        "warn": boolean;
        "warnText": string;
    }
    /**
     * 弹出框组件（Popover）
     * @component zane-popover
     * @shadow true
     * @description `zane-popover` 是一个灵活的弹出框组件，可以在目标元素周围显示内容。它支持多种触发方式（点击、悬停、手动控制）、多种箭头样式以及自定义位置。
     * 使用此组件时，需要在组件内部放置一个 `zane-popover-content` 组件作为弹出内容，以及一个触发元素（例如按钮）。
     * @example <zane-popover trigger="click">
     *   <button>点击我</button>
     *   <zane-popover-content>
     *     这里是弹出内容
     *   </zane-popover-content>
     * </zane-popover>
     */
    interface ZanePopover {
        /**
          * 弹出框关闭的动画时间（毫秒）
          * @prop {number} [dismissTimeout=300]
          * @default 300
         */
        "dismissTimeout": number;
        /**
          * 隐藏弹出框的公共方法
          * @method hide
          * @async
         */
        "hide": () => Promise<void>;
        /**
          * 弹出框与目标元素之间的偏移量（像素）
          * @prop {number} [offset=4]
          * @default 4
         */
        "offset": number;
        /**
          * 控制弹出框的打开状态
          * @prop {boolean} [open=false]
          * @mutable 
          * @reflect 
          * @default false
         */
        "open": boolean;
        /**
          * 弹出框打开的动画时间（毫秒）
          * @prop {number} [openTimeout=200]
          * @default 200
         */
        "openTimeout": number;
        /**
          * 弹出框的位置偏好设置，使用逗号分隔的字符串，例如："top,bottom"  当 `tip` 属性为 'tab' 时，默认设置为 'bottom-end,bottom-start,top-end,top-start'
          * @prop {string} [placements]
          * @mutable
         */
        "placements": string;
        /**
          * 显示弹出框的公共方法
          * @method show
          * @async 
          * @param target - 可选的触发元素。如果提供，将使用此元素作为触发元素。
         */
        "show": (target?: HTMLElement) => Promise<void>;
        /**
          * 弹出框的箭头样式
          * @prop {'caret' | 'none' | 'tab'} [tip='caret']  - 'caret': 使用一个三角形的箭头（默认）。 - 'none': 没有箭头。 - 'tab': 使用一个类似标签页的箭头，通常用于下拉菜单。
          * @default 'caret'
          * @reflect
         */
        "tip": 'caret' | 'none' | 'tab';
        /**
          * 触发弹出框的方式
          * @prop {'click' | 'hover' | 'manual'} [trigger='hover']  - 'click': 点击触发元素时打开/关闭弹出框。 - 'hover': 鼠标悬停在触发元素上时打开，移开时关闭。 - 'manual': 手动控制，通过调用组件的 `show()` 和 `hide()` 方法控制。
          * @default 'hover'
         */
        "trigger": 'click' | 'hover' | 'manual';
    }
    /**
     * 弹出框内容容器组件 (zane-popover-content)
     * @component zane-popover-content
     * @shadow true
     * @description 弹出框系统的核心内容承载容器，提供以下核心功能：
     * 1. 结构化内容容器：为弹出内容提供标准化的布局结构
     * 2. 动态箭头指示器：根据父组件配置自动调整箭头样式和位置
     * 3. 无障碍支持：内置ARIA角色属性增强可访问性
     * 4. 主题适配：通过CSS变量支持深度主题定制
     * @dependency 必须作为`<zane-popover>`组件的直接子元素使用
     * @example <!-- 基础用法 -->
     * <zane-popover-content>
     *   <h3>标题</h3>
     *   <p>详细说明内容...</p>
     *   <button>确认</button>
     * </zane-popover-content>
     * <!-- 带样式定制 -->
     * <zane-popover-content style="--background: #2c3e50; --color: white">
     *   ...
     * </zane-popover-content>
     */
    interface ZanePopoverContent {
    }
    /**
     * 动态进度指示器组件 (zane-progress)
     * @component zane-progress
     * @shadow true
     * @description 提供可视化任务进程的进度指示器，支持多种状态显示和尺寸配置。适用于文件上传、数据加载、操作流程等场景。
     * @example <!-- 基础用法 -->
     * <zane-progress value={75}></zane-progress>
     * <!-- 带标签和状态 -->
     * <zane-progress
     *   value={50}
     *   label="上传进度"
     *   status="active"
     *   helperText="剩余时间：2分钟"
     * ></zane-progress>
     * <!-- 错误状态 -->
     * <zane-progress
     *   value={30}
     *   status="error"
     *   helperText="上传失败，请重试"
     * ></zane-progress>
     */
    interface ZaneProgress {
        /**
          * 辅助说明文本
          * @designNote - 显示在进度条下方的补充信息 - 可用于展示剩余时间、错误详情等动态内容 - 建议不超过40字符
          * @example "剩余时间：2分钟" | "上传失败：网络断开"
         */
        "helperText": string;
        /**
          * 是否隐藏标签区域
          * @default false
          * @designNote - 设为 true 时隐藏顶部标签区域（包括标签和状态图标） - 适用于空间受限场景（如移动端小部件） - 与 `label` 属性联动：当 hideLabel=true 时 label 自动失效
         */
        "hideLabel": boolean;
        /**
          * 进度标签文本
          * @designNote - 显示在进度条顶部的标题文本 - 建议使用简洁的动词短语（如："文件上传"、"数据处理"） - 国际化支持：可通过 slot 机制实现多语言
          * @example "安装进度" | "资源加载"
         */
        "label": string;
        /**
          * 组件尺寸模式
          * @default 'md'
          * @designNote 可选值及其应用场景： | **值** | **尺寸** | **适用场景**            | |---------|----------|------------------------| | 'md'    | 中等尺寸 | 标准页面内容区（默认）  | | 'sm'    | 小型尺寸 | 表格内嵌/工具栏紧凑布局 |  尺寸规范： | **尺寸** | 高度 | 字体大小 | 圆角半径 | |-----------|------|----------|----------| | md        | 24px | 14px     | 12px     | | sm        | 16px | 12px     | 8px      |
         */
        "size": 'md' | 'sm';
        /**
          * 进度状态类型
          * @default 'active'
          * @designNote 状态机逻辑： | **状态值** | **视觉表现**                     | **使用场景**               | |-------------|----------------------------------|----------------------------| | 'active'    | 蓝色动态条纹（默认）             | 进行中的任务               | | 'success'   | 绿色+成功图标（✔️）              | 已完成的任务               | | 'error'     | 红色+错误图标（❌）              | 失败/中断的任务            |  状态交互规则： 1. 当 value=100 时自动切换为 'success'（优先级高于手动设置） 2. 'error' 状态必须手动触发（如网络异常）
         */
        "status": 'active' | 'error' | 'success';
        /**
          * 当前进度值
          * @default null
          * @designNote - 范围：0-100（百分比值） - 特殊值 null：显示不定长动画（indeterminate 模式） - 边界处理：   - <0 自动修正为0   - >100 自动修正为100 - 动画效果：进度变化时带300ms缓动过渡
         */
        "value": number;
    }
    /**
     * 基于 Floating UI 的增强型下拉选择组件
     * @component 
     * @tag zane-select
     * @implements ComponentInterface , InputComponentInterface}
     * @example <!-- 基础用法 -->
     * <zane-select
     *   items={[{label: '选项1', value: 1}]}
     *   placeholder="请选择"
     *   size="md"
     * />
     */
    interface ZaneSelect {
        /**
          * 是否显示清除按钮
          * @type {boolean}
          * @default false
         */
        "clearable": boolean;
        /**
          * ARIA属性配置对象
          * @type {Object}
          * @mutable 
          * @example configAria={{ 'aria-labelledby': 'custom-label' }}  支持动态配置以下属性： - aria-label：定义组件的语义标签 - aria-labelledby：关联可见标签元素 - aria-describedby：关联描述元素
          * @default {}
         */
        "configAria": any;
        /**
          * 搜索输入防抖时间（毫秒）
          * @type {number}
          * @default 300
         */
        "debounce": number;
        /**
          * @default false
         */
        "disabled": boolean;
        "getComponentId": () => Promise<string>;
        "helperText": string;
        /**
          * @default false
         */
        "hideDropdownIcon": boolean;
        /**
          * @default false
         */
        "inline": boolean;
        /**
          * @default false
         */
        "invalid": boolean;
        "invalidText": string;
        /**
          * @default []
         */
        "items": {
    icon?: string;
    label: number | string;
    value: number | string;
  }[];
        "label": string;
        /**
          * 视觉层级配置
          * @type {'01' | '02' | 'background'}
          * @example layer="02" // 使用第二层级的阴影和背景  层级说明： - 01：基础层级（默认），适用于常规布局 - 02：更高层级，适合悬浮卡片效果 - background：背景层级，适合非交互元素
         */
        "layer"?: '01' | '02' | 'background';
        /**
          * @default false
         */
        "multiple": boolean;
        /**
          * @default `zane-input-${this.gid}`
         */
        "name": string;
        /**
          * @default false
         */
        "open": boolean;
        "openSelectList": () => Promise<void>;
        "placeholder": string;
        /**
          * 下拉菜单定位策略配置
          * @type {string}
          * @default 'bottom-start,top-start,bottom-end,top-end'
          * @example placements="top,right-start" // 优先尝试顶部对齐，次选右侧对齐  格式说明： - 使用逗号分隔的定位字符串 - 每个定位字符串格式为[方向]-[对齐方式] - 方向选项：top | right | bottom | left - 对齐方式：start | end
         */
        "placements": string;
        /**
          * @default false
         */
        "readonly": boolean;
        /**
          * @default false
         */
        "required": boolean;
        /**
          * 搜索模式配置
          * @type {'contains' | 'initial' | 'managed' | 'none'}
          * @default 'none'
          * @example search="contains" // 实时子字符串匹配  模式说明： - none：禁用搜索功能 - contains：根据输入内容进行子字符串匹配过滤 - initial：仅在打开菜单时执行初始过滤 - managed：由父组件完全控制搜索逻辑
         */
        "search": 'contains' | 'initial' | 'managed' | 'none';
        "setBlur": () => Promise<void>;
        "setFocus": () => Promise<void>;
        /**
          * @default false
         */
        "showLoader": boolean;
        /**
          * 组件尺寸选项
          * @type {'lg' | 'md' | 'sm'}
          * @default 'md'
          * @example size="sm" // 小尺寸样式  具体尺寸对应关系： - sm：高度32px，适合紧凑布局 - md：高度40px，标准尺寸 - lg：高度48px，强调视觉重点
         */
        "size": 'lg' | 'md' | 'sm';
        /**
          * 组件状态标识
          * @type {'default' | 'error' | 'success' | 'warning'}
          * @default 'default'
          * @example state="error" // 显示错误状态样式  状态说明： - default：常规状态 - error：输入验证失败 - success：输入验证通过 - warning：存在潜在问题
         */
        "state": 'default' | 'error' | 'success' | 'warning';
        /**
          * @default ''
         */
        "value"?: number | string;
        /**
          * @default false
         */
        "warn": boolean;
        "warnText": string;
    }
    /**
     * 侧边导航栏组件，提供页面侧边导航功能
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 指定组件样式文件
     * @tag 定义组件在HTML中的标签名
     */
    interface ZaneSidenav {
        /**
          * 是否显示加载指示器
          * @Prop 可从外部设置的属性
          * @default false
         */
        "showLoader": boolean;
    }
    /**
     * 侧边导航菜单组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 指定组件样式文件
     * @tag 定义组件在HTML中的标签名
     */
    interface ZaneSidenavMenu {
        /**
          * 是否显示空状态
          * @type {boolean}
          * @default false
          * @mutable 可变的
         */
        "empty": boolean;
        /**
          * 空状态配置(JSON字符串格式)
          * @type {string}
          * @default '{"headline": "No items", "description": "There are no items to display"}'
          * @mutable 可变的
         */
        "emptyState": any;
        /**
          * 公开方法：设置焦点到第一个菜单项
          * @Method 装饰器定义公共API方法
          * @returns
         */
        "setFocus": () => Promise<void>;
        /**
          * 是否显示加载指示器
          * @type {boolean}
          * @default false
         */
        "showLoader": boolean;
        /**
          * 组件值，可以是数字或字符串
          * @type {number|string}
          * @mutable 可变的
         */
        "value"?: number | string;
    }
    /**
     * 侧边导航菜单项组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 指定组件样式文件
     * @tag 定义组件在HTML中的标签名
     */
    interface ZaneSidenavMenuItem {
        /**
          * 是否禁用菜单项
          * @type {boolean}
          * @default false
          * @reflect 属性值会反射到DOM属性
         */
        "disabled": boolean;
        /**
          * 选中状态
          * @type {boolean}
          * @default false
          * @reflect 属性值会反射到DOM属性
         */
        "selected": boolean;
        /**
          * 移除焦点
          * @Method 装饰器定义公共API方法
          * @returns
         */
        "setBlur": () => Promise<void>;
        /**
          * 设置焦点
          * @Method 装饰器定义公共API方法
          * @returns
         */
        "setFocus": () => Promise<void>;
        /**
          * 菜单项值，支持null/数字/字符串类型
          * @type {null|number|string}
          * @mutable 可变的
         */
        "value"?: null | number | string;
    }
    /**
     * 滑动选择器组件
     * 提供可拖动的滑块选择器，支持鼠标/触摸交互、键盘操作和数值输入框集成。
     * @component zane-slider
     * @tags zane-slider
     * @shadow true
     * @example <!-- 基础用法 -->
     * <zane-slider min="0" max="100" value="50"></zane-slider>
     * <!-- 禁用状态 -->
     * <zane-slider disabled value="30"></zane-slider>
     * <!-- 隐藏数值输入框 -->
     * <zane-slider show-only-slider value="75"></zane-slider>
     */
    interface ZaneSlider {
        /**
          * ARIA 属性配置对象
          * @prop {Object} configAria - 收集所有以 `aria-` 开头的自定义属性
          * @mutable 
          * @reflect 
          * @default {}
         */
        "configAria": any;
        /**
          * 值变更事件的防抖时间（毫秒）
          * @prop {number} debounce - 用于优化频繁触发的事件
          * @default 300
         */
        "debounce": number;
        /**
          * 禁用状态开关
          * @prop {boolean} disabled
          * @reflect 
          * @default false
         */
        "disabled": boolean;
        /**
          * 数值格式化函数
          * @prop {(value: number | string) => string} formatter - 用于自定义显示值的格式
          * @example (val) => `${val}%`
         */
        "formatter": (value: number | string) => string;
        /**
          * 获取组件唯一ID
          * @method 
          * @returns 组件唯一标识符
         */
        "getComponentId": () => Promise<string>;
        /**
          * 滑块最大值
          * @prop {number} max
          * @default 100
         */
        "max": number;
        /**
          * 滑块最小值
          * @prop {number} min
          * @default 0
         */
        "min": number;
        /**
          * 表单字段名称
          * @prop {string} name - 自动生成唯一名称
          * @default `zane-input-${gid}`
         */
        "name": string;
        /**
          * 只读状态开关
          * @prop {boolean} readonly
          * @reflect 
          * @default false
         */
        "readonly": boolean;
        /**
          * 必填状态
          * @prop {boolean} required
          * @reflect 
          * @default false
         */
        "required": boolean;
        /**
          * 移除组件焦点
          * @method
         */
        "setBlur": () => Promise<void>;
        /**
          * 设置组件焦点
          * @method
         */
        "setFocus": () => Promise<void>;
        /**
          * 是否仅显示滑块（隐藏数值输入框）
          * @prop {boolean} showOnlySlider
          * @default false
         */
        "showOnlySlider": boolean;
        /**
          * 步进值
          * @prop {number} step - 每次增减的数值单位
          * @mutable 
          * @default 1
         */
        "step": number;
        /**
          * 当前滑块值
          * @prop {number} value - 受控属性
          * @mutable 
          * @default 0
         */
        "value"?: number;
    }
    /**
     * 加载指示器组件 (zane-spinner)
     * @component 
     * @shadow true
     * @description 用于表示加载状态的动画指示器，支持自定义尺寸和样式。
     * @example <!-- 基本用法 -->
     * <zane-spinner></zane-spinner>
     * <!-- 自定义描述文本 -->
     * <zane-spinner description="数据加载中"></zane-spinner>
     * <!-- 隐藏背景圆环 -->
     * <zane-spinner hide-background></zane-spinner>
     */
    interface ZaneSpinner {
        /**
          * 辅助文本描述
          * @prop 
          * @attribute description
          * @default 'Loading...'
          * @description 为屏幕阅读器提供加载状态描述，同时作为 SVG 的 title 属性提升可访问性。
         */
        "description": string;
        /**
          * 是否隐藏背景圆环
          * @prop 
          * @attribute hide-background
          * @default false
          * @description 当设置为 true 时，隐藏加载动画后的半透明背景圆环。
         */
        "hideBackground": boolean;
        /**
          * 加载指示器尺寸
          * @prop 
          * @attribute size
          * @reflect true
          * @default 'md'
          * @description 控制加载指示器尺寸，支持预设枚举或自定义 CSS 单位： - `'lg'`: 大尺寸 (5.5rem) - `'md'`: 中等尺寸 (1rem) - `'sm'`: 小尺寸 (0.75rem) - `string`: 自定义尺寸（支持 '2rem'/'32px' 格式）
         */
        "size": 'lg' | 'md' | 'sm' | string;
    }
    /**
     * SVG 动态加载组件 (zane-svg)
     * @component 
     * @shadow true
     * @description 智能 SVG 图标容器，支持动态加载、尺寸控制与样式继承
     * @example <!-- 基础用法 -->
     * <zane-svg src="/assets/icon.svg"></zane-svg>
     * <!-- 带尺寸控制 -->
     * <zane-svg src="/assets/logo.svg"  size="xl"></zane-svg>
     * <!-- 自定义尺寸 -->
     * <zane-svg src="/assets/chart.svg"  size="32px"></zane-svg>
     */
    interface ZaneSvg {
        /**
          * 图标尺寸配置
          * @prop 
          * @attribute size
          * @reflect true
          * @default undefined
          * @description 控制 SVG 图标显示尺寸，支持以下类型： - 预设枚举：'xs' | 'sm' | 'md' | 'lg' | 'xl' - CSS 单位值：'24px' | '2rem' | '100%' - 未设置时继承父级字体大小
          * @presetDetails | 值   | 换算公式    | 典型场景          | |------|------------|-------------------| | xs   | 0.5rem (8px) | 表格行内小图标     | | sm   | 0.75rem (12px)| 按钮辅助图标      | | md   | 1rem (16px)  | 默认标准尺寸       | | lg   | 1.5rem (24px)| 卡片头部图标       | | xl   | 1.75rem (28px)| 展示型大图标      |
         */
        "size": string;
        /**
          * SVG 资源路径
          * @prop 
          * @attribute src
          * @default ''
          * @description 需要加载的 SVG 文件路径或 URL，支持： - 相对路径（基于项目根目录） - 绝对 URL（需配置 CORS） - 内联 DataURL（base64 编码）
          * @securityNote 当使用外部 URL 时，组件会自动添加 `rel="noopener noreferrer"` 防止钓鱼攻击，建议优先使用本地托管 SVG
         */
        "src": string;
    }
    /**
     * 单个标签页元素，支持多种交互状态和类型
     */
    interface ZaneTab {
        /**
          * 是否禁用标签
          * @type {boolean}
          * @prop disabled
          * @default false
          * @reflect
         */
        "disabled": boolean;
        /**
          * 禁用状态提示信息（支持无障碍访问）
          * @type {string}
          * @prop disabledReason
          * @default ''
         */
        "disabledReason": string;
        /**
          * 链接地址（存在时渲染为<a>标签）
          * @type {string}
          * @prop href
         */
        "href": string;
        /**
          * 图标名称（内置图标库）
          * @type {string}
          * @prop icon
         */
        "icon": string;
        /**
          * 标签文本（备用显示内容）
          * @type {string}
          * @prop label
         */
        "label": string;
        /**
          * 选中状态（与父级Tabs组件联动）
          * @type {boolean}
          * @prop selected
          * @default false
          * @reflect
         */
        "selected": boolean;
        /**
          * 设置焦点（公共方法）
          * @method setFocus
         */
        "setFocus": () => Promise<void>;
        /**
          * 显示加载指示器
          * @type {boolean}
          * @prop showLoader
          * @default false
         */
        "showLoader": boolean;
        /**
          * 关联面板标识
          * @type {string}
          * @prop target
         */
        "target": string;
        /**
          * 触发点击（公共方法）
          * @method triggerClick
         */
        "triggerClick": () => Promise<void>;
        /**
          * 标签类型（需与父级Tabs组件同步）
          * @type {'contained' | 'contained-bottom' | 'default'}
          * @prop type
          * @default 'default'
          * @reflect
         */
        "type": 'contained' | 'contained-bottom' | 'default';
        /**
          * 标签值（用于表单场景）
          * @type {string}
          * @prop value
         */
        "value": string;
    }
    /**
     * 标签页内容面板容器
     * 该组件与 zane-tab 标签页组件配合使用，形成完整的标签页系统。当标签页被激活时，
     * 关联的面板内容将显示在界面中，支持层级深度控制以实现复杂的视觉层次效果。
     * @example <zane-tab-panel value="profile" active>
     *   用户资料详情内容
     * </zane-tab-panel>
     */
    interface ZaneTabPanel {
        /**
          * 面板激活状态（与关联标签页同步）  当设置为 true 时，面板将显示在界面中。该属性通常由父级 zane-tabs 组件自动管理， 开发者也支持手动控制以实现特殊交互场景。
          * @type {boolean}
          * @prop active
          * @default false
          * @reflect
         */
        "active": boolean;
        /**
          * 视觉层级深度控制  提供三层深度选项，用于构建层次化界面效果： - '01': 顶层面板（默认最高层级） - '02': 中间层级面板 - 'background': 背景层级面板（最低层级）
          * @type {'01' | '02' | 'background'}
          * @prop layer
          * @reflect
         */
        "layer"?: '01' | '02' | 'background';
        /**
          * 面板唯一标识值  必须与对应 zane-tab 组件的 target 属性匹配，建立标签页与内容面板的关联关系。 该值应确保在同一个 zane-tabs 容器中保持唯一。
          * @type {string}
          * @prop value
          * @reflect
         */
        "value": string;
    }
    interface ZaneTable {
        /**
          * 表格列配置数组
          * @prop {Array<Object>} columns
          * @example [   {     name: "name",         // 数据字段名     label: "Name",        // 列标题显示文本     width: 300,           // 列宽度（像素或rem）     fixed: true,          // 是否固定列（左侧固定）     template: (row, column) => `<b>${row[column.name]}</b>` // 自定义渲染模板   },   {     name: "age",     label: "Age"   } ]
          * @default []
         */
        "columns": any[];
        /**
          * 表格数据源
          * @prop {Array<Object>} data
          * @example [{   id: '5e7118ddce4b3d577956457f',   age: 21,   name: 'John' }]
          * @default []
         */
        "data": any[];
        /**
          * 空状态描述文本
          * @prop {string} emptyStateDescription
          * @default 'There are no items to display'
         */
        "emptyStateDescription": string;
        /**
          * 空状态标题文本
          * @prop {string} emptyStateHeadline
          * @default 'No items'
         */
        "emptyStateHeadline": string;
        /**
          * 行数据唯一标识字段名
          * @prop {string} keyField
          * @default 'id'
         */
        "keyField": string;
        /**
          * 组件视觉层级（影响阴影和z-index）
          * @prop {'01' | '02' | 'background'} [layer] - '01': 基础层级（默认） - '02': 中层（用于悬浮元素） - 'background': 底层（无阴影）
         */
        "layer"?: '01' | '02' | 'background';
        /**
          * 是否为托管模式（外部控制分页/排序）
          * @prop {boolean} managed
          * @default false
          * @desc true: 外部控制数据（需监听事件处理分页/排序） false: 组件内部处理分页/排序
         */
        "managed": boolean;
        /**
          * 当前页码
          * @prop {number} page
          * @default 1
         */
        "page": number;
        /**
          * 每页显示条数
          * @prop {number} pageSize
          * @default 10
         */
        "pageSize": number;
        /**
          * 是否启用分页
          * @prop {boolean} paginate
          * @default true
         */
        "paginate": boolean;
        /**
          * 已选中的行key数组
          * @prop {string[]} selectedRowKeys
          * @default []
         */
        "selectedRowKeys": string[];
        /**
          * 行选择类型
          * @prop {'checkbox' | undefined} [selectionType] - 'checkbox': 显示多选框列 - undefined: 无选择功能
         */
        "selectionType": 'checkbox' | undefined;
        /**
          * 当前排序字段
          * @prop {string} [sortBy]
         */
        "sortBy": string;
        /**
          * 排序方向
          * @prop {'asc' | 'desc'} [sortOrder] - 'asc': 升序（A-Z/0-9） - 'desc': 降序（Z-A/9-0）
          * @default 'asc'
         */
        "sortOrder": 'asc' | 'desc';
        /**
          * 是否启用排序
          * @prop {boolean} sortable
          * @default true
         */
        "sortable": boolean;
        /**
          * 数据总条数（托管模式下必传）
          * @prop {number} [totalItems]
         */
        "totalItems": any;
    }
    /**
     * 标签页容器组件，用于管理和切换多个标签页
     */
    interface ZaneTabs {
        /**
          * 组件层级设置，影响样式和视觉层次
          * @type {'01' | '02' | 'background'}
          * @prop layer
          * @memberof Tabs  - `'01'`: 第一层级（最高层级，用于凸出显示） - `'02'`: 第二层级（中等层级，常规内容） - `'background'`: 背景层级（最低层级，用于背景元素）
         */
        "layer"?: '01' | '02' | 'background';
        /**
          * 标签页类型，决定标签页的视觉样式
          * @type {'contained' | 'contained-bottom' | 'default'}
          * @prop type
          * @default 'default'
          * @memberof Tabs  - `'contained'`: 包含式标签（标签与内容区域视觉统一） - `'contained-bottom'`: 底部包含式标签（标签位于内容底部） - `'default'`: 默认样式（标准分隔式标签）
         */
        "type": 'contained' | 'contained-bottom' | 'default';
    }
    interface ZaneTabsList {
        /**
          * 是否由外部管理状态（如父组件 zane-tabs 管理） 如果为 true，则点击标签页时不会自动修改选中状态，而是由外部通过事件来控制。 默认情况下，组件自身管理状态。
          * @default false
         */
        "managed": boolean;
        /**
          * 标签栏的样式类型 - default: 默认样式 - contained: 包含式（通常有背景和边框） - contained-bottom: 包含式，标签位于底部
          * @default 'default'
         */
        "type": 'contained' | 'contained-bottom' | 'default';
    }
    /**
     * 多功能标签/徽章组件
     * 提供灵活的内容展示能力，支持多种颜色主题、尺寸规格、可关闭操作和选中状态。
     * 适用于分类标记、状态指示、可选项选择等场景，可与表单组件或列表组件配合使用。
     * @example <!-- 基础用法 -->
     * <zane-tag>默认标签</zane-tag>
     * <!-- 带关闭按钮 -->
     * <zane-tag dismissible>可关闭标签</zane-tag>
     * <!-- 带图片 -->
     * <zane-tag image-src="/path/to/avatar.jpg"> 用户标签</zane-tag>
     */
    interface ZaneTag {
        /**
          * 标签颜色主题  提供10种预设颜色方案，满足不同场景的视觉需求： - `blue`: 蓝色主题（中性信息） - `error`: 错误红色（操作失败/危险状态） - `gray`: 灰色主题（默认中性色） - `green`: 绿色主题（成功/完成状态） - `info`: 信息蓝（通知/提示信息） - `primary`: 品牌主色（重要内容） - `red`: 警示红色（紧急通知） - `success`: 成功绿色（操作成功） - `warning`: 警告黄色（注意/提醒） - `yellow`: 强调黄色（高亮显示）
          * @type {'blue' | 'error' | 'gray' | 'green' | 'info' | 'primary' | 'red' | 'success' | 'warning' | 'yellow'}
          * @prop color
          * @default 'gray'
          * @reflect
         */
        "color": | 'blue'
    | 'error'
    | 'gray'
    | 'green'
    | 'info'
    | 'primary'
    | 'red'
    | 'success'
    | 'warning'
    | 'yellow';
        /**
          * 是否显示关闭按钮  设置为 true 时，标签右侧显示关闭图标，点击触发 `zane-tag--dismiss` 事件
          * @type {boolean}
          * @prop dismissible
          * @default false
         */
        "dismissible": boolean;
        /**
          * 标签图片地址  设置后，在标签左侧显示指定图片（如用户头像）
          * @type {string}
          * @prop imageSrc
         */
        "imageSrc"?: string;
        /**
          * 选中状态  表示标签是否被选中，常用于多选场景
          * @type {boolean}
          * @prop selected
          * @default false
          * @reflect
         */
        "selected": boolean;
        /**
          * 标签尺寸  控制标签的整体尺寸规格： - `md`: 中等尺寸（默认） - `sm`: 小型尺寸（紧凑布局）
          * @type {'md' | 'sm'}
          * @prop size
          * @default 'md'
          * @reflect
         */
        "size": 'md' | 'sm';
        /**
          * 标签值  标签关联的业务数据值，在事件触发时作为参数传递
          * @type {string}
          * @prop value
          * @default ''
          * @reflect
         */
        "value": string;
    }
    /**
     * 多功能文本展示组件
     * 提供丰富的文本样式和语义化支持，满足不同场景的文本展示需求。支持多种文本类型、
     * 颜色主题、标题级别和响应式文本大小，集成了完善的 ARIA 可访问性支持。
     * @example <!-- 基础文本 -->
     * <zane-text>普通段落文本</zane-text>
     * <!-- 标题文本 -->
     * <zane-text type="heading" heading-level="2">二级标题</zane-text>
     * <!-- 带颜色的辅助文本 -->
     * <zane-text type="helper-text" color="helper">表单提示文本</zane-text>
     */
    interface ZaneText {
        /**
          * 文本颜色主题  提供7种预设颜色方案，满足不同场景的视觉需求： - `primary`: 主要文本颜色（默认） - `secondary`: 次要文本颜色（较浅） - `tertiary`: 三级文本颜色（最浅） - `error`: 错误状态文本（红色系） - `helper`: 辅助说明文本（灰色系） - `inverse`: 反色文本（深色背景使用） - `on-color`: 彩色背景上的文本
          * @prop color
          * @type {'primary' | 'secondary' | 'tertiary' | 'error' | 'helper' | 'inverse' | 'on-color'}
          * @default 'primary'
          * @reflect
         */
        "color": | 'error'
    | 'helper'
    | 'inverse'
    | 'on-color'
    | 'primary'
    | 'secondary'
    | 'tertiary';
        /**
          * ARIA 属性配置  用于存储动态收集的 ARIA 属性，提高组件的可访问性。 组件会自动收集元素上的所有 aria-* 属性并转移到内部元素。
          * @prop configAria
          * @type {any}
          * @mutable 
          * @reflect 
          * @default {}
         */
        "configAria": any;
        /**
          * 情感化文本模式  启用特殊的情感化排版样式，通常用于突出重要内容： - 更大的字号间距 - 更丰富的字体变化 - 增强的视觉层次
          * @prop expressive
          * @type {boolean}
          * @default false
          * @reflect
         */
        "expressive": boolean;
        /**
          * 标题语义级别  定义标题的 HTML 语义级别（h1-h6），影响： 1. 文档大纲结构 2. 屏幕阅读器识别 3. SEO 权重  当未指定时，组件会根据标题尺寸自动推导
          * @prop headingLevel
          * @type {1 | 2 | 3 | 4 | 5 | 6}
          * @reflect
         */
        "headingLevel": 1 | 2 | 3 | 4 | 5 | 6;
        /**
          * 标题视觉尺寸  控制标题的视觉大小（1-7级），与实际语义级别分离： - 1: 最大标题尺寸 - 7: 最小标题尺寸  当未指定时，默认值为： - 普通标题: 7 - 流式标题: 6
          * @prop headingSize
          * @type {1 | 2 | 3 | 4 | 5 | 6 | 7}
          * @reflect
         */
        "headingSize": 1 | 2 | 3 | 4 | 5 | 6 | 7;
        /**
          * 行内模式  设置为 true 时，文本将以行内元素（span）渲染， 否则以块级元素（p）渲染
          * @prop inline
          * @type {boolean}
          * @default false
          * @reflect
         */
        "inline": boolean;
        /**
          * 文本类型  定义文本的语义类型和基本样式： - `body`: 标准正文文本（默认） - `body-compact`: 紧凑正文（较小行高） - `code`: 代码样式（等宽字体） - `fluid-heading`: 流式响应式标题 - `heading`: 标准标题 - `heading-compact`: 紧凑标题 - `helper-text`: 辅助说明文本 - `label`: 表单标签文本 - `legal`: 法律条款小字
          * @prop type
          * @type {'body' | 'body-compact' | 'code' | 'fluid-heading' | 'heading' | 'heading-compact' | 'helper-text' | 'label' | 'legal'}
          * @default 'body'
          * @reflect
         */
        "type": | 'body'
    | 'body-compact'
    | 'code'
    | 'fluid-heading'
    | 'heading'
    | 'heading-compact'
    | 'helper-text'
    | 'label'
    | 'legal';
    }
    /**
     * 多功能文本区域输入组件
     * 提供完整的表单文本区域解决方案，支持响应式布局、表单验证、辅助文本提示和丰富的交互功能。
     * 集成了 ARIA 可访问性支持和多状态反馈设计，适用于复杂表单场景。
     * @example <!-- 基础用法 -->
     * <zane-textarea label="用户反馈" placeholder="请输入您的建议"></zane-textarea>
     * <!-- 带验证状态 -->
     * <zane-textarea
     *   label="密码"
     *   state="error"
     *   invalid-text="密码长度不足8位"
     * ></zane-textarea>
     */
    interface ZaneTextarea {
        /**
          * 是否显示清除按钮  设置为 true 时，在输入框有内容时会显示清除按钮
          * @prop clearable
          * @type {boolean}
          * @default false
         */
        "clearable": boolean;
        /**
          * ARIA 属性配置  存储动态收集的 ARIA 属性，用于增强组件可访问性。 组件加载时会自动收集宿主元素上的 aria-* 属性。
          * @prop configAria
          * @type {any}
          * @mutable 
          * @reflect 
          * @default {}
         */
        "configAria": any;
        /**
          * 输入事件防抖时间（毫秒）  减少频繁输入事件的处理频率，优化性能
          * @prop debounce
          * @type {number}
          * @default 300
         */
        "debounce": number;
        /**
          * 禁用状态  设置为 true 时，组件不可交互且样式变灰
          * @prop disabled
          * @type {boolean}
          * @default false
          * @reflect
         */
        "disabled": boolean;
        /**
          * 获取组件ID  公开方法，获取组件全局唯一ID
          * @method getComponentId
          * @returns
         */
        "getComponentId": () => Promise<string>;
        /**
          * 辅助提示文本  显示在输入区域下方的帮助信息
          * @prop helperText
          * @type {string}
         */
        "helperText": string;
        /**
          * 行内布局模式  设置为 true 时，标签和输入框水平排列
          * @prop inline
          * @type {boolean}
          * @default false
          * @reflect
         */
        "inline": boolean;
        /**
          * 错误验证状态  设置为 true 时显示错误样式和错误文本
          * @prop invalid
          * @type {boolean}
          * @default false
         */
        "invalid": boolean;
        /**
          * 错误提示文本  当 invalid 为 true 时显示的错误信息
          * @prop invalidText
          * @type {string}
         */
        "invalidText": string;
        /**
          * 输入框标签文本  显示在输入区域上方的描述标签
          * @prop label
          * @type {string}
         */
        "label": string;
        /**
          * 表单字段名称  用于表单提交的字段名，默认自动生成唯一值
          * @prop name
          * @type {string}
          * @default `zane-input-${gid}`
         */
        "name": string;
        /**
          * 占位符文本  输入框为空时显示的提示文本
          * @prop placeholder
          * @type {string}
         */
        "placeholder": string;
        /**
          * 只读状态  设置为 true 时，内容不可编辑但可复制
          * @prop readonly
          * @type {boolean}
          * @default false
          * @reflect
         */
        "readonly": boolean;
        /**
          * 必填状态  设置为 true 时，标签旁显示红色星号标记
          * @prop required
          * @type {boolean}
          * @default false
         */
        "required": boolean;
        /**
          * 移除焦点  公开方法，使文本域失去焦点
          * @method setBlur
          * @returns
         */
        "setBlur": () => Promise<void>;
        /**
          * 设置焦点  公开方法，使文本域获得焦点
          * @method setFocus
          * @returns
         */
        "setFocus": () => Promise<void>;
        /**
          * 尺寸规格  控制输入框的整体尺寸： - `lg`: 大尺寸（48px） - `md`: 中尺寸（40px，默认） - `sm`: 小尺寸（32px）
          * @prop size
          * @type {'lg' | 'md' | 'sm'}
          * @default 'md'
          * @reflect
         */
        "size": 'lg' | 'md' | 'sm';
        /**
          * 骨架屏状态  设置为 true 时显示加载占位样式
          * @prop skeleton
          * @type {boolean}
          * @default false
         */
        "skeleton": boolean;
        /**
          * 输入状态标识  控制输入框的视觉状态反馈： - `default`: 默认状态（无特殊样式） - `error`: 错误状态（红色边框） - `success`: 成功状态（绿色边框） - `warning`: 警告状态（黄色边框）
          * @prop state
          * @type {'default' | 'error' | 'success' | 'warning'}
          * @default 'default'
          * @reflect
         */
        "state": 'default' | 'error' | 'success' | 'warning';
        /**
          * 输入值  文本域的当前值，支持双向绑定
          * @prop value
          * @type {string}
          * @mutable
         */
        "value": string;
        /**
          * 警告状态  设置为 true 时显示警告样式和警告文本
          * @prop warn
          * @type {boolean}
          * @default false
         */
        "warn": boolean;
        /**
          * 警告提示文本  当 warn 为 true 时显示的警告信息
          * @prop warnText
          * @type {string}
         */
        "warnText": string;
    }
    /**
     * 时间选择器组件
     */
    interface ZaneTimePicker {
        /**
          * 动态收集的ARIA属性配置对象
          * @remarks 在组件加载时会自动收集宿主元素上所有以"aria-"开头的属性， 存储到该对象后从宿主元素移除，避免重复渲染问题
          * @default {}
         */
        "configAria": any;
        /**
          * 禁用状态标志（会反映到DOM属性）
          * @default false
         */
        "disabled": boolean;
        /**
          * 获取组件实例的唯一标识符
          * @method 
          * @async 
          * @returns 组件实例ID
         */
        "getComponentId": () => Promise<string>;
        /**
          * @default false
         */
        "inline": boolean;
        /**
          * 自动生成的表单字段名称
          * @example 当gid为"123"时，name值为"zane-input-123"
          * @default `zane-input-${this.gid}`
         */
        "name": string;
        "placeholder": string;
        /**
          * @default false
         */
        "readonly": boolean;
        /**
          * 主动使时间选择器失去焦点
          * @method 
          * @async
         */
        "setBlur": () => Promise<void>;
        /**
          * 主动使时间选择器获得焦点
          * @method 
          * @async
         */
        "setFocus": () => Promise<void>;
        /**
          * @default 'md'
         */
        "size": 'lg' | 'md' | 'sm';
        /**
          * 时间值绑定
          * @remarks 支持三种格式： - null: 未选择状态 - number: Unix时间戳（毫秒级） - string: ISO格式时间字符串
          * @default ''
         */
        "value"?: null | number | string;
    }
    /**
     * 开关组件
     * 该组件实现了可定制的开关切换控件，支持多种交互状态和样式配置，
     * 符合WAI-ARIA无障碍规范，可无缝集成到表单中使用。
     */
    interface ZaneToggle {
        /**
          * ARIA属性配置对象
          * @prop {Object} configAria - 动态收集的ARIA属性键值对
          * @mutable 允许组件内部修改
          * @reflect 属性值变化时同步到DOM属性
          * @default {}
         */
        "configAria": any;
        /**
          * 禁用状态
          * @prop {boolean} disabled - 是否禁用开关交互
          * @default false
          * @reflect 同步到DOM属性
         */
        "disabled": boolean;
        /**
          * 获取组件唯一ID
          * @method getComponentId
          * @returns 组件ID
         */
        "getComponentId": () => Promise<string>;
        /**
          * 开关标签文本
          * @prop {string} label - 显示在开关旁的文本内容
         */
        "label": string;
        /**
          * 表单字段名称
          * @prop {string} name - 关联input元素的name属性
          * @default `zane-input-${this.gid}`
         */
        "name": string;
        /**
          * 只读状态
          * @prop {boolean} readonly - 是否只读（可聚焦但不可修改）
          * @default false
          * @reflect 同步到DOM属性
         */
        "readonly": boolean;
        /**
          * 必填状态
          * @prop {boolean} required - 是否必填项
          * @default false
          * @reflect 同步到DOM属性
         */
        "required": boolean;
        /**
          * 圆角样式
          * @prop {boolean} rounded - 是否显示为圆形开关
          * @default true
         */
        "rounded": boolean;
        /**
          * 移除焦点
          * @method setBlur
         */
        "setBlur": () => Promise<void>;
        /**
          * 设置焦点
          * @method setFocus
         */
        "setFocus": () => Promise<void>;
        /**
          * 开关尺寸
          * @prop {'lg' | 'md'} size - 控制开关尺寸的枚举值 - 'lg': 大尺寸 (large) - 'md': 中尺寸 (medium)
          * @default 'md'
         */
        "size": 'lg' | 'md';
        /**
          * 开关值
          * @prop {boolean} value - 开关当前状态（开/关）
          * @mutable 允许双向绑定
          * @default false
         */
        "value": boolean;
    }
    /**
     * 工具提示组件 (zane-tooltip)
     * 该组件实现了一个灵活的工具提示系统，可通过悬停或手动触发显示上下文信息。
     * 支持四种定位方向，可动态绑定目标元素，并适配无障碍规范。
     */
    interface ZaneTooltip {
        /**
          * 工具提示内容
          * @prop {string} content - 显示在提示框内的文本内容
          * @mutable 允许动态更新内容
          * @default ''
         */
        "content": string;
        /**
          * 提示框定位方向
          * @prop {string} placements - 逗号分隔的可用定位方向列表
          * @description   支持的定位值：   - 'top'     : 上方定位   - 'bottom'  : 下方定位   - 'right'   : 右侧定位   - 'left'    : 左侧定位
          * @default 'top,bottom,right,left' (支持所有方向)
         */
        "placements": string;
        /**
          * 触发方式
          * @prop {'hover' | 'manual'} trigger - 控制提示显示触发的模式 - 'hover' : 鼠标悬停在目标元素时自动触发（默认） - 'manual': 需要通过编程方式触发（如调用show()方法）
          * @default 'hover'
          * @reflect 同步到DOM属性
         */
        "trigger": 'hover' | 'manual';
    }
    /**
     * 树形结构可视化组件
     * @example <!-- 基础用法 -->
     * <zane-tree>
     *   <zane-tree-node value="node1">一级节点</zane-tree-node>
     *   <zane-tree-node value="node2">二级节点</zane-tree-node>
     * </zane-tree>
     */
    interface ZaneTree {
        /**
          * 空状态显示开关
          * @prop {boolean} [empty=false] - 是否展示空状态界面
          * @mutable 
          * @example <zane-tree empty></zane-tree>
          * @default false
         */
        "empty": boolean;
        /**
          * 空状态配置（JSON 字符串或对象）
          * @prop {string|Object} [emptyState] - 空状态配置参数，支持两种格式： 1. JSON 字符串格式（推荐） 2. 直接传入配置对象
          * @default { "headline": "No items", "description": "There are no items to display" }
          * @mutable 
          * @example <!-- JSON字符串形式 --> <zane-tree empty-state='{"headline":"空数据","description":"请添加节点"}'>  <!-- 对象形式（需通过JS绑定） --> <zane-tree empty-state={myConfig}>
         */
        "emptyState": string;
        /**
          * 获取当前选中节点
          * @method 
          * @returns 当前选中节点的value值
          * @example const tree = document.querySelector('zane-tree'); const selected = await tree.getSelectedNode();
         */
        "getSelectedNode": () => Promise<string>;
        /**
          * 当前选中节点标识
          * @prop {string} selectedNode - 当前选中节点的唯一标识符（对应zane-tree-node的value）
          * @mutable
         */
        "selectedNode": string;
        /**
          * 设置初始焦点
          * @method 
          * @description 将焦点设置到树的第一个节点（无障碍支持）
          * @example const tree = document.querySelector('zane-tree'); await tree.setFocus();
         */
        "setFocus": () => Promise<void>;
        /**
          * 订阅节点选择事件
          * @method 
          * @param cb - 选择事件回调函数
          * @description 注册回调函数，当节点被选择时触发。 回调函数接收当前选中节点的value值。  注意：需手动管理订阅关系，组件销毁前建议取消订阅
          * @example tree.subscribeToSelect((value)  => {   console.log('Selected  node:', value); });
         */
        "subscribeToSelect": (cb: any) => Promise<void>;
    }
    /**
     * 树形结构节点组件
     */
    interface ZaneTreeNode {
        /**
          * 禁用节点交互
          * @prop {boolean} [disabled=false]
          * @reflect 属性值会同步到 DOM 属性
          * @default false
         */
        "disabled": boolean;
        /**
          * 控制子节点展开状态
          * @prop {boolean} [expanded=true]
          * @mutable 允许组件内部修改
          * @reflect 属性值会同步到 DOM 属性
          * @default true
         */
        "expanded": boolean;
        /**
          * 链接地址（存在时节点渲染为<a>标签）
          * @prop {string} href
          * @reflect 属性值会同步到 DOM 属性
         */
        "href": string;
        /**
          * 节点图标名称（需配合图标库使用）
          * @prop {string} icon
         */
        "icon": string;
        /**
          * 节点显示文本
          * @prop {string} [label='']
          * @mutable 允许组件内部修改
          * @default ''
         */
        "label": string;
        /**
          * 节点层级（从父节点自动计算）
          * @prop {number} [level=0]
          * @reflect 属性值会同步到 DOM 属性
          * @default 0
         */
        "level": number;
        /**
          * 当前选中节点标识符
          * @prop {string} selectedNode
          * @mutable 允许组件内部修改
          * @reflect 属性值会同步到 DOM 属性
         */
        "selectedNode": string;
        /**
          * 移除元素焦点
          * @method 
          * @async
         */
        "setBlur": () => Promise<void>;
        /**
          * 设置元素焦点
          * @method 
          * @async
         */
        "setFocus": () => Promise<void>;
        /**
          * 链接打开方式（仅在设置 href 时生效）
          * @prop {('_self'|'_blank'|'_parent'|'_top')} [target='_self']
          * @defaultValue '_self'
         */
        "target": string;
        /**
          * 节点唯一标识符（优先级高于 label）
          * @prop {(null|number|string)} [value]
          * @mutable 允许组件内部修改
         */
        "value"?: null | number | string;
    }
}
export interface ZaneAccordionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneAccordionItemElement;
}
export interface ZaneButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneButtonElement;
}
export interface ZaneCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneCheckboxElement;
}
export interface ZaneCodeEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneCodeEditorElement;
}
export interface ZaneDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneDatePickerElement;
}
export interface ZaneDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneDropdownElement;
}
export interface ZaneHtmlEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneHtmlEditorElement;
}
export interface ZaneInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneInputElement;
}
export interface ZaneInputUrlCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneInputUrlElement;
}
export interface ZaneMenuItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneMenuItemElement;
}
export interface ZaneModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneModalElement;
}
export interface ZaneNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneNotificationElement;
}
export interface ZaneNumberCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneNumberElement;
}
export interface ZanePopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZanePopoverElement;
}
export interface ZaneSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneSelectElement;
}
export interface ZaneSidenavMenuItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneSidenavMenuItemElement;
}
export interface ZaneSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneSliderElement;
}
export interface ZaneTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneTabElement;
}
export interface ZaneTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneTableElement;
}
export interface ZaneTagCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneTagElement;
}
export interface ZaneTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneTextareaElement;
}
export interface ZaneTimePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneTimePickerElement;
}
export interface ZaneToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneToggleElement;
}
export interface ZaneTreeNodeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneTreeNodeElement;
}
declare global {
    /**
     * 可折叠面板(Accordion)容器组件
     * 提供可折叠内容区域的容器组件，管理多个折叠项的状态和交互。
     * 支持单开/多开模式、多种尺寸和图标位置配置。
     */
    interface HTMLZaneAccordionElement extends Components.ZaneAccordion, HTMLStencilElement {
    }
    var HTMLZaneAccordionElement: {
        prototype: HTMLZaneAccordionElement;
        new (): HTMLZaneAccordionElement;
    };
    interface HTMLZaneAccordionItemElementEventMap {
        "zane-accordion-item--click": any;
    }
    /**
     * 可折叠面板项(Accordion Item)组件
     * 作为zane-accordion的子组件使用，实现单个可折叠面板项的功能
     * @component 
     * @shadowDom 使用Shadow DOM封装组件样式
     */
    interface HTMLZaneAccordionItemElement extends Components.ZaneAccordionItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneAccordionItemElementEventMap>(type: K, listener: (this: HTMLZaneAccordionItemElement, ev: ZaneAccordionItemCustomEvent<HTMLZaneAccordionItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneAccordionItemElementEventMap>(type: K, listener: (this: HTMLZaneAccordionItemElement, ev: ZaneAccordionItemCustomEvent<HTMLZaneAccordionItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneAccordionItemElement: {
        prototype: HTMLZaneAccordionItemElement;
        new (): HTMLZaneAccordionItemElement;
    };
    /**
     * 头像组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 指定组件样式文件
     * @tag 定义组件在HTML中的标签名
     */
    interface HTMLZaneAvatarElement extends Components.ZaneAvatar, HTMLStencilElement {
    }
    var HTMLZaneAvatarElement: {
        prototype: HTMLZaneAvatarElement;
        new (): HTMLZaneAvatarElement;
    };
    /**
     * 徽章组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 指定组件样式文件
     * @tag 定义组件在HTML中的标签名
     */
    interface HTMLZaneBadgeElement extends Components.ZaneBadge, HTMLStencilElement {
    }
    var HTMLZaneBadgeElement: {
        prototype: HTMLZaneBadgeElement;
        new (): HTMLZaneBadgeElement;
    };
    /**
     * 面包屑导航组件
     * 用于显示当前页面在网站层次结构中的位置，并提供快速导航功能。
     * @example ```html
     * <zane-breadcrumb>
     *   <zane-breadcrumb-item href="/home">首页</zane-breadcrumb-item>
     *   <zane-breadcrumb-item href="/products">产品</zane-breadcrumb-item>
     *   <zane-breadcrumb-item>当前页面</zane-breadcrumb-item>
     * </zane-breadcrumb>
     * ```
     * @Component 装饰器定义了组件的元数据
     * @property {boolean} shadow - 启用 Shadow DOM 封装
     * @property {string} styleUrl - 组件样式文件路径
     * @property {string} tag - 组件的自定义元素标签名
     */
    interface HTMLZaneBreadcrumbElement extends Components.ZaneBreadcrumb, HTMLStencilElement {
    }
    var HTMLZaneBreadcrumbElement: {
        prototype: HTMLZaneBreadcrumbElement;
        new (): HTMLZaneBreadcrumbElement;
    };
    /**
     * 面包屑导航项组件
     * 作为面包屑导航系统的单个项使用，必须作为`zane-breadcrumb`的子元素使用。
     * 支持链接导航、活动状态指示和Schema.org 结构化数据。
     * @example ```html
     * <!-- 活动状态项(当前页面) -->
     * <zane-breadcrumb-item active>
     *   当前页面
     * </zane-breadcrumb-item>
     * <!-- 可点击链接项 -->
     * <zane-breadcrumb-item href="/products" position="2">
     *   产品列表
     * </zane-breadcrumb-item>
     * ```
     * @Component 配置项说明：
     * @property {boolean} shadow - 启用Shadow DOM封装
     * @property {string} styleUrl - 组件样式文件路径
     * @property {string} tag - 自定义元素标签名
     */
    interface HTMLZaneBreadcrumbItemElement extends Components.ZaneBreadcrumbItem, HTMLStencilElement {
    }
    var HTMLZaneBreadcrumbItemElement: {
        prototype: HTMLZaneBreadcrumbItemElement;
        new (): HTMLZaneBreadcrumbItemElement;
    };
    interface HTMLZaneButtonElementEventMap {
        "zane-button--click": {
    appendData: any;
  };
    }
    /**
     * 多功能按钮组件
     * 提供丰富的交互样式和状态管理，支持：
     * - 多种视觉变体(variant)
     * - 完整的大小(size)控制
     * - 主题颜色(color)系统
     * - 暗黑模式适配
     * - 完善的ARIA可访问性
     * - 图标集成
     * - 加载状态
     * @example 基础使用
     * ```html
     * <zane-button>普通按钮</zane-button>
     * <zane-button variant="outline">轮廓按钮</zane-button>
     * <zane-button icon="settings" iconAlign="start">带图标按钮</zane-button>
     * ```
     * @example 高级使用
     * ```html
     * <zane-button
     * color="danger"
     * darkModeColor="warning"
     * variant="ghost.simple"
     * size="xl"
     * disabled
     * disabledReason="权限不足"
     * >
     * 危险操作
     * </zane-button>
     * ```
     */
    interface HTMLZaneButtonElement extends Components.ZaneButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneButtonElementEventMap>(type: K, listener: (this: HTMLZaneButtonElement, ev: ZaneButtonCustomEvent<HTMLZaneButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneButtonElementEventMap>(type: K, listener: (this: HTMLZaneButtonElement, ev: ZaneButtonCustomEvent<HTMLZaneButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneButtonElement: {
        prototype: HTMLZaneButtonElement;
        new (): HTMLZaneButtonElement;
    };
    /**
     * 按钮组容器组件
     */
    interface HTMLZaneButtonGroupElement extends Components.ZaneButtonGroup, HTMLStencilElement {
    }
    var HTMLZaneButtonGroupElement: {
        prototype: HTMLZaneButtonGroupElement;
        new (): HTMLZaneButtonGroupElement;
    };
    /**
     * 卡片组件
     * 提供可自定义阴影级别的卡片容器
     */
    interface HTMLZaneCardElement extends Components.ZaneCard, HTMLStencilElement {
    }
    var HTMLZaneCardElement: {
        prototype: HTMLZaneCardElement;
        new (): HTMLZaneCardElement;
    };
    interface HTMLZaneCheckboxElementEventMap {
        "zane-checkbox--blur": any;
        "zane-checkbox--change": any;
        "zane-checkbox--focus": any;
    }
    /**
     * 自定义复选框组件
     * 实现可定制的复选框控件，支持选中/未选/中间态三种状态，
     * 提供完整的ARIA支持、键盘交互和事件响应机制。
     * @example ```html
     * <zane-checkbox
     *   label="同意协议"
     *   size="md"
     *   layer="02"
     *   rounded
     *   required
     * ></zane-checkbox>
     * ```
     */
    interface HTMLZaneCheckboxElement extends Components.ZaneCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneCheckboxElementEventMap>(type: K, listener: (this: HTMLZaneCheckboxElement, ev: ZaneCheckboxCustomEvent<HTMLZaneCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneCheckboxElementEventMap>(type: K, listener: (this: HTMLZaneCheckboxElement, ev: ZaneCheckboxCustomEvent<HTMLZaneCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneCheckboxElement: {
        prototype: HTMLZaneCheckboxElement;
        new (): HTMLZaneCheckboxElement;
    };
    interface HTMLZaneCodeEditorElementEventMap {
        "zane-code-editor--change": any;
    }
    /**
     * 基于Monaco Editor的代码编辑器组件
     * 提供语法高亮、智能提示等专业编辑功能，支持暗黑/亮色主题切换，
     * 内置防抖机制优化高频变更事件，适用于代码片段展示和实时编辑场景。
     * @example ```html
     * <zane-code-editor
     *   language="javascript"
     *   minimap
     *   debounce="500"
     *   value="console.log('Hello  World')"
     * ></zane-code-editor>
     * ```
     */
    interface HTMLZaneCodeEditorElement extends Components.ZaneCodeEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneCodeEditorElementEventMap>(type: K, listener: (this: HTMLZaneCodeEditorElement, ev: ZaneCodeEditorCustomEvent<HTMLZaneCodeEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneCodeEditorElementEventMap>(type: K, listener: (this: HTMLZaneCodeEditorElement, ev: ZaneCodeEditorCustomEvent<HTMLZaneCodeEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneCodeEditorElement: {
        prototype: HTMLZaneCodeEditorElement;
        new (): HTMLZaneCodeEditorElement;
    };
    /**
     * 代码高亮组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 组件样式表路径
     * @tag 组件自定义标签名称
     */
    interface HTMLZaneCodeHighlighterElement extends Components.ZaneCodeHighlighter, HTMLStencilElement {
    }
    var HTMLZaneCodeHighlighterElement: {
        prototype: HTMLZaneCodeHighlighterElement;
        new (): HTMLZaneCodeHighlighterElement;
    };
    /**
     * 容器布局组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 组件样式表路径
     * @tag 组件自定义标签名称
     */
    interface HTMLZaneContainerElement extends Components.ZaneContainer, HTMLStencilElement {
    }
    var HTMLZaneContainerElement: {
        prototype: HTMLZaneContainerElement;
        new (): HTMLZaneContainerElement;
    };
    /**
     * 当前时间显示组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 组件样式表路径
     * @tag 组件自定义标签名称
     */
    interface HTMLZaneCurrentTimeElement extends Components.ZaneCurrentTime, HTMLStencilElement {
    }
    var HTMLZaneCurrentTimeElement: {
        prototype: HTMLZaneCurrentTimeElement;
        new (): HTMLZaneCurrentTimeElement;
    };
    interface HTMLZaneDatePickerElementEventMap {
        "zane-date-picker--blur": any;
        "zane-date-picker--change": any;
        "zane-date-picker--focus": any;
        "zane-date-picker--input": any;
    }
    /**
     * 日期选择器组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 组件样式表路径
     * @tag 组件自定义标签名称
     */
    interface HTMLZaneDatePickerElement extends Components.ZaneDatePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneDatePickerElementEventMap>(type: K, listener: (this: HTMLZaneDatePickerElement, ev: ZaneDatePickerCustomEvent<HTMLZaneDatePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneDatePickerElementEventMap>(type: K, listener: (this: HTMLZaneDatePickerElement, ev: ZaneDatePickerCustomEvent<HTMLZaneDatePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneDatePickerElement: {
        prototype: HTMLZaneDatePickerElement;
        new (): HTMLZaneDatePickerElement;
    };
    /**
     * 分割线组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 组件样式表路径
     * @tag 组件自定义标签名称
     */
    interface HTMLZaneDividerElement extends Components.ZaneDivider, HTMLStencilElement {
    }
    var HTMLZaneDividerElement: {
        prototype: HTMLZaneDividerElement;
        new (): HTMLZaneDividerElement;
    };
    interface HTMLZaneDropdownElementEventMap {
        "zane-dropdown--close": any;
        "zane-dropdown--open": any;
        "zane-dropdown--item-click": any;
    }
    /**
     * 下拉菜单组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 组件样式表路径
     * @tag 组件自定义标签名称
     */
    interface HTMLZaneDropdownElement extends Components.ZaneDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneDropdownElementEventMap>(type: K, listener: (this: HTMLZaneDropdownElement, ev: ZaneDropdownCustomEvent<HTMLZaneDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneDropdownElementEventMap>(type: K, listener: (this: HTMLZaneDropdownElement, ev: ZaneDropdownCustomEvent<HTMLZaneDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneDropdownElement: {
        prototype: HTMLZaneDropdownElement;
        new (): HTMLZaneDropdownElement;
    };
    /**
     * 下拉菜单内容组件（需与zane-dropdown配合使用）
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 组件样式表路径
     * @tag 组件自定义标签名称
     */
    interface HTMLZaneDropdownMenuElement extends Components.ZaneDropdownMenu, HTMLStencilElement {
    }
    var HTMLZaneDropdownMenuElement: {
        prototype: HTMLZaneDropdownMenuElement;
        new (): HTMLZaneDropdownMenuElement;
    };
    /**
     * 空状态(Empty State)组件
     * 用于展示无数据时的占位内容，包含插图、标题、描述和操作按钮
     * @component 
     * @shadowDom 使用Shadow DOM封装组件样式
     * @implements ComponentInterface 实现Stencil组件生命周期接口
     */
    interface HTMLZaneEmptyStateElement extends Components.ZaneEmptyState, HTMLStencilElement {
    }
    var HTMLZaneEmptyStateElement: {
        prototype: HTMLZaneEmptyStateElement;
        new (): HTMLZaneEmptyStateElement;
    };
    /**
     * 页脚(Footer)组件
     * 提供可定制的页脚布局，支持多种变体和插槽内容
     * @component 
     * @shadowDom 使用Shadow DOM封装组件样式
     */
    interface HTMLZaneFooterElement extends Components.ZaneFooter, HTMLStencilElement {
    }
    var HTMLZaneFooterElement: {
        prototype: HTMLZaneFooterElement;
        new (): HTMLZaneFooterElement;
    };
    /**
     * 页脚版权(Footer Copyright)组件
     * 用于展示标准版权声明，包含年份、版权所有者链接和保留权利声明
     * @component 
     * @shadowDom 使用Shadow DOM封装组件样式
     */
    interface HTMLZaneFooterCopyrightElement extends Components.ZaneFooterCopyright, HTMLStencilElement {
    }
    var HTMLZaneFooterCopyrightElement: {
        prototype: HTMLZaneFooterCopyrightElement;
        new (): HTMLZaneFooterCopyrightElement;
    };
    /**
     * 页脚链接(Footer Links)组件
     * 用于展示页脚导航链接列表，支持动态链接数据传入
     * @component 
     * @shadowDom 使用Shadow DOM封装组件样式
     */
    interface HTMLZaneFooterLinksElement extends Components.ZaneFooterLinks, HTMLStencilElement {
    }
    var HTMLZaneFooterLinksElement: {
        prototype: HTMLZaneFooterLinksElement;
        new (): HTMLZaneFooterLinksElement;
    };
    /**
     * 表单控件容器组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 组件样式表路径
     * @tag 组件自定义标签名称
     */
    interface HTMLZaneFormControlElement extends Components.ZaneFormControl, HTMLStencilElement {
    }
    var HTMLZaneFormControlElement: {
        prototype: HTMLZaneFormControlElement;
        new (): HTMLZaneFormControlElement;
    };
    /**
     * 头部组件，提供可定制的页面顶部导航栏
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 指定组件样式文件
     * @tag 定义组件在HTML中的标签名
     */
    interface HTMLZaneHeaderElement extends Components.ZaneHeader, HTMLStencilElement {
    }
    var HTMLZaneHeaderElement: {
        prototype: HTMLZaneHeaderElement;
        new (): HTMLZaneHeaderElement;
    };
    /**
     * 头部操作按钮组件，用于在头部导航栏中创建可交互的操作项
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 指定组件样式文件
     * @tag 定义组件在HTML中的标签名
     */
    interface HTMLZaneHeaderActionElement extends Components.ZaneHeaderAction, HTMLStencilElement {
    }
    var HTMLZaneHeaderActionElement: {
        prototype: HTMLZaneHeaderActionElement;
        new (): HTMLZaneHeaderActionElement;
    };
    /**
     * 头部品牌标识组件，用于显示网站/应用的品牌标识和名称
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 指定组件样式文件
     * @tag 定义组件在HTML中的标签名
     */
    interface HTMLZaneHeaderBrandElement extends Components.ZaneHeaderBrand, HTMLStencilElement {
    }
    var HTMLZaneHeaderBrandElement: {
        prototype: HTMLZaneHeaderBrandElement;
        new (): HTMLZaneHeaderBrandElement;
    };
    interface HTMLZaneHtmlEditorElementEventMap {
        "zane-html-editor--change": any;
        "zane-html-editor--search": any;
    }
    /**
     * 基于 Tiptap 的富文本编辑器组件，支持：
     * - HTML 源码编辑
     * - Mention（@提及）自动补全功能
     * - 内置工具条（加粗、斜体、列表等）
     * - 主题切换（vs-dark / vs-light）
     * - 可视化编辑与 HTML 源码切换
     * - 与表单集成（name、required、readonly 等属性）
     */
    interface HTMLZaneHtmlEditorElement extends Components.ZaneHtmlEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneHtmlEditorElementEventMap>(type: K, listener: (this: HTMLZaneHtmlEditorElement, ev: ZaneHtmlEditorCustomEvent<HTMLZaneHtmlEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneHtmlEditorElementEventMap>(type: K, listener: (this: HTMLZaneHtmlEditorElement, ev: ZaneHtmlEditorCustomEvent<HTMLZaneHtmlEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneHtmlEditorElement: {
        prototype: HTMLZaneHtmlEditorElement;
        new (): HTMLZaneHtmlEditorElement;
    };
    /**
     * 图标组件（zane-icon）
     * 该组件基于 Stencil 构建，用于按需异步加载并渲染 SVG 图标。
     * 支持通过属性 name 指定图标名称，通过 size 控制图标尺寸。
     * 组件内部使用 Shadow DOM 实现样式隔离，并暴露 CSS 自定义属性
     * `--zane-icon-size` 供外部覆盖默认尺寸。
     * @example <!-- 基础用法 -->
     * <zane-icon name="home" size="md"></zane-icon>
     * <!-- 自定义尺寸 -->
     * <zane-icon name="user" size="32px"></zane-icon>
     */
    interface HTMLZaneIconElement extends Components.ZaneIcon, HTMLStencilElement {
    }
    var HTMLZaneIconElement: {
        prototype: HTMLZaneIconElement;
        new (): HTMLZaneIconElement;
    };
    /**
     * 自适应主题图片组件（zane-image）
     * 该组件能够根据当前系统的明暗主题自动切换显示的图片资源。
     * 当检测到处于暗色模式时，优先使用 darkSrc 指定的暗色主题图片；
     * 否则使用 src 指定的默认图片。
     * 组件内部通过监听主题变化事件实现实时切换，无需手动刷新。
     * @example <!-- 基础用法 -->
     * <zane-image
     *   src="assets/logo-light.svg"
     *   dark-src="assets/logo-dark.svg"
     *   image-title="公司 Logo">
     * </zane-image>
     */
    interface HTMLZaneImageElement extends Components.ZaneImage, HTMLStencilElement {
    }
    var HTMLZaneImageElement: {
        prototype: HTMLZaneImageElement;
        new (): HTMLZaneImageElement;
    };
    interface HTMLZaneInputElementEventMap {
        "zane-input--blur": any;
        "zane-input--change": any;
        "zane-input--focus": any;
        "zane-input--input": any;
    }
    /**
     * 自定义输入框组件 zane-input
     * 实现功能：
     * 1. 支持多种输入类型（文本、密码、邮箱等）及尺寸控制
     * 2. 包含表单验证状态（错误/警告）及辅助文本展示
     * 3. 提供前后插槽(start/end)扩展能力
     * 4. 支持防抖事件处理与无障碍访问
     * 5. 集成密码可见性切换功能
     */
    interface HTMLZaneInputElement extends Components.ZaneInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneInputElementEventMap>(type: K, listener: (this: HTMLZaneInputElement, ev: ZaneInputCustomEvent<HTMLZaneInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneInputElementEventMap>(type: K, listener: (this: HTMLZaneInputElement, ev: ZaneInputCustomEvent<HTMLZaneInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneInputElement: {
        prototype: HTMLZaneInputElement;
        new (): HTMLZaneInputElement;
    };
    interface HTMLZaneInputUrlElementEventMap {
        "inputInvalid": boolean;
        "valueChange": string;
    }
    /**
     * 双模式URL输入组件
     * @component zane-input-url
     * @tags form-control, input, url
     * @shadow true
     * @description 提供URL输入与预览双模式交互的输入组件。在展示模式下显示可点击的URL链接，
     * 在编辑模式下提供带验证功能的输入框。支持防抖值变化事件和实时URL验证。
     * @example <!-- 基础用法 -->
     * <zane-input-url
     *   value="https://example.com"
     *   placeholder="输入网站地址"
     * />
     * <!-- 带尺寸控制 -->
     * <zane-input-url size="sm" />
     */
    interface HTMLZaneInputUrlElement extends Components.ZaneInputUrl, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneInputUrlElementEventMap>(type: K, listener: (this: HTMLZaneInputUrlElement, ev: ZaneInputUrlCustomEvent<HTMLZaneInputUrlElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneInputUrlElementEventMap>(type: K, listener: (this: HTMLZaneInputUrlElement, ev: ZaneInputUrlCustomEvent<HTMLZaneInputUrlElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneInputUrlElement: {
        prototype: HTMLZaneInputUrlElement;
        new (): HTMLZaneInputUrlElement;
    };
    /**
     * 智能链接组件
     * @component zane-link
     * @tags navigation, link, interactive
     * @shadow true
     * @description 增强型可交互链接组件，支持动态状态反馈和键盘导航优化。
     * 特性包括：
     * - 视觉状态反馈（聚焦/激活）
     * - 空格键触发点击
     * - 跨浏览器兼容的焦点管理
     * - 无障碍属性支持
     * @example <!-- 基础链接 -->
     * <zane-link href="/about">关于我们</zane-link>
     * <!-- 新窗口打开 -->
     * <zane-link href="https://external.com"  target="_blank">
     *   外部链接
     * </zane-link>
     */
    interface HTMLZaneLinkElement extends Components.ZaneLink, HTMLStencilElement {
    }
    var HTMLZaneLinkElement: {
        prototype: HTMLZaneLinkElement;
        new (): HTMLZaneLinkElement;
    };
    /**
     * 多功能菜单容器组件
     * @component zane-menu
     * @tags navigation, menu, container
     * @shadow true
     * @description 提供标准化的菜单容器实现，支持：
     * - 多种视觉尺寸层级
     * - 键盘导航支持
     * - 空状态展示
     * - 动态焦点管理
     * @example <!-- 基础菜单 -->
     * <zane-menu>
     *   <zane-menu-item>选项一</zane-menu-item>
     *   <zane-menu-item>选项二</zane-menu-item>
     * </zane-menu>
     * <!-- 空状态菜单 -->
     * <zane-menu empty empty-state-headline="无数据" empty-state-description="请添加菜单项">
     * </zane-menu>
     */
    interface HTMLZaneMenuElement extends Components.ZaneMenu, HTMLStencilElement {
    }
    var HTMLZaneMenuElement: {
        prototype: HTMLZaneMenuElement;
        new (): HTMLZaneMenuElement;
    };
    /**
     * 菜单分隔线组件
     * @component zane-menu-divider
     * @shadow true
     * @description 提供菜单项之间的视觉分隔效果，用于增强菜单结构的可读性。该组件：
     * - 实现菜单项分组逻辑分隔
     * - 支持深浅主题色自动适配
     * - 提供标准化的间距和高度
     * @example <!-- 基础用法 -->
     * <zane-menu>
     *   <zane-menu-item>选项一</zane-menu-item>
     *   <zane-menu-divider></zane-menu-divider> <!-- 分隔线 -->
     *   <zane-menu-item>选项二</zane-menu-item>
     * </zane-menu>
     * <!-- 分组场景 -->
     * <zane-menu>
     *   <zane-menu-item>操作类</zane-menu-item>
     *   <zane-menu-divider></zane-menu-divider>
     *   <zane-menu-item>设置类</zane-menu-item>
     * </zane-menu>
     */
    interface HTMLZaneMenuDividerElement extends Components.ZaneMenuDivider, HTMLStencilElement {
    }
    var HTMLZaneMenuDividerElement: {
        prototype: HTMLZaneMenuDividerElement;
        new (): HTMLZaneMenuDividerElement;
    };
    interface HTMLZaneMenuItemElementEventMap {
        "zane-menu-item--click": any;
    }
    /**
     * 菜单项组件 (zane-menu-item)
     * @component zane-menu-item
     * @shadow true
     * @description 实现标准导航菜单项的核心组件，提供：
     * - 多状态交互（正常/选中/禁用/聚焦）
     * - 8种语义化色彩主题
     * - 可选中标记功能（带对勾图标）
     * - 原生链接支持（href/target）
     * - 键盘导航支持（空格/回车触发）
     * - 无障碍ARIA兼容设计
     * @example <!-- 基础文本菜单项 -->
     * <zane-menu-item>个人中心</zane-menu-item>
     * <!-- 带图标和选中状态的菜单项 -->
     * <zane-menu-item selected selectable>
     *   收件箱
     *   <zane-badge slot="end">12</zane-badge>
     * </zane-menu-item>
     * <!-- 作为链接的菜单项 -->
     * <zane-menu-item
     *   href="/settings"
     *   color="primary"
     *   target="_blank">
     *   系统设置
     * </zane-menu-item>
     * @designSystem | 状态         | 视觉特征                     |
     * |--------------|----------------------------|
     * | 正常         | 浅灰背景，深灰文字          |
     * | 悬停         | 浅蓝色背景（#f0f7ff）       |
     * | 聚焦         | 2px蓝色边框（#1a73e8）      |
     * | 选中         | 左侧蓝色条+对勾图标         |
     * | 禁用         | 50%透明度，阻止交互事件     |
     */
    interface HTMLZaneMenuItemElement extends Components.ZaneMenuItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneMenuItemElementEventMap>(type: K, listener: (this: HTMLZaneMenuItemElement, ev: ZaneMenuItemCustomEvent<HTMLZaneMenuItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneMenuItemElementEventMap>(type: K, listener: (this: HTMLZaneMenuItemElement, ev: ZaneMenuItemCustomEvent<HTMLZaneMenuItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneMenuItemElement: {
        prototype: HTMLZaneMenuItemElement;
        new (): HTMLZaneMenuItemElement;
    };
    interface HTMLZaneModalElementEventMap {
        "zane-modal--close": any;
    }
    /**
     * 模态框组件 (zane-modal)
     * @component zane-modal
     * @shadow true
     * @description 提供企业级应用的模态对话框解决方案，支持：
     * - 多种预设尺寸响应式布局
     * - 灵活的内容插槽（头部/主体/底部）
     * - 加载状态可视化
     * - 可控关闭行为（自动关闭/受控关闭）
     * - 无障碍访问支持
     * - 滚动条自动管理
     * @example <!-- 基础用法 -->
     * <zane-modal
     *   heading="确认操作"
     *   open={true}>
     *   <p>确定要删除此项吗？</p>
     *   <div slot="footer">
     *     <zane-button>取消</zane-button>
     *     <zane-button variant="primary">确定</zane-button>
     *   </div>
     * </zane-modal>
     * <!-- 带加载状态的模态框 -->
     * <zane-modal
     *   heading="数据处理中"
     *   open={true}
     *   showLoader={true}>
     *   <p>请稍候，正在保存您的数据...</p>
     * </zane-modal>
     */
    interface HTMLZaneModalElement extends Components.ZaneModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneModalElementEventMap>(type: K, listener: (this: HTMLZaneModalElement, ev: ZaneModalCustomEvent<HTMLZaneModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneModalElementEventMap>(type: K, listener: (this: HTMLZaneModalElement, ev: ZaneModalCustomEvent<HTMLZaneModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneModalElement: {
        prototype: HTMLZaneModalElement;
        new (): HTMLZaneModalElement;
    };
    /**
     * 模态框内容容器组件 (zane-modal-content)
     * @component zane-modal-content
     * @shadow true
     * @description 专为 zane-modal 设计的结构化内容容器，提供三种预设内容样式方案，
     * 支持动态切换内容展示模式。作为模态框生态系统的核心子组件，实现：
     * - 内容区域样式规范化
     * - 自适应内容布局
     * - 多场景内容样式预设
     * - 无缝衔接父级模态框的交互状态
     * @see {@link zane-modal } 关联的父级模态框组件
     * @example <!-- 默认带边框样式 -->
     * <zane-modal-content>
     *   <p>标准内容区块</p>
     * </zane-modal-content>
     * <!-- 无边框模式 -->
     * <zane-modal-content type="borderless">
     *   <img src="data-chart.png"  alt="数据图表"/>
     * </zane-modal-content>
     * <!-- 文本优化模式 -->
     * <zane-modal-content type="text">
     *   <h3>服务条款</h3>
     *   <p>这里是详细的协议文本内容...</p>
     * </zane-modal-content>
     */
    interface HTMLZaneModalContentElement extends Components.ZaneModalContent, HTMLStencilElement {
    }
    var HTMLZaneModalContentElement: {
        prototype: HTMLZaneModalContentElement;
        new (): HTMLZaneModalContentElement;
    };
    interface HTMLZaneNotificationElementEventMap {
        "zane-notification--action-click": any;
        "zane-notification--dismiss": any;
    }
    /**
     * 智能通知系统组件 (zane-notification)
     * @component zane-notification
     * @shadow true
     * @description 提供多场景智能通知解决方案，支持四态反馈、操作交互和主题适配。
     * 核心功能包括：
     * - 状态图标自动匹配
     * - 暗黑模式/高对比度自适应
     * - 内联/块级布局切换
     * - 可定制的操作按钮
     * - 可控的关闭行为
     * - 无障碍访问支持
     * @example <!-- 基础警告通知 -->
     * <zane-notification state="warning" dismissible>
     *   <span slot="title">存储空间不足</span>
     *   <span slot="subtitle">剩余 5% 磁盘空间，建议清理缓存</span>
     * </zane-notification>
     * <!-- 带操作的成功通知 -->
     * <zane-notification state="success" action="查看详情" high-contrast>
     *   <span slot="title">支付成功</span>
     *   <span slot="subtitle">订单号：20250719-2156</span>
     * </zane-notification>
     */
    interface HTMLZaneNotificationElement extends Components.ZaneNotification, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneNotificationElementEventMap>(type: K, listener: (this: HTMLZaneNotificationElement, ev: ZaneNotificationCustomEvent<HTMLZaneNotificationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneNotificationElementEventMap>(type: K, listener: (this: HTMLZaneNotificationElement, ev: ZaneNotificationCustomEvent<HTMLZaneNotificationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneNotificationElement: {
        prototype: HTMLZaneNotificationElement;
        new (): HTMLZaneNotificationElement;
    };
    /**
     * 智能通知管理系统组件 (zane-notification-manager)
     * @component zane-notification-manager
     * @shadow true
     * @description 全局通知管理中心，提供以下核心能力：
     * 1. 跨组件通知聚合：通过事件总线收集全应用通知
     * 2. 多位置布局：支持4种屏幕定位策略
     * 3. 生命周期管理：自动关闭/手动关闭/防重复
     * 4. 安全渲染：内置DOM净化防止XSS攻击
     * 5. 主题适配：自动同步暗黑模式状态
     * @example <!-- 基础用法 -->
     * <zane-notification-manager position="top-right"></zane-notification-manager>
     * <!-- 自定义命名管理器 -->
     * <zane-notification-manager name="dashboard" position="bottom-left"></zane-notification-manager>
     */
    interface HTMLZaneNotificationManagerElement extends Components.ZaneNotificationManager, HTMLStencilElement {
    }
    var HTMLZaneNotificationManagerElement: {
        prototype: HTMLZaneNotificationManagerElement;
        new (): HTMLZaneNotificationManagerElement;
    };
    interface HTMLZaneNumberElementEventMap {
        "zane-number--blur": any;
        "zane-number--change": any;
        "zane-number--focus": any;
        "zane-number--input": any;
    }
    /**
     * 数字输入框组件 zane-number
     * 核心功能：
     * 1. 支持数字输入及增减按钮控制
     * 2. 提供四种状态反馈（默认/成功/警告/错误）
     * 3. 表单验证支持（必填/禁用/只读）
     * 4. 防抖事件处理与无障碍访问优化
     * 5. 插槽扩展能力（前后扩展区域）
     * @implements ComponentInterface *
     * @implements InputComponentInterface *
     */
    interface HTMLZaneNumberElement extends Components.ZaneNumber, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneNumberElementEventMap>(type: K, listener: (this: HTMLZaneNumberElement, ev: ZaneNumberCustomEvent<HTMLZaneNumberElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneNumberElementEventMap>(type: K, listener: (this: HTMLZaneNumberElement, ev: ZaneNumberCustomEvent<HTMLZaneNumberElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneNumberElement: {
        prototype: HTMLZaneNumberElement;
        new (): HTMLZaneNumberElement;
    };
    interface HTMLZanePopoverElementEventMap {
        "zane-popover--close": any;
        "zane-popover--open": any;
    }
    /**
     * 弹出框组件（Popover）
     * @component zane-popover
     * @shadow true
     * @description `zane-popover` 是一个灵活的弹出框组件，可以在目标元素周围显示内容。它支持多种触发方式（点击、悬停、手动控制）、多种箭头样式以及自定义位置。
     * 使用此组件时，需要在组件内部放置一个 `zane-popover-content` 组件作为弹出内容，以及一个触发元素（例如按钮）。
     * @example <zane-popover trigger="click">
     *   <button>点击我</button>
     *   <zane-popover-content>
     *     这里是弹出内容
     *   </zane-popover-content>
     * </zane-popover>
     */
    interface HTMLZanePopoverElement extends Components.ZanePopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZanePopoverElementEventMap>(type: K, listener: (this: HTMLZanePopoverElement, ev: ZanePopoverCustomEvent<HTMLZanePopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZanePopoverElementEventMap>(type: K, listener: (this: HTMLZanePopoverElement, ev: ZanePopoverCustomEvent<HTMLZanePopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZanePopoverElement: {
        prototype: HTMLZanePopoverElement;
        new (): HTMLZanePopoverElement;
    };
    /**
     * 弹出框内容容器组件 (zane-popover-content)
     * @component zane-popover-content
     * @shadow true
     * @description 弹出框系统的核心内容承载容器，提供以下核心功能：
     * 1. 结构化内容容器：为弹出内容提供标准化的布局结构
     * 2. 动态箭头指示器：根据父组件配置自动调整箭头样式和位置
     * 3. 无障碍支持：内置ARIA角色属性增强可访问性
     * 4. 主题适配：通过CSS变量支持深度主题定制
     * @dependency 必须作为`<zane-popover>`组件的直接子元素使用
     * @example <!-- 基础用法 -->
     * <zane-popover-content>
     *   <h3>标题</h3>
     *   <p>详细说明内容...</p>
     *   <button>确认</button>
     * </zane-popover-content>
     * <!-- 带样式定制 -->
     * <zane-popover-content style="--background: #2c3e50; --color: white">
     *   ...
     * </zane-popover-content>
     */
    interface HTMLZanePopoverContentElement extends Components.ZanePopoverContent, HTMLStencilElement {
    }
    var HTMLZanePopoverContentElement: {
        prototype: HTMLZanePopoverContentElement;
        new (): HTMLZanePopoverContentElement;
    };
    /**
     * 动态进度指示器组件 (zane-progress)
     * @component zane-progress
     * @shadow true
     * @description 提供可视化任务进程的进度指示器，支持多种状态显示和尺寸配置。适用于文件上传、数据加载、操作流程等场景。
     * @example <!-- 基础用法 -->
     * <zane-progress value={75}></zane-progress>
     * <!-- 带标签和状态 -->
     * <zane-progress
     *   value={50}
     *   label="上传进度"
     *   status="active"
     *   helperText="剩余时间：2分钟"
     * ></zane-progress>
     * <!-- 错误状态 -->
     * <zane-progress
     *   value={30}
     *   status="error"
     *   helperText="上传失败，请重试"
     * ></zane-progress>
     */
    interface HTMLZaneProgressElement extends Components.ZaneProgress, HTMLStencilElement {
    }
    var HTMLZaneProgressElement: {
        prototype: HTMLZaneProgressElement;
        new (): HTMLZaneProgressElement;
    };
    interface HTMLZaneSelectElementEventMap {
        "zane-select--change": any;
        "zane-select--search": any;
        "zane-select--enter": any;
    }
    /**
     * 基于 Floating UI 的增强型下拉选择组件
     * @component 
     * @tag zane-select
     * @implements ComponentInterface , InputComponentInterface}
     * @example <!-- 基础用法 -->
     * <zane-select
     *   items={[{label: '选项1', value: 1}]}
     *   placeholder="请选择"
     *   size="md"
     * />
     */
    interface HTMLZaneSelectElement extends Components.ZaneSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneSelectElementEventMap>(type: K, listener: (this: HTMLZaneSelectElement, ev: ZaneSelectCustomEvent<HTMLZaneSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneSelectElementEventMap>(type: K, listener: (this: HTMLZaneSelectElement, ev: ZaneSelectCustomEvent<HTMLZaneSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneSelectElement: {
        prototype: HTMLZaneSelectElement;
        new (): HTMLZaneSelectElement;
    };
    /**
     * 侧边导航栏组件，提供页面侧边导航功能
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 指定组件样式文件
     * @tag 定义组件在HTML中的标签名
     */
    interface HTMLZaneSidenavElement extends Components.ZaneSidenav, HTMLStencilElement {
    }
    var HTMLZaneSidenavElement: {
        prototype: HTMLZaneSidenavElement;
        new (): HTMLZaneSidenavElement;
    };
    /**
     * 侧边导航菜单组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 指定组件样式文件
     * @tag 定义组件在HTML中的标签名
     */
    interface HTMLZaneSidenavMenuElement extends Components.ZaneSidenavMenu, HTMLStencilElement {
    }
    var HTMLZaneSidenavMenuElement: {
        prototype: HTMLZaneSidenavMenuElement;
        new (): HTMLZaneSidenavMenuElement;
    };
    interface HTMLZaneSidenavMenuItemElementEventMap {
        "zane:sidenav-menu-item-click": any;
    }
    /**
     * 侧边导航菜单项组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 指定组件样式文件
     * @tag 定义组件在HTML中的标签名
     */
    interface HTMLZaneSidenavMenuItemElement extends Components.ZaneSidenavMenuItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneSidenavMenuItemElementEventMap>(type: K, listener: (this: HTMLZaneSidenavMenuItemElement, ev: ZaneSidenavMenuItemCustomEvent<HTMLZaneSidenavMenuItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneSidenavMenuItemElementEventMap>(type: K, listener: (this: HTMLZaneSidenavMenuItemElement, ev: ZaneSidenavMenuItemCustomEvent<HTMLZaneSidenavMenuItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneSidenavMenuItemElement: {
        prototype: HTMLZaneSidenavMenuItemElement;
        new (): HTMLZaneSidenavMenuItemElement;
    };
    interface HTMLZaneSliderElementEventMap {
        "zane-slider--change": any;
        "zane-slider--input": any;
    }
    /**
     * 滑动选择器组件
     * 提供可拖动的滑块选择器，支持鼠标/触摸交互、键盘操作和数值输入框集成。
     * @component zane-slider
     * @tags zane-slider
     * @shadow true
     * @example <!-- 基础用法 -->
     * <zane-slider min="0" max="100" value="50"></zane-slider>
     * <!-- 禁用状态 -->
     * <zane-slider disabled value="30"></zane-slider>
     * <!-- 隐藏数值输入框 -->
     * <zane-slider show-only-slider value="75"></zane-slider>
     */
    interface HTMLZaneSliderElement extends Components.ZaneSlider, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneSliderElementEventMap>(type: K, listener: (this: HTMLZaneSliderElement, ev: ZaneSliderCustomEvent<HTMLZaneSliderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneSliderElementEventMap>(type: K, listener: (this: HTMLZaneSliderElement, ev: ZaneSliderCustomEvent<HTMLZaneSliderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneSliderElement: {
        prototype: HTMLZaneSliderElement;
        new (): HTMLZaneSliderElement;
    };
    /**
     * 加载指示器组件 (zane-spinner)
     * @component 
     * @shadow true
     * @description 用于表示加载状态的动画指示器，支持自定义尺寸和样式。
     * @example <!-- 基本用法 -->
     * <zane-spinner></zane-spinner>
     * <!-- 自定义描述文本 -->
     * <zane-spinner description="数据加载中"></zane-spinner>
     * <!-- 隐藏背景圆环 -->
     * <zane-spinner hide-background></zane-spinner>
     */
    interface HTMLZaneSpinnerElement extends Components.ZaneSpinner, HTMLStencilElement {
    }
    var HTMLZaneSpinnerElement: {
        prototype: HTMLZaneSpinnerElement;
        new (): HTMLZaneSpinnerElement;
    };
    /**
     * SVG 动态加载组件 (zane-svg)
     * @component 
     * @shadow true
     * @description 智能 SVG 图标容器，支持动态加载、尺寸控制与样式继承
     * @example <!-- 基础用法 -->
     * <zane-svg src="/assets/icon.svg"></zane-svg>
     * <!-- 带尺寸控制 -->
     * <zane-svg src="/assets/logo.svg"  size="xl"></zane-svg>
     * <!-- 自定义尺寸 -->
     * <zane-svg src="/assets/chart.svg"  size="32px"></zane-svg>
     */
    interface HTMLZaneSvgElement extends Components.ZaneSvg, HTMLStencilElement {
    }
    var HTMLZaneSvgElement: {
        prototype: HTMLZaneSvgElement;
        new (): HTMLZaneSvgElement;
    };
    interface HTMLZaneTabElementEventMap {
        "zane-tab--click": any;
    }
    /**
     * 单个标签页元素，支持多种交互状态和类型
     */
    interface HTMLZaneTabElement extends Components.ZaneTab, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneTabElementEventMap>(type: K, listener: (this: HTMLZaneTabElement, ev: ZaneTabCustomEvent<HTMLZaneTabElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneTabElementEventMap>(type: K, listener: (this: HTMLZaneTabElement, ev: ZaneTabCustomEvent<HTMLZaneTabElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneTabElement: {
        prototype: HTMLZaneTabElement;
        new (): HTMLZaneTabElement;
    };
    /**
     * 标签页内容面板容器
     * 该组件与 zane-tab 标签页组件配合使用，形成完整的标签页系统。当标签页被激活时，
     * 关联的面板内容将显示在界面中，支持层级深度控制以实现复杂的视觉层次效果。
     * @example <zane-tab-panel value="profile" active>
     *   用户资料详情内容
     * </zane-tab-panel>
     */
    interface HTMLZaneTabPanelElement extends Components.ZaneTabPanel, HTMLStencilElement {
    }
    var HTMLZaneTabPanelElement: {
        prototype: HTMLZaneTabPanelElement;
        new (): HTMLZaneTabPanelElement;
    };
    interface HTMLZaneTableElementEventMap {
        "zane-table--cell-click": any;
        "zane-table--page": any;
        "zane-table--selection-change": any;
        "zane-table--sort": any;
    }
    interface HTMLZaneTableElement extends Components.ZaneTable, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneTableElementEventMap>(type: K, listener: (this: HTMLZaneTableElement, ev: ZaneTableCustomEvent<HTMLZaneTableElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneTableElementEventMap>(type: K, listener: (this: HTMLZaneTableElement, ev: ZaneTableCustomEvent<HTMLZaneTableElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneTableElement: {
        prototype: HTMLZaneTableElement;
        new (): HTMLZaneTableElement;
    };
    /**
     * 标签页容器组件，用于管理和切换多个标签页
     */
    interface HTMLZaneTabsElement extends Components.ZaneTabs, HTMLStencilElement {
    }
    var HTMLZaneTabsElement: {
        prototype: HTMLZaneTabsElement;
        new (): HTMLZaneTabsElement;
    };
    interface HTMLZaneTabsListElement extends Components.ZaneTabsList, HTMLStencilElement {
    }
    var HTMLZaneTabsListElement: {
        prototype: HTMLZaneTabsListElement;
        new (): HTMLZaneTabsListElement;
    };
    interface HTMLZaneTagElementEventMap {
        "zane-tag--click": any;
        "zane-tag--dismiss": any;
    }
    /**
     * 多功能标签/徽章组件
     * 提供灵活的内容展示能力，支持多种颜色主题、尺寸规格、可关闭操作和选中状态。
     * 适用于分类标记、状态指示、可选项选择等场景，可与表单组件或列表组件配合使用。
     * @example <!-- 基础用法 -->
     * <zane-tag>默认标签</zane-tag>
     * <!-- 带关闭按钮 -->
     * <zane-tag dismissible>可关闭标签</zane-tag>
     * <!-- 带图片 -->
     * <zane-tag image-src="/path/to/avatar.jpg"> 用户标签</zane-tag>
     */
    interface HTMLZaneTagElement extends Components.ZaneTag, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneTagElementEventMap>(type: K, listener: (this: HTMLZaneTagElement, ev: ZaneTagCustomEvent<HTMLZaneTagElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneTagElementEventMap>(type: K, listener: (this: HTMLZaneTagElement, ev: ZaneTagCustomEvent<HTMLZaneTagElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneTagElement: {
        prototype: HTMLZaneTagElement;
        new (): HTMLZaneTagElement;
    };
    /**
     * 多功能文本展示组件
     * 提供丰富的文本样式和语义化支持，满足不同场景的文本展示需求。支持多种文本类型、
     * 颜色主题、标题级别和响应式文本大小，集成了完善的 ARIA 可访问性支持。
     * @example <!-- 基础文本 -->
     * <zane-text>普通段落文本</zane-text>
     * <!-- 标题文本 -->
     * <zane-text type="heading" heading-level="2">二级标题</zane-text>
     * <!-- 带颜色的辅助文本 -->
     * <zane-text type="helper-text" color="helper">表单提示文本</zane-text>
     */
    interface HTMLZaneTextElement extends Components.ZaneText, HTMLStencilElement {
    }
    var HTMLZaneTextElement: {
        prototype: HTMLZaneTextElement;
        new (): HTMLZaneTextElement;
    };
    interface HTMLZaneTextareaElementEventMap {
        "zane-textarea--action-click": any;
        "zane-textarea--blur": any;
        "zane-textarea--change": any;
        "zane-textarea--focus": any;
        "zane-textarea--input": any;
    }
    /**
     * 多功能文本区域输入组件
     * 提供完整的表单文本区域解决方案，支持响应式布局、表单验证、辅助文本提示和丰富的交互功能。
     * 集成了 ARIA 可访问性支持和多状态反馈设计，适用于复杂表单场景。
     * @example <!-- 基础用法 -->
     * <zane-textarea label="用户反馈" placeholder="请输入您的建议"></zane-textarea>
     * <!-- 带验证状态 -->
     * <zane-textarea
     *   label="密码"
     *   state="error"
     *   invalid-text="密码长度不足8位"
     * ></zane-textarea>
     */
    interface HTMLZaneTextareaElement extends Components.ZaneTextarea, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneTextareaElementEventMap>(type: K, listener: (this: HTMLZaneTextareaElement, ev: ZaneTextareaCustomEvent<HTMLZaneTextareaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneTextareaElementEventMap>(type: K, listener: (this: HTMLZaneTextareaElement, ev: ZaneTextareaCustomEvent<HTMLZaneTextareaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneTextareaElement: {
        prototype: HTMLZaneTextareaElement;
        new (): HTMLZaneTextareaElement;
    };
    interface HTMLZaneTimePickerElementEventMap {
        "zane-time-picker--blur": any;
        "zane-time-picker--change": any;
        "zane-time-picker--focus": any;
        "zane-time-picker--input": any;
    }
    /**
     * 时间选择器组件
     */
    interface HTMLZaneTimePickerElement extends Components.ZaneTimePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneTimePickerElementEventMap>(type: K, listener: (this: HTMLZaneTimePickerElement, ev: ZaneTimePickerCustomEvent<HTMLZaneTimePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneTimePickerElementEventMap>(type: K, listener: (this: HTMLZaneTimePickerElement, ev: ZaneTimePickerCustomEvent<HTMLZaneTimePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneTimePickerElement: {
        prototype: HTMLZaneTimePickerElement;
        new (): HTMLZaneTimePickerElement;
    };
    interface HTMLZaneToggleElementEventMap {
        "zane-toggle--blur": any;
        "zane-toggle--change": any;
        "zane-toggle--focus": any;
    }
    /**
     * 开关组件
     * 该组件实现了可定制的开关切换控件，支持多种交互状态和样式配置，
     * 符合WAI-ARIA无障碍规范，可无缝集成到表单中使用。
     */
    interface HTMLZaneToggleElement extends Components.ZaneToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneToggleElementEventMap>(type: K, listener: (this: HTMLZaneToggleElement, ev: ZaneToggleCustomEvent<HTMLZaneToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneToggleElementEventMap>(type: K, listener: (this: HTMLZaneToggleElement, ev: ZaneToggleCustomEvent<HTMLZaneToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneToggleElement: {
        prototype: HTMLZaneToggleElement;
        new (): HTMLZaneToggleElement;
    };
    /**
     * 工具提示组件 (zane-tooltip)
     * 该组件实现了一个灵活的工具提示系统，可通过悬停或手动触发显示上下文信息。
     * 支持四种定位方向，可动态绑定目标元素，并适配无障碍规范。
     */
    interface HTMLZaneTooltipElement extends Components.ZaneTooltip, HTMLStencilElement {
    }
    var HTMLZaneTooltipElement: {
        prototype: HTMLZaneTooltipElement;
        new (): HTMLZaneTooltipElement;
    };
    /**
     * 树形结构可视化组件
     * @example <!-- 基础用法 -->
     * <zane-tree>
     *   <zane-tree-node value="node1">一级节点</zane-tree-node>
     *   <zane-tree-node value="node2">二级节点</zane-tree-node>
     * </zane-tree>
     */
    interface HTMLZaneTreeElement extends Components.ZaneTree, HTMLStencilElement {
    }
    var HTMLZaneTreeElement: {
        prototype: HTMLZaneTreeElement;
        new (): HTMLZaneTreeElement;
    };
    interface HTMLZaneTreeNodeElementEventMap {
        "zane-tree-node--click": any;
    }
    /**
     * 树形结构节点组件
     */
    interface HTMLZaneTreeNodeElement extends Components.ZaneTreeNode, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneTreeNodeElementEventMap>(type: K, listener: (this: HTMLZaneTreeNodeElement, ev: ZaneTreeNodeCustomEvent<HTMLZaneTreeNodeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneTreeNodeElementEventMap>(type: K, listener: (this: HTMLZaneTreeNodeElement, ev: ZaneTreeNodeCustomEvent<HTMLZaneTreeNodeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneTreeNodeElement: {
        prototype: HTMLZaneTreeNodeElement;
        new (): HTMLZaneTreeNodeElement;
    };
    interface HTMLElementTagNameMap {
        "zane-accordion": HTMLZaneAccordionElement;
        "zane-accordion-item": HTMLZaneAccordionItemElement;
        "zane-avatar": HTMLZaneAvatarElement;
        "zane-badge": HTMLZaneBadgeElement;
        "zane-breadcrumb": HTMLZaneBreadcrumbElement;
        "zane-breadcrumb-item": HTMLZaneBreadcrumbItemElement;
        "zane-button": HTMLZaneButtonElement;
        "zane-button-group": HTMLZaneButtonGroupElement;
        "zane-card": HTMLZaneCardElement;
        "zane-checkbox": HTMLZaneCheckboxElement;
        "zane-code-editor": HTMLZaneCodeEditorElement;
        "zane-code-highlighter": HTMLZaneCodeHighlighterElement;
        "zane-container": HTMLZaneContainerElement;
        "zane-current-time": HTMLZaneCurrentTimeElement;
        "zane-date-picker": HTMLZaneDatePickerElement;
        "zane-divider": HTMLZaneDividerElement;
        "zane-dropdown": HTMLZaneDropdownElement;
        "zane-dropdown-menu": HTMLZaneDropdownMenuElement;
        "zane-empty-state": HTMLZaneEmptyStateElement;
        "zane-footer": HTMLZaneFooterElement;
        "zane-footer-copyright": HTMLZaneFooterCopyrightElement;
        "zane-footer-links": HTMLZaneFooterLinksElement;
        "zane-form-control": HTMLZaneFormControlElement;
        "zane-header": HTMLZaneHeaderElement;
        "zane-header-action": HTMLZaneHeaderActionElement;
        "zane-header-brand": HTMLZaneHeaderBrandElement;
        "zane-html-editor": HTMLZaneHtmlEditorElement;
        "zane-icon": HTMLZaneIconElement;
        "zane-image": HTMLZaneImageElement;
        "zane-input": HTMLZaneInputElement;
        "zane-input-url": HTMLZaneInputUrlElement;
        "zane-link": HTMLZaneLinkElement;
        "zane-menu": HTMLZaneMenuElement;
        "zane-menu-divider": HTMLZaneMenuDividerElement;
        "zane-menu-item": HTMLZaneMenuItemElement;
        "zane-modal": HTMLZaneModalElement;
        "zane-modal-content": HTMLZaneModalContentElement;
        "zane-notification": HTMLZaneNotificationElement;
        "zane-notification-manager": HTMLZaneNotificationManagerElement;
        "zane-number": HTMLZaneNumberElement;
        "zane-popover": HTMLZanePopoverElement;
        "zane-popover-content": HTMLZanePopoverContentElement;
        "zane-progress": HTMLZaneProgressElement;
        "zane-select": HTMLZaneSelectElement;
        "zane-sidenav": HTMLZaneSidenavElement;
        "zane-sidenav-menu": HTMLZaneSidenavMenuElement;
        "zane-sidenav-menu-item": HTMLZaneSidenavMenuItemElement;
        "zane-slider": HTMLZaneSliderElement;
        "zane-spinner": HTMLZaneSpinnerElement;
        "zane-svg": HTMLZaneSvgElement;
        "zane-tab": HTMLZaneTabElement;
        "zane-tab-panel": HTMLZaneTabPanelElement;
        "zane-table": HTMLZaneTableElement;
        "zane-tabs": HTMLZaneTabsElement;
        "zane-tabs-list": HTMLZaneTabsListElement;
        "zane-tag": HTMLZaneTagElement;
        "zane-text": HTMLZaneTextElement;
        "zane-textarea": HTMLZaneTextareaElement;
        "zane-time-picker": HTMLZaneTimePickerElement;
        "zane-toggle": HTMLZaneToggleElement;
        "zane-tooltip": HTMLZaneTooltipElement;
        "zane-tree": HTMLZaneTreeElement;
        "zane-tree-node": HTMLZaneTreeNodeElement;
    }
}
declare namespace LocalJSX {
    /**
     * 可折叠面板(Accordion)容器组件
     * 提供可折叠内容区域的容器组件，管理多个折叠项的状态和交互。
     * 支持单开/多开模式、多种尺寸和图标位置配置。
     */
    interface ZaneAccordion {
        /**
          * 控制折叠指示图标的位置  1. `end`: 图标显示在面板标题的末尾(右侧)(默认值) 2. `start`: 图标显示在面板标题的开头(左侧)
          * @type {'end' | 'start'}
          * @default 'end'
          * @reflectToAttr 属性值会同步到DOM元素上
          * @example <zane-accordion align="start"></zane-accordion>
         */
        "align"?: 'end' | 'start';
        /**
          * 是否允许多个面板同时展开  - true: 允许多个面板同时保持展开状态 - false: 同一时间只能展开一个面板(默认值)
          * @type {boolean}
          * @default false
          * @example <zane-accordion multiple></zane-accordion>
         */
        "multiple"?: boolean;
        /**
          * 控制折叠面板的尺寸变体  - 'lg': 大尺寸，适合需要突出显示的内容 - 'md': 中等尺寸(默认值)，通用尺寸 - 'sm': 小尺寸，适合紧凑布局
          * @type {'lg' | 'md' | 'sm'}
          * @default 'md'
          * @reflectToAttr 属性值会同步到DOM元素上
          * @example <zane-accordion size="lg"></zane-accordion>
         */
        "size"?: 'lg' | 'md' | 'sm';
    }
    /**
     * 可折叠面板项(Accordion Item)组件
     * 作为zane-accordion的子组件使用，实现单个可折叠面板项的功能
     * @component 
     * @shadowDom 使用Shadow DOM封装组件样式
     */
    interface ZaneAccordionItem {
        /**
          * 禁用状态控制  - true: 禁用该折叠项，不可交互 - false: 正常状态(默认)
          * @type {boolean}
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 面板标题文本  当heading插槽无内容时显示此文本
          * @type {string}
         */
        "heading"?: string;
        /**
          * 面板点击事件  当面板被点击时触发，携带当前元素引用和状态
          * @type {EventEmitter}
          * @event zane-accordion-item--click
         */
        "onZane-accordion-item--click"?: (event: ZaneAccordionItemCustomEvent<any>) => void;
        /**
          * 面板展开状态  - true: 面板已展开 - false: 面板已折叠(默认)
          * @type {boolean}
          * @default false
          * @mutable 允许组件内部修改
          * @reflectToAttr 同步到DOM属性
         */
        "open"?: boolean;
    }
    /**
     * 头像组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 指定组件样式文件
     * @tag 定义组件在HTML中的标签名
     */
    interface ZaneAvatar {
        /**
          * 用户姓名（用于生成首字母头像）
          * @type {string}
          * @default ''
         */
        "name"?: string;
        /**
          * 头像尺寸（支持CSS单位）
          * @type {string}
          * @default '2rem'
         */
        "size"?: string;
        /**
          * 头像图片URL（优先级高于name）
          * @type {string}
          * @default ''
         */
        "src"?: string;
    }
    /**
     * 徽章组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 指定组件样式文件
     * @tag 定义组件在HTML中的标签名
     */
    interface ZaneBadge {
        /**
          * 徽章颜色主题
          * @type {'error'|'primary'|'secondary'|'success'|'warning'}
          * @default 'error'
          * @reflect 属性值会反射到DOM属性  枚举说明： - error: 错误状态（红色系） - primary: 主要状态（品牌主色系） - secondary: 次要状态（中性色系） - success: 成功状态（绿色系） - warning: 警告状态（黄色系）
         */
        "color"?: | 'error'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning';
        /**
          * 徽章显示内容
          * @type {string}
         */
        "content"?: string;
    }
    /**
     * 面包屑导航组件
     * 用于显示当前页面在网站层次结构中的位置，并提供快速导航功能。
     * @example ```html
     * <zane-breadcrumb>
     *   <zane-breadcrumb-item href="/home">首页</zane-breadcrumb-item>
     *   <zane-breadcrumb-item href="/products">产品</zane-breadcrumb-item>
     *   <zane-breadcrumb-item>当前页面</zane-breadcrumb-item>
     * </zane-breadcrumb>
     * ```
     * @Component 装饰器定义了组件的元数据
     * @property {boolean} shadow - 启用 Shadow DOM 封装
     * @property {string} styleUrl - 组件样式文件路径
     * @property {string} tag - 组件的自定义元素标签名
     */
    interface ZaneBreadcrumb {
    }
    /**
     * 面包屑导航项组件
     * 作为面包屑导航系统的单个项使用，必须作为`zane-breadcrumb`的子元素使用。
     * 支持链接导航、活动状态指示和Schema.org 结构化数据。
     * @example ```html
     * <!-- 活动状态项(当前页面) -->
     * <zane-breadcrumb-item active>
     *   当前页面
     * </zane-breadcrumb-item>
     * <!-- 可点击链接项 -->
     * <zane-breadcrumb-item href="/products" position="2">
     *   产品列表
     * </zane-breadcrumb-item>
     * ```
     * @Component 配置项说明：
     * @property {boolean} shadow - 启用Shadow DOM封装
     * @property {string} styleUrl - 组件样式文件路径
     * @property {string} tag - 自定义元素标签名
     */
    interface ZaneBreadcrumbItem {
        /**
          * 活动状态标识  表示当前面包屑项是否为活动状态(通常是当前页面)。 当设置为true时，该项会以非链接形式呈现。
          * @type {boolean}
          * @default false
          * @memberof BreadcrumbItem
         */
        "active"?: boolean;
        /**
          * 链接目标地址  指定面包屑项的跳转链接。未设置时表示该项不可点击。 当active为true时，此属性会被忽略。
          * @type {string}
          * @memberof BreadcrumbItem
         */
        "href"?: string;
        /**
          * 项在列表中的位置  表示该项在面包屑导航中的序号位置(从1开始)。 用于Schema.org 微数据和样式控制。
          * @type {string}
          * @memberof BreadcrumbItem
         */
        "position"?: string;
        /**
          * 链接打开方式  指定链接的打开方式，等同于HTML的target属性。 常用值: '_blank'|'_self'|'_parent'|'_top'
          * @type {string}
          * @memberof BreadcrumbItem
         */
        "target"?: string;
    }
    /**
     * 多功能按钮组件
     * 提供丰富的交互样式和状态管理，支持：
     * - 多种视觉变体(variant)
     * - 完整的大小(size)控制
     * - 主题颜色(color)系统
     * - 暗黑模式适配
     * - 完善的ARIA可访问性
     * - 图标集成
     * - 加载状态
     * @example 基础使用
     * ```html
     * <zane-button>普通按钮</zane-button>
     * <zane-button variant="outline">轮廓按钮</zane-button>
     * <zane-button icon="settings" iconAlign="start">带图标按钮</zane-button>
     * ```
     * @example 高级使用
     * ```html
     * <zane-button
     * color="danger"
     * darkModeColor="warning"
     * variant="ghost.simple"
     * size="xl"
     * disabled
     * disabledReason="权限不足"
     * >
     * 危险操作
     * </zane-button>
     * ```
     */
    interface ZaneButton {
        /**
          * 附加数据对象  会在点击事件中回传，用于携带上下文数据
          * @type {any}
         */
        "appendData"?: any;
        /**
          * 按钮主题色  支持预设颜色或自定义颜色名称(需在CSS中定义对应变量)
          * @type {'black' | 'danger' | 'primary' | 'secondary' | 'success' | 'warning' | 'white'}
          * @default 'primary'
          * @example 预设颜色 - 'primary': 品牌主色 - 'danger': 危险操作红色 - 'success': 成功操作绿色
          * @example 自定义颜色 需在CSS中定义: --color-custom和--color-custom-10等变量
         */
        "color"?: | 'black'
    | 'danger'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning'
    | 'white';
        /**
          * ARIA 可访问性配置 可动态修改并反映到DOM属性
          * @type {Object}
          * @default {}
         */
        "configAria"?: any;
        /**
          * 暗黑模式下的替代颜色  当检测到暗黑模式时自动切换为此颜色
          * @type {'black' | 'danger' | 'primary' | 'secondary' | 'success' | 'warning' | 'white'}
         */
        "darkModeColor"?: | 'black'
    | 'danger'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning'
    | 'white';
        /**
          * 按钮禁用状态
          * @type {boolean}
          * @default false
          * @reflectToAttr
         */
        "disabled"?: boolean;
        /**
          * 禁用原因说明  会以ARIA方式提供给辅助技术，提升可访问性
          * @type {string}
          * @default ''
         */
        "disabledReason"?: string;
        /**
          * 链接地址（使按钮表现为链接） 设置后按钮渲染为 <a> 标签
         */
        "href"?: string;
        /**
          * 图标名称  指定要显示的图标，需要配合zane-icon组件使用
          * @type {string}
         */
        "icon"?: string;
        /**
          * 图标对齐方式  控制图标相对于文本的位置
          * @type {'end' | 'start'}
          * @default 'end'
          * @description - 'start': 图标在文本左侧 - 'end': 图标在文本右侧
         */
        "iconAlign"?: 'end' | 'start';
        /**
          * 按钮点击事件  触发时会返回包含appendData的事件对象
          * @event zane-button--click
          * @type {EventEmitter<{ appendData: any }>}
         */
        "onZane-button--click"?: (event: ZaneButtonCustomEvent<{
    appendData: any;
  }>) => void;
        /**
          * 按钮选中状态  常用于按钮组或切换场景
          * @type {boolean}
          * @default false
          * @reflectToAttr
         */
        "selected"?: boolean;
        /**
          * 显示加载指示器  设置为true时会显示旋转加载图标并禁用交互
          * @type {boolean}
          * @default false
         */
        "showLoader"?: boolean;
        /**
          * 按钮尺寸  支持从xs到2xl共6种预设尺寸
          * @type {'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl'}
          * @default 'md'
          * @reflectToAttr 
          * @description - xs: 超小尺寸(24px) - sm: 小尺寸(32px) - md: 中尺寸(40px) - lg: 大尺寸(48px) - xl: 超大尺寸(56px) - 2xl: 特大尺寸(64px)
         */
        "size"?: '2xl' | 'lg' | 'md' | 'sm' | 'xl' | 'xs';
        /**
          * 链接打开目标（当href存在时有效）
          * @default '_self'
         */
        "target"?: string;
        /**
          * 点击事件节流延迟(ms)
          * @default 200
         */
        "throttleDelay"?: number;
        /**
          * 是否为切换型按钮 启用时点击会保持激活状态
          * @default false
         */
        "toggle"?: boolean;
        /**
          * 按钮类型（当作为表单按钮时） - 'button': 普通按钮 - 'reset': 表单重置按钮 - 'submit': 表单提交按钮
          * @default 'button'
         */
        "type"?: 'button' | 'reset' | 'submit';
        /**
          * 按钮视觉变体  支持基础变体和带.simple后缀的简化变体
          * @type {    * 'default' | 'default.simple'  | 'ghost' | 'ghost.simple'  | 'light' | 'light.simple'  | 'link' | 'link.simple'  | 'neo' | 'neo.simple'  | 'outline' | 'outline.simple' }
          * @default 'default'
          * @reflectToAttr 
          * @description - default: 实心填充按钮 - ghost: 透明背景按钮 - light: 浅色背景按钮 - link: 链接样式按钮 - neo: 新拟态风格按钮 - outline: 边框轮廓按钮 - .simple: 简化版变体(减少视觉效果)
         */
        "variant"?: | 'default'
    | 'default.simple'
    | 'ghost'
    | 'ghost.simple'
    | 'light'
    | 'light.simple'
    | 'link'
    | 'link.simple'
    | 'neo'
    | 'neo.simple'
    | 'outline'
    | 'outline.simple';
    }
    /**
     * 按钮组容器组件
     */
    interface ZaneButtonGroup {
    }
    /**
     * 卡片组件
     * 提供可自定义阴影级别的卡片容器
     */
    interface ZaneCard {
        /**
          * 卡片阴影级别
          * @type {'lg' | 'md' | 'sm' | 'xl' | 'xs' | 'xxl' | undefined} - 'xs': 超小阴影 (extra small) - 'sm': 小阴影 (small) - 'md': 中等阴影 (medium，默认未指定时) - 'lg': 大阴影 (large) - 'xl': 超大阴影 (extra large) - 'xxl': 特大阴影 (extra extra large) - undefined: 无阴影 阴影级别应在card.scss中定义对应的box-shadow值
         */
        "shadowLevel"?: 'lg' | 'md' | 'sm' | 'xl' | 'xs' | 'xxl' | undefined;
    }
    /**
     * 自定义复选框组件
     * 实现可定制的复选框控件，支持选中/未选/中间态三种状态，
     * 提供完整的ARIA支持、键盘交互和事件响应机制。
     * @example ```html
     * <zane-checkbox
     *   label="同意协议"
     *   size="md"
     *   layer="02"
     *   rounded
     *   required
     * ></zane-checkbox>
     * ```
     */
    interface ZaneCheckbox {
        /**
          * ARIA属性配置对象  用于动态设置ARIA属性（如aria-label, aria-describedby等）， 组件会自动收集元素上所有`aria-*`属性到该对象。
          * @defaultValue `{}`
         */
        "configAria"?: any;
        /**
          * 禁用状态  当设置为`true`时，组件不可交互且视觉上变灰
          * @defaultValue `false`
         */
        "disabled"?: boolean;
        /**
          * 中间态状态  当设置为`true`时显示"-"图标，表示部分选中状态， 与`value`属性互斥（中间态时`value`应为false）
          * @defaultValue `false`
         */
        "intermediate"?: boolean;
        /**
          * 复选框标签文本
         */
        "label"?: string;
        /**
          * 视觉层级  控制组件在UI中的层级深度，影响阴影和背景色： - `01`: 表层组件（最高层级） - `02`: 中层组件 - `background`: 背景层组件（最低层级）
         */
        "layer"?: '01' | '02' | 'background';
        /**
          * 表单字段名（自动生成）
          * @default `zane-input-${this.gid}`
         */
        "name"?: string;
        /**
          * 失去焦点事件
         */
        "onZane-checkbox--blur"?: (event: ZaneCheckboxCustomEvent<any>) => void;
        /**
          * 值变更事件
         */
        "onZane-checkbox--change"?: (event: ZaneCheckboxCustomEvent<any>) => void;
        /**
          * 获得焦点事件
         */
        "onZane-checkbox--focus"?: (event: ZaneCheckboxCustomEvent<any>) => void;
        /**
          * 只读状态
          * @default false
         */
        "readonly"?: boolean;
        /**
          * 必填状态
          * @default false
         */
        "required"?: boolean;
        /**
          * 圆角样式
          * @default false
         */
        "rounded"?: boolean;
        /**
          * 尺寸规格  - `lg`: 大尺寸(48px) - `md`: 中尺寸(40px) - `sm`: 小尺寸(32px)
          * @defaultValue `'md'`
         */
        "size"?: 'lg' | 'md' | 'sm';
        /**
          * 选中状态  当设置为`true`时显示选中图标， 与`intermediate`属性互斥
          * @defaultValue `false`
         */
        "value"?: boolean;
    }
    /**
     * 基于Monaco Editor的代码编辑器组件
     * 提供语法高亮、智能提示等专业编辑功能，支持暗黑/亮色主题切换，
     * 内置防抖机制优化高频变更事件，适用于代码片段展示和实时编辑场景。
     * @example ```html
     * <zane-code-editor
     *   language="javascript"
     *   minimap
     *   debounce="500"
     *   value="console.log('Hello  World')"
     * ></zane-code-editor>
     * ```
     */
    interface ZaneCodeEditor {
        /**
          * 变更事件防抖时间（毫秒）  避免高频输入时频繁触发变更事件， 设置为0可禁用防抖
          * @defaultValue `250`
         */
        "debounce"?: number;
        /**
          * 禁用状态  禁用时编辑器不可编辑但可滚动查看内容
          * @defaultValue `false`
         */
        "disabled"?: boolean;
        /**
          * 编程语言支持  支持的语法类型： - `html`: HTML/XML标记语言 - `javascript`: JavaScript/TypeScript - `json`: JSON数据格式
          * @defaultValue `'javascript'`
         */
        "language"?: 'html' | 'javascript' | 'json';
        /**
          * 类型声明库源码  用于提供智能提示的类型定义， 格式应为对应语言的类型声明字符串
         */
        "libSource"?: any;
        /**
          * 行号显示控制  - `on`: 显示行号 - `off`: 隐藏行号
          * @defaultValue `'on'`
         */
        "lineNumbers"?: 'off' | 'on';
        /**
          * 缩略图显示  在编辑器右侧显示代码导航缩略图
          * @defaultValue `false`
         */
        "minimap"?: boolean;
        /**
          * 表单字段名（自动生成）
          * @default `zane-input-${this.gid}`
         */
        "name"?: string;
        /**
          * 内容变更事件（带防抖）
         */
        "onZane-code-editor--change"?: (event: ZaneCodeEditorCustomEvent<any>) => void;
        /**
          * 只读模式  开启后禁止编辑但保留代码高亮
          * @defaultValue `false`
         */
        "readonly"?: boolean;
        /**
          * 必填状态
          * @defaultValue `false`
         */
        "required"?: boolean;
        /**
          * 编辑器内容  双向绑定的代码文本值
         */
        "value"?: string;
    }
    /**
     * 代码高亮组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 组件样式表路径
     * @tag 组件自定义标签名称
     */
    interface ZaneCodeHighlighter {
        /**
          * 是否格式化代码
          * @Prop 装饰器表示这是组件的公开属性
          * @mutable 表示属性可变
          * @reflect 表示属性值会反映到DOM属性上
         */
        "format"?: boolean;
        /**
          * 是否隐藏复制按钮
          * @Prop 默认值为false
          * @default false
         */
        "hideCopy"?: boolean;
        /**
          * 是否为内联模式（非块级显示）
          * @Prop 装饰器，reflect表示会反映到DOM属性上
          * @default false
         */
        "inline"?: boolean;
        /**
          * 代码语言类型
          * @Prop 装饰器，reflect表示会反映到DOM属性上 默认值为'javascript'
          * @default 'javascript'
         */
        "language"?: Language;
        /**
          * 是否显示行号
          * @Prop 装饰器，reflect表示会反映到DOM属性上
          * @default false
         */
        "lineNumbers"?: boolean;
        /**
          * 代码内容
          * @Prop 装饰器
          * @default ''
         */
        "value"?: string;
    }
    /**
     * 容器布局组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 组件样式表路径
     * @tag 组件自定义标签名称
     */
    interface ZaneContainer {
        /**
          * 容器尺寸选项 - 'full': 全宽容器 - 'lg': 大号容器 - 'max': 最大宽度容器 - 'md': 中等容器 (默认值) - 'sm': 小号容器 - 'xl': 超大容器
          * @Prop 装饰器表示这是组件的公开属性
          * @reflect 表示属性值会反映到DOM属性上 默认值为 'full'
          * @default 'full'
         */
        "size"?: 'full' | 'lg' | 'max' | 'md' | 'sm' | 'xl';
    }
    /**
     * 当前时间显示组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 组件样式表路径
     * @tag 组件自定义标签名称
     */
    interface ZaneCurrentTime {
        /**
          * 时区设置 遵循IANA时区数据库的时区字符串格式 例如: "Asia/Shanghai", "America/New_York"
          * @Prop 装饰器表示这是组件的公开属性 未指定时使用运行环境的默认时区
         */
        "timezone"?: string;
    }
    /**
     * 日期选择器组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 组件样式表路径
     * @tag 组件自定义标签名称
     */
    interface ZaneDatePicker {
        /**
          * ARIA无障碍属性配置对象 用于存储所有aria-*属性
          * @Prop 装饰器表示这是组件的公开属性
          * @mutable 表示属性可变
          * @reflect 表示属性值会反映到DOM属性上
          * @default {}
         */
        "configAria"?: any;
        /**
          * 事件防抖时间(毫秒) 用于控制change事件的触发频率
          * @Prop 默认值为300ms
          * @default 300
         */
        "debounce"?: number;
        /**
          * 是否禁用组件
          * @Prop 装饰器，reflect表示会反映到DOM属性上 默认值为false
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 辅助文本 显示在输入框下方的帮助信息
          * @Prop
         */
        "helperText"?: string;
        /**
          * 是否为内联模式
          * @Prop 装饰器，reflect表示会反映到DOM属性上
          * @default false
         */
        "inline"?: boolean;
        /**
          * 是否为无效状态
          * @Prop 
          * @default false
         */
        "invalid"?: boolean;
        /**
          * 无效状态提示文本
          * @Prop
         */
        "invalidText"?: string;
        /**
          * 标签文本
          * @Prop
         */
        "label"?: string;
        /**
          * 输入框name属性 默认值为"zane-input-{唯一ID}"
          * @Prop 
          * @default `zane-input-${this.gid}`
         */
        "name"?: string;
        /**
          * 失去焦点事件
          * @Event 装饰器定义自定义事件 事件名称为'zane-date-picker--blur'
         */
        "onZane-date-picker--blur"?: (event: ZaneDatePickerCustomEvent<any>) => void;
        /**
          * 值变化事件(带防抖)
          * @Event 装饰器定义自定义事件 事件名称为'zane-date-picker--change'
         */
        "onZane-date-picker--change"?: (event: ZaneDatePickerCustomEvent<any>) => void;
        /**
          * 获得焦点事件
          * @Event 装饰器定义自定义事件 事件名称为'zane-date-picker--focus'
         */
        "onZane-date-picker--focus"?: (event: ZaneDatePickerCustomEvent<any>) => void;
        /**
          * 输入事件(实时触发)
          * @Event 装饰器定义自定义事件 事件名称为'zane-date-picker--input'
         */
        "onZane-date-picker--input"?: (event: ZaneDatePickerCustomEvent<any>) => void;
        /**
          * 占位符文本
          * @Prop
         */
        "placeholder"?: string;
        /**
          * 是否为只读状态
          * @Prop 装饰器，reflect表示会反映到DOM属性上
          * @default false
         */
        "readonly"?: boolean;
        /**
          * 是否为必填项
          * @Prop 装饰器，reflect表示会反映到DOM属性上
          * @default false
         */
        "required"?: boolean;
        /**
          * 组件尺寸 - 'lg': 大尺寸 - 'md': 中等尺寸(默认) - 'sm': 小尺寸
          * @Prop 装饰器，reflect表示会反映到DOM属性上
          * @default 'md'
         */
        "size"?: 'lg' | 'md' | 'sm';
        /**
          * 当前值 可以是null、number或string类型
          * @Prop 装饰器，mutable表示属性可变
          * @default ''
         */
        "value"?: null | number | string;
        /**
          * 是否为警告状态
          * @Prop 
          * @default false
         */
        "warn"?: boolean;
        /**
          * 警告状态提示文本
          * @Prop
         */
        "warnText"?: string;
    }
    /**
     * 分割线组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 组件样式表路径
     * @tag 组件自定义标签名称
     */
    interface ZaneDivider {
        /**
          * 是否为垂直方向
          * @Prop 装饰器，reflect表示会反映到DOM属性上 默认值为false(水平方向)
          * @default false
         */
        "vertical"?: boolean;
    }
    /**
     * 下拉菜单组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 组件样式表路径
     * @tag 组件自定义标签名称
     */
    interface ZaneDropdown {
        /**
          * 是否禁用下拉菜单
          * @Prop 默认值为false
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 是否为受控模式 在受控模式下，组件的状态完全由外部控制
          * @Prop 装饰器，reflect表示会反映到DOM属性上
          * @default false
         */
        "managed"?: boolean;
        /**
          * 下拉菜单关闭事件
          * @Event 装饰器定义自定义事件 事件名称为'zane-dropdown--close'
         */
        "onZane-dropdown--close"?: (event: ZaneDropdownCustomEvent<any>) => void;
        /**
          * 菜单项点击事件
          * @Event 装饰器定义自定义事件 事件名称为'zane-dropdown--item-click'
         */
        "onZane-dropdown--item-click"?: (event: ZaneDropdownCustomEvent<any>) => void;
        /**
          * 下拉菜单打开事件
          * @Event 装饰器定义自定义事件 事件名称为'zane-dropdown--open'
         */
        "onZane-dropdown--open"?: (event: ZaneDropdownCustomEvent<any>) => void;
        /**
          * 下拉菜单是否打开
          * @Prop 装饰器，mutable表示属性可变，reflect表示会反映到DOM属性上
          * @default false
         */
        "open"?: boolean;
        /**
          * 下拉菜单位置选项 多个位置用逗号分隔，按优先级排序
          * @Prop 装饰器，reflect表示会反映到DOM属性上 默认值为'bottom-start,top-start,bottom-end,top-end'
          * @default 'bottom-start,top-start,bottom-end,top-end'
         */
        "placements"?: string;
        /**
          * 触发下拉菜单的方式 - 'click': 点击触发 - 'hover': 悬停触发 - 'manual': 手动控制
          * @Prop 装饰器，reflect表示会反映到DOM属性上 默认值为'click'
          * @default 'click'
         */
        "trigger"?: 'click' | 'hover' | 'manual';
    }
    /**
     * 下拉菜单内容组件（需与zane-dropdown配合使用）
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 组件样式表路径
     * @tag 组件自定义标签名称
     */
    interface ZaneDropdownMenu {
    }
    /**
     * 空状态(Empty State)组件
     * 用于展示无数据时的占位内容，包含插图、标题、描述和操作按钮
     * @component 
     * @shadowDom 使用Shadow DOM封装组件样式
     * @implements ComponentInterface 实现Stencil组件生命周期接口
     */
    interface ZaneEmptyState {
        /**
          * 操作按钮文本  当设置此属性时会显示操作按钮
          * @type {string}
          * @reflectToAttr 同步到DOM属性
         */
        "action"?: string;
        /**
          * 禁用操作按钮  - true: 禁用操作按钮 - false: 启用操作按钮(默认)
          * @type {boolean}
          * @default false
         */
        "actionDisabled"?: boolean;
        /**
          * 操作按钮跳转链接  设置后会渲染为<a>标签而非<button>
          * @type {string}
         */
        "actionUrl"?: string;
        /**
          * 操作按钮样式变体  - 'default': 默认填充样式 - 'ghost': 幽灵按钮样式 - 'outline': 描边按钮样式(默认)
          * @type {'default' | 'ghost' | 'outline'}
          * @default 'default'
         */
        "actionVariant"?: 'default' | 'ghost' | 'outline';
        /**
          * 描述文本  支持HTML内容，会自动进行XSS过滤
          * @type {string}
          * @reflectToAttr 同步到DOM属性
         */
        "description"?: string;
        /**
          * 标题文本
          * @type {string}
          * @reflectToAttr 同步到DOM属性
         */
        "headline"?: string;
        /**
          * 插图名称  对应assets/images/empty-state目录下的SVG文件名
          * @type {string}
          * @default 'no-document'
          * @reflectToAttr 同步到DOM属性
         */
        "illustration"?: string;
    }
    /**
     * 页脚(Footer)组件
     * 提供可定制的页脚布局，支持多种变体和插槽内容
     * @component 
     * @shadowDom 使用Shadow DOM封装组件样式
     */
    interface ZaneFooter {
        /**
          * 页脚样式变体  通过CSS类名控制不同样式变体 默认值'simple'会生成'variant-simple'类名
          * @type {string}
          * @default 'simple'
          * @reflectToAttr 同步到DOM属性
         */
        "variant"?: string;
        /**
          * 版权年份  默认为当前年份，可通过属性覆盖
          * @type {number}
          * @default new Date().getFullYear()
         */
        "year"?: number;
    }
    /**
     * 页脚版权(Footer Copyright)组件
     * 用于展示标准版权声明，包含年份、版权所有者链接和保留权利声明
     * @component 
     * @shadowDom 使用Shadow DOM封装组件样式
     */
    interface ZaneFooterCopyright {
        /**
          * 版权所有者名称  将显示为可点击链接（当copyrightHref设置时）
          * @type {string}
         */
        "copyright"?: string;
        /**
          * 版权所有者链接  设置后会将版权名称渲染为可点击链接
          * @type {string}
         */
        "copyrightHref"?: string;
        /**
          * 版权年份  默认为当前年份，可通过属性覆盖
          * @type {number}
          * @default new Date().getFullYear()
         */
        "year"?: number;
    }
    /**
     * 页脚链接(Footer Links)组件
     * 用于展示页脚导航链接列表，支持动态链接数据传入
     * @component 
     * @shadowDom 使用Shadow DOM封装组件样式
     */
    interface ZaneFooterLinks {
        /**
          * 链接数据数组  支持两种格式： 1. 对象数组格式: [{href: string, name: string}] 2. JSON字符串格式: '[{"href":"...","name":"..."}]'
          * @type {(Array<{href: string, name: string}>|string)}
          * @default []
         */
        "links"?: { href: string; name: string }[]|string;
    }
    /**
     * 表单控件容器组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 组件样式表路径
     * @tag 组件自定义标签名称
     */
    interface ZaneFormControl {
        /**
          * 辅助文本 显示在表单控件下方的帮助信息
          * @Prop
         */
        "helperText"?: string;
        /**
          * 是否为内联布局
          * @Prop 装饰器，reflect表示会反映到DOM属性上 默认值为false
          * @default false
         */
        "inline"?: boolean;
        /**
          * 是否为无效状态
          * @Prop 
          * @default false
         */
        "invalid"?: boolean;
        /**
          * 无效状态提示文本
          * @Prop
         */
        "invalidText"?: string;
        /**
          * 标签文本
          * @Prop
         */
        "label"?: string;
        /**
          * 是否为必填项
          * @Prop 
          * @default false
         */
        "required"?: boolean;
        /**
          * 是否显示骨架屏 用于加载状态
          * @Prop 
          * @default false
         */
        "skeleton"?: boolean;
        /**
          * 是否为警告状态
          * @Prop 
          * @default false
         */
        "warn"?: boolean;
        /**
          * 警告状态提示文本
          * @Prop
         */
        "warnText"?: string;
    }
    /**
     * 头部组件，提供可定制的页面顶部导航栏
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 指定组件样式文件
     * @tag 定义组件在HTML中的标签名
     */
    interface ZaneHeader {
        /**
          * 头部组件的颜色主题
          * @Prop 可从外部设置的属性
          * @type {'black' | 'danger' | 'primary' | 'secondary' | 'success' | 'warning' | 'white' | string} - 'black': 黑色主题 - 'danger': 危险/错误状态颜色 - 'primary': 主品牌色 - 'secondary': 次要颜色 - 'success': 成功状态颜色 - 'warning': 警告状态颜色 - 'white': 白色主题 - string: 自定义颜色值
          * @default 'black'
         */
        "color"?: | 'black'
    | 'danger'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning'
    | 'white'
    | string;
        /**
          * 暗黑模式下的颜色主题
          * @Prop 可选属性，暗黑模式下的替代颜色
          * @type {'black' | 'danger' | 'primary' | 'secondary' | 'success' | 'warning' | 'white' | string} 枚举值与color属性相同
         */
        "darkModeColor"?: | 'black'
    | 'danger'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning'
    | 'white'
    | string;
        /**
          * 是否启用浮动模式
          * @Prop 控制头部是否浮动在内容上方
          * @default false
         */
        "float"?: boolean;
    }
    /**
     * 头部操作按钮组件，用于在头部导航栏中创建可交互的操作项
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 指定组件样式文件
     * @tag 定义组件在HTML中的标签名
     */
    interface ZaneHeaderAction {
        /**
          * 徽标内容
          * @Prop 可从外部设置的属性
          * @default '_self'
         */
        "badge"?: string;
        /**
          * ARIA可访问性配置
          * @Prop 可从外部设置的属性
          * @mutable 允许组件内部修改
          * @reflect 将属性值反映到DOM属性
          * @default {}
         */
        "configAria"?: any;
        /**
          * 链接地址
          * @Prop 可从外部设置的属性
          * @reflect 将属性值反映到DOM属性
         */
        "href"?: string;
        /**
          * 图标名称
          * @Prop 可从外部设置的属性
         */
        "icon"?: string;
        /**
          * 是否选中状态
          * @Prop 可从外部设置的属性
          * @default false
         */
        "selected"?: boolean;
        /**
          * 按钮尺寸
          * @Prop 可从外部设置的属性
          * @type {'lg' | 'md' | 'none' | 'sm' | 'xl' | 'xxl'} - 'lg': 大尺寸 - 'md': 中等尺寸(默认) - 'none': 无特定尺寸 - 'sm': 小尺寸 - 'xl': 超大尺寸 - 'xxl': 特大尺寸
          * @default 'md'
         */
        "size"?: 'lg' | 'md' | 'none' | 'sm' | 'xl' | 'xxl';
        /**
          * 链接打开方式
          * @Prop 可从外部设置的属性
          * @default '_self'
         */
        "target"?: string;
    }
    /**
     * 头部品牌标识组件，用于显示网站/应用的品牌标识和名称
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 指定组件样式文件
     * @tag 定义组件在HTML中的标签名
     */
    interface ZaneHeaderBrand {
        /**
          * 品牌链接地址
          * @Prop 可从外部设置的属性
          * @default '#' 默认链接到页面顶部
         */
        "href"?: string;
        /**
          * 品牌logo图片路径
          * @Prop 可从外部设置的属性 支持SVG和普通图片格式
         */
        "logo"?: string;
        /**
          * 品牌名称
          * @Prop 可从外部设置的属性
         */
        "name"?: string;
        /**
          * 品牌副标题
          * @Prop 可从外部设置的属性
         */
        "subTitle"?: string;
    }
    /**
     * 基于 Tiptap 的富文本编辑器组件，支持：
     * - HTML 源码编辑
     * - Mention（@提及）自动补全功能
     * - 内置工具条（加粗、斜体、列表等）
     * - 主题切换（vs-dark / vs-light）
     * - 可视化编辑与 HTML 源码切换
     * - 与表单集成（name、required、readonly 等属性）
     */
    interface ZaneHtmlEditor {
        /**
          * 设置事件触发的防抖时间（毫秒），用于优化 `zaneChange` 事件的触发频率。 默认值：250。
          * @default 250
         */
        "debounce"?: number;
        /**
          * 控制编辑器是否禁用。 - `true`：编辑器不可编辑。 - `false`：编辑器可编辑（默认）。
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 设置组件的层级样式类，用于区分不同视觉层级的组件。 可选值： - '01'：主层级，视觉权重最高（如模态框） - '02'：次级层级，用于普通组件 - 'background'：背景层级，通常用于遮罩、背景等
         */
        "layer"?: '01' | '02' | 'background';
        /**
          * 设置是否在代码编辑器中显示行号。 - 'on'：显示行号（默认） - 'off'：不显示行号
          * @default 'on'
         */
        "lineNumbers"?: 'off' | 'on';
        /**
          * @default []
         */
        "mentions"?: { label: string; value: string }[];
        /**
          * 配置 Mention 提及功能的搜索方式。 - 'contains'：使用本地数组进行模糊匹配（适合静态数据） - 'managed'：通过事件 `zane-html-editor--search` 获取动态数据（适合异步搜索）
          * @default 'contains'
         */
        "mentionsSearch"?: 'contains' | 'managed';
        /**
          * 表单字段名称，用于提交或获取数据。 默认值：`zane-input-<index>`，其中 `<index>` 为组件唯一标识符。
          * @default `zane-input-${this.gid}`
         */
        "name"?: string;
        /**
          * 当编辑器内容发生变化时触发该事件。 事件参数格式：`{ value: string }`，其中 `value` 为当前 HTML 内容。
         */
        "onZane-html-editor--change"?: (event: ZaneHtmlEditorCustomEvent<any>) => void;
        /**
          * 当 Mention 提及功能需要异步搜索时触发该事件。 事件参数格式：`{ query: string, callback: (mentions: { label: string; value: string }[]) => void }`。 开发者需通过 `callback` 返回匹配的 Mention 数据。
         */
        "onZane-html-editor--search"?: (event: ZaneHtmlEditorCustomEvent<any>) => void;
        /**
          * 编辑器的占位文本（未输入内容时显示的提示文本）。
         */
        "placeholder"?: string;
        /**
          * 设置编辑器是否为只读模式。 - `true`：用户不能修改内容 - `false`：用户可编辑（默认）
          * @default false
         */
        "readonly"?: boolean;
        /**
          * 设置是否为必填字段，通常用于表单验证。 - `true`：必须输入 - `false`：非必填（默认）
          * @default false
         */
        "required"?: boolean;
        /**
          * @default true
         */
        "showSuggestionCharacter"?: boolean;
        /**
          * @default true
         */
        "showToolbar"?: boolean;
        /**
          * @default '@'
         */
        "suggestionCharacter"?: string;
        /**
          * 设置编辑器的外观主题。 - 'vs-dark'：深色主题 - 'vs-light'：浅色主题（默认）
          * @default 'vs-light'
         */
        "theme"?: 'vs-dark' | 'vs-light';
        /**
          * 设置或获取富文本编辑器的当前内容值（HTML 字符串）。
         */
        "value"?: string;
    }
    /**
     * 图标组件（zane-icon）
     * 该组件基于 Stencil 构建，用于按需异步加载并渲染 SVG 图标。
     * 支持通过属性 name 指定图标名称，通过 size 控制图标尺寸。
     * 组件内部使用 Shadow DOM 实现样式隔离，并暴露 CSS 自定义属性
     * `--zane-icon-size` 供外部覆盖默认尺寸。
     * @example <!-- 基础用法 -->
     * <zane-icon name="home" size="md"></zane-icon>
     * <!-- 自定义尺寸 -->
     * <zane-icon name="user" size="32px"></zane-icon>
     */
    interface ZaneIcon {
        /**
          * 图标名称，对应图标库中的文件名。 当该值发生变化时，组件会重新异步加载对应 SVG。
          * @example <zane-icon name="arrow-down"></zane-icon>
         */
        "name"?: string;
        /**
          * 图标尺寸。 - 可选内置枚举：'xs' | 'sm' | 'md' | 'lg' | 'xl' - 也可传入任意合法的 CSS 长度值（如 "24px"、"1.5rem"）或纯数字字符串（如 "2"）。
          * @example <zane-icon size="lg"></zane-icon> <zane-icon size="32px"></zane-icon>
         */
        "size"?: string;
    }
    /**
     * 自适应主题图片组件（zane-image）
     * 该组件能够根据当前系统的明暗主题自动切换显示的图片资源。
     * 当检测到处于暗色模式时，优先使用 darkSrc 指定的暗色主题图片；
     * 否则使用 src 指定的默认图片。
     * 组件内部通过监听主题变化事件实现实时切换，无需手动刷新。
     * @example <!-- 基础用法 -->
     * <zane-image
     *   src="assets/logo-light.svg"
     *   dark-src="assets/logo-dark.svg"
     *   image-title="公司 Logo">
     * </zane-image>
     */
    interface ZaneImage {
        /**
          * 暗色主题下的图片地址。 当系统处于暗色模式且该值存在时，将优先渲染此图片。
          * @example dark-src="assets/banner-dark.png"
         */
        "darkSrc"?: string;
        /**
          * 图片的替代文本（alt 属性）。 用于无障碍访问及图片加载失败时的占位说明。
          * @example image-title="用户头像"
         */
        "imageTitle"?: string;
        "src"?: string;
    }
    /**
     * 自定义输入框组件 zane-input
     * 实现功能：
     * 1. 支持多种输入类型（文本、密码、邮箱等）及尺寸控制
     * 2. 包含表单验证状态（错误/警告）及辅助文本展示
     * 3. 提供前后插槽(start/end)扩展能力
     * 4. 支持防抖事件处理与无障碍访问
     * 5. 集成密码可见性切换功能
     */
    interface ZaneInput {
        /**
          * 自动填充控制 - `on`: 允许浏览器自动填充 - `off`: 禁用自动填充
          * @default 'off'
         */
        "autocomplete"?: 'off' | 'on';
        /**
          * 动态ARIA属性配置对象 - 收集宿主元素上所有`aria-*`属性并转移到内部input元素 - 需通过mutable允许组件内修改
          * @default {}
         */
        "configAria"?: any;
        /**
          * 输入内容变化事件(zane-input--change)的防抖延迟(ms)
          * @default 300
         */
        "debounce"?: number;
        /**
          * 禁用状态 - 设置后阻止用户交互
          * @attr 
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 辅助说明文本 - 在非错误/警告状态下显示
         */
        "helperText"?: string;
        /**
          * 行内布局模式 - 设置后标签与输入框水平排列
          * @attr 
          * @default false
         */
        "inline"?: boolean;
        /**
          * 验证失败状态 - 激活时会显示invalidText并应用错误样式
          * @default false
         */
        "invalid"?: boolean;
        /**
          * 验证失败提示文本 - 当invalid=true时显示
         */
        "invalidText"?: string;
        /**
          * 输入框标签文本 - 显示在输入区域上方
         */
        "label"?: string;
        /**
          * 输入框名称 - 用于表单提交时识别字段 - 默认生成唯一ID: zane-input-{gid}
          * @default `zane-input-${this.gid}`
         */
        "name"?: string;
        /**
          * 失去焦点事件
          * @event zane-input--blur
          * @param ev - 原生焦点事件对象
         */
        "onZane-input--blur"?: (event: ZaneInputCustomEvent<any>) => void;
        /**
          * 防抖后的值变更事件
          * @event zane-input--change
          * @param ev - 键盘事件对象(防抖处理)
         */
        "onZane-input--change"?: (event: ZaneInputCustomEvent<any>) => void;
        /**
          * 获得焦点事件
          * @event zane-input--focus
          * @param ev - 原生焦点事件对象
         */
        "onZane-input--focus"?: (event: ZaneInputCustomEvent<any>) => void;
        /**
          * 实时输入事件
          * @event zane-input--input
          * @param ev - 每次按键触发的键盘事件
         */
        "onZane-input--input"?: (event: ZaneInputCustomEvent<any>) => void;
        /**
          * 占位提示文本
         */
        "placeholder"?: string;
        /**
          * 只读状态 - 允许查看但禁止修改内容
          * @attr 
          * @default false
         */
        "readonly"?: boolean;
        /**
          * 必填标识 - 显示红色星号(*)并触发浏览器原生验证
          * @attr 
          * @default false
         */
        "required"?: boolean;
        /**
          * 尺寸控制 - `sm`: 小尺寸(高度32px) - `md`: 中尺寸(高度40px) - `lg`: 大尺寸(高度48px)
          * @default 'md'
          * @attr
         */
        "size"?: 'lg' | 'md' | 'sm';
        /**
          * 骨架屏模式 - 加载状态时显示灰色占位块
          * @default false
         */
        "skeleton"?: boolean;
        /**
          * 输入类型 - `text`: 普通文本 - `password`: 密码(带可见切换按钮) - `email`: 邮箱格式验证 - `tel`: 电话号码输入
          * @default 'text'
         */
        "type"?: 'email' | 'password' | 'tel' | 'text';
        /**
          * 输入框值 - 使用双向数据绑定
         */
        "value"?: string;
        /**
          * 警告状态 - 非致命性错误提示，显示warnText
          * @default false
         */
        "warn"?: boolean;
        /**
          * 警告提示文本 - 当warn=true时显示
         */
        "warnText"?: string;
    }
    /**
     * 双模式URL输入组件
     * @component zane-input-url
     * @tags form-control, input, url
     * @shadow true
     * @description 提供URL输入与预览双模式交互的输入组件。在展示模式下显示可点击的URL链接，
     * 在编辑模式下提供带验证功能的输入框。支持防抖值变化事件和实时URL验证。
     * @example <!-- 基础用法 -->
     * <zane-input-url
     *   value="https://example.com"
     *   placeholder="输入网站地址"
     * />
     * <!-- 带尺寸控制 -->
     * <zane-input-url size="sm" />
     */
    interface ZaneInputUrl {
        /**
          * 值变化事件的防抖时间（毫秒）
          * @type {number}
          * @default 300
          * @description 控制`valueChange`事件触发前的延迟时间，用于优化频繁输入时的性能表现。 值越小响应越快，值越大可减少事件触发次数。
         */
        "debounce"?: number;
        /**
          * 禁用状态
          * @type {boolean}
          * @default false
          * @reflect 
          * @description 当设置为true时，组件进入禁用状态： - 输入框不可交互 - 视觉上呈现禁用样式 - 编辑按钮不可点击
         */
        "disabled"?: boolean;
        /**
          * 编辑模式状态
          * @type {boolean}
          * @default false
          * @mutable 
          * @reflect 
          * @description 控制组件当前交互模式： - `false`: 展示模式（显示URL链接） - `true`: 编辑模式（显示输入框）  该属性支持双向绑定，组件内部状态变化时会自动更新。
         */
        "editing"?: boolean;
        /**
          * 输入框名称属性
          * @type {string}
          * @default `zane-input-url-${gid}`
          * @description 对应原生input元素的`name`属性，用于表单提交。 默认自动生成格式为`zane-input-url-{唯一ID}`的值。
         */
        "name"?: string;
        /**
          * 输入无效事件
          * @event inputInvalid
          * @type {EventEmitter<boolean>}
          * @description 当URL验证状态变化时触发，携带当前是否无效的状态。 事件数据： - `true`: 当前值无效 - `false`: 当前值有效
          * @example <zane-input-url onInputInvalid={(e) => console.log(' 无效状态:', e.detail)}  />
         */
        "onInputInvalid"?: (event: ZaneInputUrlCustomEvent<boolean>) => void;
        /**
          * 值变化事件
          * @event valueChange
          * @type {EventEmitter<string>}
          * @description 当输入值变化时触发（经过防抖处理）。 携带当前输入框的最新值。
          * @example <zane-input-url onValueChange={(e) => console.log(' 新值:', e.detail)}  />
         */
        "onValueChange"?: (event: ZaneInputUrlCustomEvent<string>) => void;
        /**
          * 输入框占位文本
          * @type {string}
          * @description 编辑模式下输入框显示的提示文本。 当输入值为空时显示。
         */
        "placeholder"?: string;
        /**
          * 组件尺寸规格
          * @type {'lg' | 'md' | 'sm'}
          * @default 'md'
          * @reflect 
          * @description 控制组件的视觉尺寸，可选值： - `'sm'`: 小尺寸 (适用于紧凑界面) - `'md'`: 中尺寸 (默认标准尺寸) - `'lg'`: 大尺寸 (适用于强调场景)  该属性会反映到宿主元素的HTML属性上，可通过CSS属性选择器进行样式定制。
         */
        "size"?: 'lg' | 'md' | 'sm';
        /**
          * 输入值
          * @type {string}
          * @mutable 
          * @description 组件的当前URL值，支持双向绑定。 在展示模式下显示为可点击链接，在编辑模式下作为输入框的值。
         */
        "value"?: string;
    }
    /**
     * 智能链接组件
     * @component zane-link
     * @tags navigation, link, interactive
     * @shadow true
     * @description 增强型可交互链接组件，支持动态状态反馈和键盘导航优化。
     * 特性包括：
     * - 视觉状态反馈（聚焦/激活）
     * - 空格键触发点击
     * - 跨浏览器兼容的焦点管理
     * - 无障碍属性支持
     * @example <!-- 基础链接 -->
     * <zane-link href="/about">关于我们</zane-link>
     * <!-- 新窗口打开 -->
     * <zane-link href="https://external.com"  target="_blank">
     *   外部链接
     * </zane-link>
     */
    interface ZaneLink {
        /**
          * 链接目标地址
          * @type {string}
          * @reflect 
          * @description 对应 HTML anchor 元素的 href 属性： - 支持绝对路径和相对路径 - 支持哈希锚点定位 - 空值时渲染为无跳转功能的伪链接
         */
        "href"?: string;
        /**
          * 链接打开方式
          * @type {string}
          * @description 对应 HTML anchor 元素的 target 属性： - `_blank`: 新窗口/标签页打开 - `_self`: 当前窗口打开（默认） - `_parent` / `_top`: 框架控制
         */
        "target"?: string;
    }
    /**
     * 多功能菜单容器组件
     * @component zane-menu
     * @tags navigation, menu, container
     * @shadow true
     * @description 提供标准化的菜单容器实现，支持：
     * - 多种视觉尺寸层级
     * - 键盘导航支持
     * - 空状态展示
     * - 动态焦点管理
     * @example <!-- 基础菜单 -->
     * <zane-menu>
     *   <zane-menu-item>选项一</zane-menu-item>
     *   <zane-menu-item>选项二</zane-menu-item>
     * </zane-menu>
     * <!-- 空状态菜单 -->
     * <zane-menu empty empty-state-headline="无数据" empty-state-description="请添加菜单项">
     * </zane-menu>
     */
    interface ZaneMenu {
        /**
          * 空状态标识
          * @type {boolean}
          * @mutable 
          * @default false
          * @description 控制是否显示空状态界面： - `true`: 显示空状态组件 - `false`: 渲染常规菜单项 当设置为true时，将忽略slot内容
         */
        "empty"?: boolean;
        /**
          * 空状态描述文本
          * @type {string}
          * @mutable 
          * @default 'There are no items to display'
          * @description 空状态界面中的辅助说明文字 支持HTML转义字符和多语言配置
         */
        "emptyStateDescription"?: string;
        /**
          * 空状态标题文本
          * @type {string}
          * @mutable 
          * @default 'No items'
          * @description 空状态界面中的主标题文字 通常使用简短有力的提示语
         */
        "emptyStateHeadline"?: string;
        /**
          * UI层级样式
          * @type {'01' | '02' | 'background'}
          * @reflect 
          * @description 控制菜单的视觉层级深度： - `01`: 表层菜单 (默认层级，高度为1dp) - `02`: 中层菜单 (高度为2dp，更明显的阴影) - `background`: 背景层菜单 (无阴影，用于嵌套场景) 对应不同的box-shadow和z-index值
         */
        "layer"?: '01' | '02' | 'background';
        /**
          * 加载状态标识
          * @type {boolean}
          * @default false
          * @description 控制是否显示加载指示器： - `true`: 显示加载动画 - `false`: 正常显示内容 实际实现需在模板中添加加载器组件
         */
        "showLoader"?: boolean;
        /**
          * 菜单尺寸
          * @type {'lg' | 'md' | 'sm'}
          * @reflect 
          * @default 'md'
          * @description 控制菜单项尺寸和间距： - `sm`: 紧凑模式 (高度32px，字号12px) - `md`: 标准模式 (高度40px，字号14px) - `lg`: 大尺寸模式 (高度48px，字号16px) 影响内边距和行高
         */
        "size"?: 'lg' | 'md' | 'sm';
        /**
          * 当前选中值
          * @type {number | string}
          * @description 记录当前选中的菜单项值 应与子组件 zane-menu-item 的 value 属性联动 用于实现受控菜单组件
         */
        "value"?: number | string;
    }
    /**
     * 菜单分隔线组件
     * @component zane-menu-divider
     * @shadow true
     * @description 提供菜单项之间的视觉分隔效果，用于增强菜单结构的可读性。该组件：
     * - 实现菜单项分组逻辑分隔
     * - 支持深浅主题色自动适配
     * - 提供标准化的间距和高度
     * @example <!-- 基础用法 -->
     * <zane-menu>
     *   <zane-menu-item>选项一</zane-menu-item>
     *   <zane-menu-divider></zane-menu-divider> <!-- 分隔线 -->
     *   <zane-menu-item>选项二</zane-menu-item>
     * </zane-menu>
     * <!-- 分组场景 -->
     * <zane-menu>
     *   <zane-menu-item>操作类</zane-menu-item>
     *   <zane-menu-divider></zane-menu-divider>
     *   <zane-menu-item>设置类</zane-menu-item>
     * </zane-menu>
     */
    interface ZaneMenuDivider {
    }
    /**
     * 菜单项组件 (zane-menu-item)
     * @component zane-menu-item
     * @shadow true
     * @description 实现标准导航菜单项的核心组件，提供：
     * - 多状态交互（正常/选中/禁用/聚焦）
     * - 8种语义化色彩主题
     * - 可选中标记功能（带对勾图标）
     * - 原生链接支持（href/target）
     * - 键盘导航支持（空格/回车触发）
     * - 无障碍ARIA兼容设计
     * @example <!-- 基础文本菜单项 -->
     * <zane-menu-item>个人中心</zane-menu-item>
     * <!-- 带图标和选中状态的菜单项 -->
     * <zane-menu-item selected selectable>
     *   收件箱
     *   <zane-badge slot="end">12</zane-badge>
     * </zane-menu-item>
     * <!-- 作为链接的菜单项 -->
     * <zane-menu-item
     *   href="/settings"
     *   color="primary"
     *   target="_blank">
     *   系统设置
     * </zane-menu-item>
     * @designSystem | 状态         | 视觉特征                     |
     * |--------------|----------------------------|
     * | 正常         | 浅灰背景，深灰文字          |
     * | 悬停         | 浅蓝色背景（#f0f7ff）       |
     * | 聚焦         | 2px蓝色边框（#1a73e8）      |
     * | 选中         | 左侧蓝色条+对勾图标         |
     * | 禁用         | 50%透明度，阻止交互事件     |
     */
    interface ZaneMenuItem {
        /**
          * 菜单项色彩主题
          * @prop {string} color - 预定义色彩方案，默认'default'
          * @options - 'black'：深黑商务风 - 'danger'：错误操作（红） - 'default'：中性灰（默认） - 'primary'：品牌主色（蓝） - 'secondary'：辅助色（紫） - 'success'：成功状态（绿） - 'warning'：警示操作（黄） - 'white'：浅色模式专用
          * @default 'default'
         */
        "color"?: | 'black'
    | 'danger'
    | 'default'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning'
    | 'white';
        /**
          * 禁用状态开关
          * @prop {boolean} disabled - 禁用交互并降低透明度（默认false）
          * @designNote 禁用时阻止所有点击/键盘事件传递
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 链接目标地址
          * @prop {string} href - 设置后组件渲染为<a>元素（默认undefined）
          * @behavior 点击时自动执行 window.open(href,  target)
         */
        "href"?: string;
        /**
          * 视觉层级
          * @prop {string} layer - 背景透明度层级（默认继承父菜单）
          * @options '01'|'02'|'background'
         */
        "layer"?: '01' | '02' | 'background';
        /**
          * 菜单项点击事件
          * @event zane-menu-item--click
          * @payload { value: string|number }
          * @description 点击时触发（禁用状态不触发）
         */
        "onZane-menu-item--click"?: (event: ZaneMenuItemCustomEvent<any>) => void;
        /**
          * 可选状态开关
          * @prop {boolean} selectable - 启用选中标记功能（默认false）
          * @visualEffect 激活时显示左侧选中条和对勾图标
          * @default false
         */
        "selectable"?: boolean;
        /**
          * 选中状态
          * @prop {boolean} selected - 标记为选中项（需selectable=true）
          * @renderCondition 当selectable=true时显示选中状态视觉
          * @default false
         */
        "selected"?: boolean;
        /**
          * 链接打开方式
          * @prop {string} target - 同<a>标签target属性（默认'_self'）
          * @default '_self'
         */
        "target"?: string;
        /**
          * 菜单项值
          * @prop {string|number} value - 事件传递的标识值（默认innerText）
          * @emitChange 点击事件中作为payload.value 传递
         */
        "value"?: null | number | string;
    }
    /**
     * 模态框组件 (zane-modal)
     * @component zane-modal
     * @shadow true
     * @description 提供企业级应用的模态对话框解决方案，支持：
     * - 多种预设尺寸响应式布局
     * - 灵活的内容插槽（头部/主体/底部）
     * - 加载状态可视化
     * - 可控关闭行为（自动关闭/受控关闭）
     * - 无障碍访问支持
     * - 滚动条自动管理
     * @example <!-- 基础用法 -->
     * <zane-modal
     *   heading="确认操作"
     *   open={true}>
     *   <p>确定要删除此项吗？</p>
     *   <div slot="footer">
     *     <zane-button>取消</zane-button>
     *     <zane-button variant="primary">确定</zane-button>
     *   </div>
     * </zane-modal>
     * <!-- 带加载状态的模态框 -->
     * <zane-modal
     *   heading="数据处理中"
     *   open={true}
     *   showLoader={true}>
     *   <p>请稍候，正在保存您的数据...</p>
     * </zane-modal>
     */
    interface ZaneModal {
        /**
          * 模态框主标题
          * @prop {string} heading - 显示在顶部的标题文本
          * @visualEffect 使用 heading 样式（字号1.25rem/粗体）
         */
        "heading"?: string;
        /**
          * 隐藏关闭按钮
          * @prop {boolean} hideClose - 是否隐藏右上角关闭按钮（默认false）
          * @default false
         */
        "hideClose"?: boolean;
        /**
          * 受控模式开关
          * @prop {boolean} managed - 是否由外部状态控制关闭行为（默认false）
          * @behavior - false（默认）：组件内部管理 open 状态（点击关闭按钮自动关闭） - true：需外部监听 zane-modal--close 事件并手动更新 open 状态
          * @usageNote 在复杂状态管理场景中使用（如React/Vue集成）
          * @default false
         */
        "managed"?: boolean;
        /**
          * 模态框关闭事件
          * @event zane-modal--close
          * @description 当以下情况触发： - 点击关闭按钮 - 点击模态框外部遮罩层
          * @important 受控模式下必须监听此事件来更新 open 状态
         */
        "onZane-modal--close"?: (event: ZaneModalCustomEvent<any>) => void;
        /**
          * 模态框开启状态
          * @prop {boolean} open - 控制模态框显示/隐藏（默认false）
          * @important 核心显示控制属性
          * @effect 开启时自动禁用页面滚动（关闭时恢复）
          * @default false
         */
        "open"?: boolean;
        /**
          * 加载状态显示
          * @prop {boolean} showLoader - 是否显示加载指示器（默认false）
          * @visualEffect - 半透明遮罩层覆盖内容区 - 居中显示旋转加载图标
          * @usageNote 适合异步操作期间禁用交互
          * @default false
         */
        "showLoader"?: boolean;
        /**
          * 模态框尺寸方案
          * @prop {'lg' | 'md' | 'sm'} size - 预设响应式尺寸（默认'md'）
          * @options - 'sm'：小尺寸 - 'md'：中尺寸- 默认值 - 'lg'：大尺寸
          * @responsive 自动适配移动端（小屏下占满宽度）
          * @default 'md'
         */
        "size"?: 'lg' | 'md' | 'sm';
        /**
          * 副标题文本
          * @prop {string} subheading - 显示在主标题下方的辅助文本
          * @visualEffect 次级文本样式（字号0.875rem/灰色）
         */
        "subheading"?: string;
    }
    /**
     * 模态框内容容器组件 (zane-modal-content)
     * @component zane-modal-content
     * @shadow true
     * @description 专为 zane-modal 设计的结构化内容容器，提供三种预设内容样式方案，
     * 支持动态切换内容展示模式。作为模态框生态系统的核心子组件，实现：
     * - 内容区域样式规范化
     * - 自适应内容布局
     * - 多场景内容样式预设
     * - 无缝衔接父级模态框的交互状态
     * @see {@link zane-modal } 关联的父级模态框组件
     * @example <!-- 默认带边框样式 -->
     * <zane-modal-content>
     *   <p>标准内容区块</p>
     * </zane-modal-content>
     * <!-- 无边框模式 -->
     * <zane-modal-content type="borderless">
     *   <img src="data-chart.png"  alt="数据图表"/>
     * </zane-modal-content>
     * <!-- 文本优化模式 -->
     * <zane-modal-content type="text">
     *   <h3>服务条款</h3>
     *   <p>这里是详细的协议文本内容...</p>
     * </zane-modal-content>
     */
    interface ZaneModalContent {
        /**
          * @default 'default'
         */
        "type"?: 'borderless' | 'default' | 'text';
    }
    /**
     * 智能通知系统组件 (zane-notification)
     * @component zane-notification
     * @shadow true
     * @description 提供多场景智能通知解决方案，支持四态反馈、操作交互和主题适配。
     * 核心功能包括：
     * - 状态图标自动匹配
     * - 暗黑模式/高对比度自适应
     * - 内联/块级布局切换
     * - 可定制的操作按钮
     * - 可控的关闭行为
     * - 无障碍访问支持
     * @example <!-- 基础警告通知 -->
     * <zane-notification state="warning" dismissible>
     *   <span slot="title">存储空间不足</span>
     *   <span slot="subtitle">剩余 5% 磁盘空间，建议清理缓存</span>
     * </zane-notification>
     * <!-- 带操作的成功通知 -->
     * <zane-notification state="success" action="查看详情" high-contrast>
     *   <span slot="title">支付成功</span>
     *   <span slot="subtitle">订单号：20250719-2156</span>
     * </zane-notification>
     */
    interface ZaneNotification {
        /**
          * 操作按钮文本
          * @prop {string} [action] - 显示在通知右侧的操作按钮文字
          * @example <zane-notification action="撤销操作">...</zane-notification>
         */
        "action"?: string;
        /**
          * 可关闭特性
          * @prop {boolean} [dismissible=false] - 是否显示关闭按钮
          * @example <zane-notification dismissible>...</zane-notification>
          * @default false
         */
        "dismissible"?: boolean;
        /**
          * 高对比度模式
          * @prop {boolean} [highContrast=false] - 启用高对比度视觉方案 - 设计规范：符合WCAG 2.1 AA标准 - 亮色模式：深色文字+加粗边框 - 暗色模式：反转配色方案
          * @example <zane-notification high-contrast>...</zane-notification>
          * @default false
         */
        "highContrast"?: boolean;
        /**
          * 内联布局模式
          * @prop {boolean} [inline=false] - 切换为行内样式布局 - 特征： - 移除背景色和边框 - 状态图标与文本对齐 - 操作按钮变为幽灵样式 - 适用场景：表单内联校验提示
          * @example <p>请输入验证码 <zane-notification inline state="error">验证码失效</zane-notification></p>
          * @default false
         */
        "inline"?: boolean;
        /**
          * 托管关闭模式
          * @prop {boolean} [managed=false] - 关闭行为是否由外部控制 - 当设为true时： - 点击关闭按钮不会隐藏组件 - 必须监听 zane-notification--dismiss 事件手动处理 - 适用场景：通知队列管理/动画关闭
          * @example <zane-notification managed dismissible>...</zane-notification>  <script>   notification.addEventListener('zane-notification--dismiss',  () => {     // 执行动画后移除DOM   }) </script>
          * @default false
         */
        "managed"?: boolean;
        /**
          * 操作按钮点击事件
          * @event zane-notification--action-click
          * @type {EventEmitter<void>}
          * @example document.querySelector('zane-notification').addEventListener(   'zane-notification--action-click',   () => { console.log('Action  clicked') } )
         */
        "onZane-notification--action-click"?: (event: ZaneNotificationCustomEvent<any>) => void;
        /**
          * 通知关闭事件
          * @event zane-notification--dismiss
          * @type {EventEmitter<MouseEvent>}
          * @property {MouseEvent} detail - 原始点击事件对象
          * @example notificationEl.addEventListener('zane-notification--dismiss',  (evt) => {   console.log(' 关闭事件', evt.detail) })
         */
        "onZane-notification--dismiss"?: (event: ZaneNotificationCustomEvent<any>) => void;
        /**
          * 通知状态类型
          * @prop {'error'|'info'|'success'|'warning'} [state='info'] - 定义通知的语义化状态
          * @option error - 错误状态（红色系） - 图标：❌ 错误图标 - 场景：系统故障/操作失败 - 样式特征： - 背景色：#fee2e2 (浅红) - 边框色：#dc2626 (暗红)
          * @option info - 信息状态（蓝色系） - 图标：ℹ️ 信息图标 - 场景：系统通知/进程提示 - 样式特征： - 背景色：#dbeafe (浅蓝) - 边框色：#2563eb (深蓝)
          * @option success - 成功状态（绿色系） - 图标：✅ 对勾图标 - 场景：操作成功/流程完成 - 样式特征： - 背景色：#dcfce7 (浅绿) - 边框色：#16a34a (深绿)
          * @option warning - 警告状态（橙色系） - 图标：⚠️ 感叹号图标 - 场景：风险提示/操作确认 - 样式特征： - 背景色：#ffedd5 (浅橙) - 边框色：#ea580c (深橙)
          * @default 'info'
         */
        "state"?: 'error' | 'info' | 'success' | 'warning';
    }
    /**
     * 智能通知管理系统组件 (zane-notification-manager)
     * @component zane-notification-manager
     * @shadow true
     * @description 全局通知管理中心，提供以下核心能力：
     * 1. 跨组件通知聚合：通过事件总线收集全应用通知
     * 2. 多位置布局：支持4种屏幕定位策略
     * 3. 生命周期管理：自动关闭/手动关闭/防重复
     * 4. 安全渲染：内置DOM净化防止XSS攻击
     * 5. 主题适配：自动同步暗黑模式状态
     * @example <!-- 基础用法 -->
     * <zane-notification-manager position="top-right"></zane-notification-manager>
     * <!-- 自定义命名管理器 -->
     * <zane-notification-manager name="dashboard" position="bottom-left"></zane-notification-manager>
     */
    interface ZaneNotificationManager {
        /**
          * 管理器命名空间
          * @prop {string} [name='global'] - 管理器唯一标识 - `global`：默认全局管理器，接收未指定目标的通告 - 自定义名：只接收相同target参数的通告
          * @example // 发送到指定管理器 const event = new CustomEvent('zane-notification', {   detail: { target: 'dashboard', title: '数据更新完成' } }); window.dispatchEvent(event);
          * @default 'global'
         */
        "name"?: string;
        /**
          * 通知定位策略
          * @prop {'top-left'|'top-right'|'bottom-left'|'bottom-right'} [position='bottom-right'] - 通知容器屏幕位置
          * @option top-left - 左上角定位 - 适用场景：重要实时状态更新（如系统监控） - 设计规范：距顶部20px，距左侧20px
          * @option top-right - 右上角定位（默认） - 适用场景：通用信息提示（如操作反馈） - 设计规范：距顶部20px，距右侧20px
          * @option bottom-left - 左下角定位 - 适用场景：后台任务通知（如文件下载） - 设计规范：距底部20px，距左侧20px
          * @option bottom-right - 右下角定位 - 适用场景：非紧急通知（如新闻推送） - 设计规范：距底部20px，距右侧20px
          * @default 'bottom-right'
         */
        "position"?: | 'bottom-left'
    | 'bottom-right'
    | 'top-left'
    | 'top-right';
    }
    /**
     * 数字输入框组件 zane-number
     * 核心功能：
     * 1. 支持数字输入及增减按钮控制
     * 2. 提供四种状态反馈（默认/成功/警告/错误）
     * 3. 表单验证支持（必填/禁用/只读）
     * 4. 防抖事件处理与无障碍访问优化
     * 5. 插槽扩展能力（前后扩展区域）
     * @implements ComponentInterface *
     * @implements InputComponentInterface *
     */
    interface ZaneNumber {
        /**
          * 自动填充控制 - `on`: 允许浏览器自动填充 - `off`: 禁用自动填充
          * @default 'off'
         */
        "autocomplete"?: 'off' | 'on';
        /**
          * @default {}
         */
        "configAria"?: any;
        /**
          * 防抖延迟(ms) - 控制 zane-number--change 事件触发频率
          * @default 300
         */
        "debounce"?: number;
        /**
          * @default false
         */
        "disabled"?: boolean;
        "helperText"?: string;
        /**
          * 操作按钮可见性控制  - true: 隐藏增减按钮  - false: 显示（默认）
          * @attr 
          * @default false
         */
        "hideActions"?: boolean;
        /**
          * @default false
         */
        "inline"?: boolean;
        /**
          * @default false
         */
        "invalid"?: boolean;
        "invalidText"?: string;
        "label"?: string;
        /**
          * @default `zane-input-${this.gid}`
         */
        "name"?: string;
        /**
          * 失去焦点事件
          * @event zane-number--blur
          * @param ev - 焦点事件对象
         */
        "onZane-number--blur"?: (event: ZaneNumberCustomEvent<any>) => void;
        /**
          * 数字变化事件（防抖处理）
          * @event zane-number--change
          * @param ev - 键盘事件对象
          * @property {number} value - 当前输入值
         */
        "onZane-number--change"?: (event: ZaneNumberCustomEvent<any>) => void;
        /**
          * 获得焦点事件
          * @event zane-number--focus
          * @param ev - 焦点事件对象
         */
        "onZane-number--focus"?: (event: ZaneNumberCustomEvent<any>) => void;
        /**
          * 实时输入事件
          * @event zane-number--input
          * @param ev - 原始输入事件
         */
        "onZane-number--input"?: (event: ZaneNumberCustomEvent<any>) => void;
        "placeholder"?: string;
        /**
          * @default false
         */
        "readonly"?: boolean;
        /**
          * @default false
         */
        "required"?: boolean;
        /**
          * 尺寸规格 - `sm`: 小尺寸(高度约32px) - `md`: 中尺寸(高度约40px) - `lg`: 大尺寸(高度约48px)
          * @attr 
          * @default 'md'
         */
        "size"?: 'lg' | 'md' | 'sm';
        /**
          * @default false
         */
        "skeleton"?: boolean;
        /**
          * 组件状态标识 - `default`: 默认状态（无特殊样式） - `success`: 成功状态（通常用绿色标识） - `warning`: 警告状态（通常用橙色标识） - `error`: 错误状态（通常用红色标识）
          * @attr 
          * @default 'default'
         */
        "state"?: 'default' | 'error' | 'success' | 'warning';
        /**
          * 输入值（数字类型） - 支持 null 表示空值 - 使用 mutable 实现双向绑定
          * @example <zane-number value={5} />
          * @default null
         */
        "value"?: null | number;
        /**
          * @default false
         */
        "warn"?: boolean;
        "warnText"?: string;
    }
    /**
     * 弹出框组件（Popover）
     * @component zane-popover
     * @shadow true
     * @description `zane-popover` 是一个灵活的弹出框组件，可以在目标元素周围显示内容。它支持多种触发方式（点击、悬停、手动控制）、多种箭头样式以及自定义位置。
     * 使用此组件时，需要在组件内部放置一个 `zane-popover-content` 组件作为弹出内容，以及一个触发元素（例如按钮）。
     * @example <zane-popover trigger="click">
     *   <button>点击我</button>
     *   <zane-popover-content>
     *     这里是弹出内容
     *   </zane-popover-content>
     * </zane-popover>
     */
    interface ZanePopover {
        /**
          * 弹出框关闭的动画时间（毫秒）
          * @prop {number} [dismissTimeout=300]
          * @default 300
         */
        "dismissTimeout"?: number;
        /**
          * 弹出框与目标元素之间的偏移量（像素）
          * @prop {number} [offset=4]
          * @default 4
         */
        "offset"?: number;
        /**
          * 当弹出框关闭时发出的事件
          * @event zane-popover--close
         */
        "onZane-popover--close"?: (event: ZanePopoverCustomEvent<any>) => void;
        /**
          * 当弹出框打开时发出的事件
          * @event zane-popover--open
         */
        "onZane-popover--open"?: (event: ZanePopoverCustomEvent<any>) => void;
        /**
          * 控制弹出框的打开状态
          * @prop {boolean} [open=false]
          * @mutable 
          * @reflect 
          * @default false
         */
        "open"?: boolean;
        /**
          * 弹出框打开的动画时间（毫秒）
          * @prop {number} [openTimeout=200]
          * @default 200
         */
        "openTimeout"?: number;
        /**
          * 弹出框的位置偏好设置，使用逗号分隔的字符串，例如："top,bottom"  当 `tip` 属性为 'tab' 时，默认设置为 'bottom-end,bottom-start,top-end,top-start'
          * @prop {string} [placements]
          * @mutable
         */
        "placements"?: string;
        /**
          * 弹出框的箭头样式
          * @prop {'caret' | 'none' | 'tab'} [tip='caret']  - 'caret': 使用一个三角形的箭头（默认）。 - 'none': 没有箭头。 - 'tab': 使用一个类似标签页的箭头，通常用于下拉菜单。
          * @default 'caret'
          * @reflect
         */
        "tip"?: 'caret' | 'none' | 'tab';
        /**
          * 触发弹出框的方式
          * @prop {'click' | 'hover' | 'manual'} [trigger='hover']  - 'click': 点击触发元素时打开/关闭弹出框。 - 'hover': 鼠标悬停在触发元素上时打开，移开时关闭。 - 'manual': 手动控制，通过调用组件的 `show()` 和 `hide()` 方法控制。
          * @default 'hover'
         */
        "trigger"?: 'click' | 'hover' | 'manual';
    }
    /**
     * 弹出框内容容器组件 (zane-popover-content)
     * @component zane-popover-content
     * @shadow true
     * @description 弹出框系统的核心内容承载容器，提供以下核心功能：
     * 1. 结构化内容容器：为弹出内容提供标准化的布局结构
     * 2. 动态箭头指示器：根据父组件配置自动调整箭头样式和位置
     * 3. 无障碍支持：内置ARIA角色属性增强可访问性
     * 4. 主题适配：通过CSS变量支持深度主题定制
     * @dependency 必须作为`<zane-popover>`组件的直接子元素使用
     * @example <!-- 基础用法 -->
     * <zane-popover-content>
     *   <h3>标题</h3>
     *   <p>详细说明内容...</p>
     *   <button>确认</button>
     * </zane-popover-content>
     * <!-- 带样式定制 -->
     * <zane-popover-content style="--background: #2c3e50; --color: white">
     *   ...
     * </zane-popover-content>
     */
    interface ZanePopoverContent {
    }
    /**
     * 动态进度指示器组件 (zane-progress)
     * @component zane-progress
     * @shadow true
     * @description 提供可视化任务进程的进度指示器，支持多种状态显示和尺寸配置。适用于文件上传、数据加载、操作流程等场景。
     * @example <!-- 基础用法 -->
     * <zane-progress value={75}></zane-progress>
     * <!-- 带标签和状态 -->
     * <zane-progress
     *   value={50}
     *   label="上传进度"
     *   status="active"
     *   helperText="剩余时间：2分钟"
     * ></zane-progress>
     * <!-- 错误状态 -->
     * <zane-progress
     *   value={30}
     *   status="error"
     *   helperText="上传失败，请重试"
     * ></zane-progress>
     */
    interface ZaneProgress {
        /**
          * 辅助说明文本
          * @designNote - 显示在进度条下方的补充信息 - 可用于展示剩余时间、错误详情等动态内容 - 建议不超过40字符
          * @example "剩余时间：2分钟" | "上传失败：网络断开"
         */
        "helperText"?: string;
        /**
          * 是否隐藏标签区域
          * @default false
          * @designNote - 设为 true 时隐藏顶部标签区域（包括标签和状态图标） - 适用于空间受限场景（如移动端小部件） - 与 `label` 属性联动：当 hideLabel=true 时 label 自动失效
         */
        "hideLabel"?: boolean;
        /**
          * 进度标签文本
          * @designNote - 显示在进度条顶部的标题文本 - 建议使用简洁的动词短语（如："文件上传"、"数据处理"） - 国际化支持：可通过 slot 机制实现多语言
          * @example "安装进度" | "资源加载"
         */
        "label"?: string;
        /**
          * 组件尺寸模式
          * @default 'md'
          * @designNote 可选值及其应用场景： | **值** | **尺寸** | **适用场景**            | |---------|----------|------------------------| | 'md'    | 中等尺寸 | 标准页面内容区（默认）  | | 'sm'    | 小型尺寸 | 表格内嵌/工具栏紧凑布局 |  尺寸规范： | **尺寸** | 高度 | 字体大小 | 圆角半径 | |-----------|------|----------|----------| | md        | 24px | 14px     | 12px     | | sm        | 16px | 12px     | 8px      |
         */
        "size"?: 'md' | 'sm';
        /**
          * 进度状态类型
          * @default 'active'
          * @designNote 状态机逻辑： | **状态值** | **视觉表现**                     | **使用场景**               | |-------------|----------------------------------|----------------------------| | 'active'    | 蓝色动态条纹（默认）             | 进行中的任务               | | 'success'   | 绿色+成功图标（✔️）              | 已完成的任务               | | 'error'     | 红色+错误图标（❌）              | 失败/中断的任务            |  状态交互规则： 1. 当 value=100 时自动切换为 'success'（优先级高于手动设置） 2. 'error' 状态必须手动触发（如网络异常）
         */
        "status"?: 'active' | 'error' | 'success';
        /**
          * 当前进度值
          * @default null
          * @designNote - 范围：0-100（百分比值） - 特殊值 null：显示不定长动画（indeterminate 模式） - 边界处理：   - <0 自动修正为0   - >100 自动修正为100 - 动画效果：进度变化时带300ms缓动过渡
         */
        "value"?: number;
    }
    /**
     * 基于 Floating UI 的增强型下拉选择组件
     * @component 
     * @tag zane-select
     * @implements ComponentInterface , InputComponentInterface}
     * @example <!-- 基础用法 -->
     * <zane-select
     *   items={[{label: '选项1', value: 1}]}
     *   placeholder="请选择"
     *   size="md"
     * />
     */
    interface ZaneSelect {
        /**
          * 是否显示清除按钮
          * @type {boolean}
          * @default false
         */
        "clearable"?: boolean;
        /**
          * ARIA属性配置对象
          * @type {Object}
          * @mutable 
          * @example configAria={{ 'aria-labelledby': 'custom-label' }}  支持动态配置以下属性： - aria-label：定义组件的语义标签 - aria-labelledby：关联可见标签元素 - aria-describedby：关联描述元素
          * @default {}
         */
        "configAria"?: any;
        /**
          * 搜索输入防抖时间（毫秒）
          * @type {number}
          * @default 300
         */
        "debounce"?: number;
        /**
          * @default false
         */
        "disabled"?: boolean;
        "helperText"?: string;
        /**
          * @default false
         */
        "hideDropdownIcon"?: boolean;
        /**
          * @default false
         */
        "inline"?: boolean;
        /**
          * @default false
         */
        "invalid"?: boolean;
        "invalidText"?: string;
        /**
          * @default []
         */
        "items"?: {
    icon?: string;
    label: number | string;
    value: number | string;
  }[];
        "label"?: string;
        /**
          * 视觉层级配置
          * @type {'01' | '02' | 'background'}
          * @example layer="02" // 使用第二层级的阴影和背景  层级说明： - 01：基础层级（默认），适用于常规布局 - 02：更高层级，适合悬浮卡片效果 - background：背景层级，适合非交互元素
         */
        "layer"?: '01' | '02' | 'background';
        /**
          * @default false
         */
        "multiple"?: boolean;
        /**
          * @default `zane-input-${this.gid}`
         */
        "name"?: string;
        /**
          * 值变更事件
          * @event zane-select--change
          * @type {EventEmitter<{ newItem?: object, removedItem?: object, value: string }>}
          * @example <zane-select onZaneSelectChange={e => console.log(e.detail)}>  事件参数说明： - newItem：新增项的对象数据（当为添加操作时存在） - removedItem：移除项的对象数据（当为删除操作时存在） - value：当前选中值的逗号分隔字符串
         */
        "onZane-select--change"?: (event: ZaneSelectCustomEvent<any>) => void;
        /**
          * 搜索回车确认事件
          * @event zane-select--enter
          * @type {EventEmitter<{ currentItems: array, value: string }>}
          * @example <zane-search onZaneSearchEnter={e => loadMore(e.detail.value)}>  事件参数说明： - currentItems：当前过滤后的菜单项数组 - value：当前的搜索关键词
         */
        "onZane-select--enter"?: (event: ZaneSelectCustomEvent<any>) => void;
        /**
          * 搜索输入事件（带防抖）
          * @event zane-select--search
          * @type {EventEmitter<{ value: string }>}
          * @example <zane-search onZaneSearch={e => handleSearch(e.detail.value)}>  触发条件： - 当search不为'none'时 - 输入内容发生变更且经过防抖处理
         */
        "onZane-select--search"?: (event: ZaneSelectCustomEvent<any>) => void;
        /**
          * @default false
         */
        "open"?: boolean;
        "placeholder"?: string;
        /**
          * 下拉菜单定位策略配置
          * @type {string}
          * @default 'bottom-start,top-start,bottom-end,top-end'
          * @example placements="top,right-start" // 优先尝试顶部对齐，次选右侧对齐  格式说明： - 使用逗号分隔的定位字符串 - 每个定位字符串格式为[方向]-[对齐方式] - 方向选项：top | right | bottom | left - 对齐方式：start | end
         */
        "placements"?: string;
        /**
          * @default false
         */
        "readonly"?: boolean;
        /**
          * @default false
         */
        "required"?: boolean;
        /**
          * 搜索模式配置
          * @type {'contains' | 'initial' | 'managed' | 'none'}
          * @default 'none'
          * @example search="contains" // 实时子字符串匹配  模式说明： - none：禁用搜索功能 - contains：根据输入内容进行子字符串匹配过滤 - initial：仅在打开菜单时执行初始过滤 - managed：由父组件完全控制搜索逻辑
         */
        "search"?: 'contains' | 'initial' | 'managed' | 'none';
        /**
          * @default false
         */
        "showLoader"?: boolean;
        /**
          * 组件尺寸选项
          * @type {'lg' | 'md' | 'sm'}
          * @default 'md'
          * @example size="sm" // 小尺寸样式  具体尺寸对应关系： - sm：高度32px，适合紧凑布局 - md：高度40px，标准尺寸 - lg：高度48px，强调视觉重点
         */
        "size"?: 'lg' | 'md' | 'sm';
        /**
          * 组件状态标识
          * @type {'default' | 'error' | 'success' | 'warning'}
          * @default 'default'
          * @example state="error" // 显示错误状态样式  状态说明： - default：常规状态 - error：输入验证失败 - success：输入验证通过 - warning：存在潜在问题
         */
        "state"?: 'default' | 'error' | 'success' | 'warning';
        /**
          * @default ''
         */
        "value"?: number | string;
        /**
          * @default false
         */
        "warn"?: boolean;
        "warnText"?: string;
    }
    /**
     * 侧边导航栏组件，提供页面侧边导航功能
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 指定组件样式文件
     * @tag 定义组件在HTML中的标签名
     */
    interface ZaneSidenav {
        /**
          * 是否显示加载指示器
          * @Prop 可从外部设置的属性
          * @default false
         */
        "showLoader"?: boolean;
    }
    /**
     * 侧边导航菜单组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 指定组件样式文件
     * @tag 定义组件在HTML中的标签名
     */
    interface ZaneSidenavMenu {
        /**
          * 是否显示空状态
          * @type {boolean}
          * @default false
          * @mutable 可变的
         */
        "empty"?: boolean;
        /**
          * 空状态配置(JSON字符串格式)
          * @type {string}
          * @default '{"headline": "No items", "description": "There are no items to display"}'
          * @mutable 可变的
         */
        "emptyState"?: any;
        /**
          * 是否显示加载指示器
          * @type {boolean}
          * @default false
         */
        "showLoader"?: boolean;
        /**
          * 组件值，可以是数字或字符串
          * @type {number|string}
          * @mutable 可变的
         */
        "value"?: number | string;
    }
    /**
     * 侧边导航菜单项组件
     * @Component 装饰器定义组件元数据
     * @shadow 启用Shadow DOM封装
     * @styleUrl 指定组件样式文件
     * @tag 定义组件在HTML中的标签名
     */
    interface ZaneSidenavMenuItem {
        /**
          * 是否禁用菜单项
          * @type {boolean}
          * @default false
          * @reflect 属性值会反射到DOM属性
         */
        "disabled"?: boolean;
        /**
          * 菜单项点击事件
          * @type {EventEmitter}
          * @event zane:sidenav-menu-item-click
         */
        "onZane:sidenav-menu-item-click"?: (event: ZaneSidenavMenuItemCustomEvent<any>) => void;
        /**
          * 选中状态
          * @type {boolean}
          * @default false
          * @reflect 属性值会反射到DOM属性
         */
        "selected"?: boolean;
        /**
          * 菜单项值，支持null/数字/字符串类型
          * @type {null|number|string}
          * @mutable 可变的
         */
        "value"?: null | number | string;
    }
    /**
     * 滑动选择器组件
     * 提供可拖动的滑块选择器，支持鼠标/触摸交互、键盘操作和数值输入框集成。
     * @component zane-slider
     * @tags zane-slider
     * @shadow true
     * @example <!-- 基础用法 -->
     * <zane-slider min="0" max="100" value="50"></zane-slider>
     * <!-- 禁用状态 -->
     * <zane-slider disabled value="30"></zane-slider>
     * <!-- 隐藏数值输入框 -->
     * <zane-slider show-only-slider value="75"></zane-slider>
     */
    interface ZaneSlider {
        /**
          * ARIA 属性配置对象
          * @prop {Object} configAria - 收集所有以 `aria-` 开头的自定义属性
          * @mutable 
          * @reflect 
          * @default {}
         */
        "configAria"?: any;
        /**
          * 值变更事件的防抖时间（毫秒）
          * @prop {number} debounce - 用于优化频繁触发的事件
          * @default 300
         */
        "debounce"?: number;
        /**
          * 禁用状态开关
          * @prop {boolean} disabled
          * @reflect 
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 数值格式化函数
          * @prop {(value: number | string) => string} formatter - 用于自定义显示值的格式
          * @example (val) => `${val}%`
         */
        "formatter"?: (value: number | string) => string;
        /**
          * 滑块最大值
          * @prop {number} max
          * @default 100
         */
        "max"?: number;
        /**
          * 滑块最小值
          * @prop {number} min
          * @default 0
         */
        "min"?: number;
        /**
          * 表单字段名称
          * @prop {string} name - 自动生成唯一名称
          * @default `zane-input-${gid}`
         */
        "name"?: string;
        /**
          * 值变更事件（带防抖）
          * @event zane-slider--change
          * @property {Object} detail - 事件详情
          * @property {number} detail.value  - 变更后的值
         */
        "onZane-slider--change"?: (event: ZaneSliderCustomEvent<any>) => void;
        /**
          * 输入实时事件
          * @event zane-slider--input
          * @property {Object} detail - 事件详情
          * @property {number} detail.value  - 当前输入值
         */
        "onZane-slider--input"?: (event: ZaneSliderCustomEvent<any>) => void;
        /**
          * 只读状态开关
          * @prop {boolean} readonly
          * @reflect 
          * @default false
         */
        "readonly"?: boolean;
        /**
          * 必填状态
          * @prop {boolean} required
          * @reflect 
          * @default false
         */
        "required"?: boolean;
        /**
          * 是否仅显示滑块（隐藏数值输入框）
          * @prop {boolean} showOnlySlider
          * @default false
         */
        "showOnlySlider"?: boolean;
        /**
          * 步进值
          * @prop {number} step - 每次增减的数值单位
          * @mutable 
          * @default 1
         */
        "step"?: number;
        /**
          * 当前滑块值
          * @prop {number} value - 受控属性
          * @mutable 
          * @default 0
         */
        "value"?: number;
    }
    /**
     * 加载指示器组件 (zane-spinner)
     * @component 
     * @shadow true
     * @description 用于表示加载状态的动画指示器，支持自定义尺寸和样式。
     * @example <!-- 基本用法 -->
     * <zane-spinner></zane-spinner>
     * <!-- 自定义描述文本 -->
     * <zane-spinner description="数据加载中"></zane-spinner>
     * <!-- 隐藏背景圆环 -->
     * <zane-spinner hide-background></zane-spinner>
     */
    interface ZaneSpinner {
        /**
          * 辅助文本描述
          * @prop 
          * @attribute description
          * @default 'Loading...'
          * @description 为屏幕阅读器提供加载状态描述，同时作为 SVG 的 title 属性提升可访问性。
         */
        "description"?: string;
        /**
          * 是否隐藏背景圆环
          * @prop 
          * @attribute hide-background
          * @default false
          * @description 当设置为 true 时，隐藏加载动画后的半透明背景圆环。
         */
        "hideBackground"?: boolean;
        /**
          * 加载指示器尺寸
          * @prop 
          * @attribute size
          * @reflect true
          * @default 'md'
          * @description 控制加载指示器尺寸，支持预设枚举或自定义 CSS 单位： - `'lg'`: 大尺寸 (5.5rem) - `'md'`: 中等尺寸 (1rem) - `'sm'`: 小尺寸 (0.75rem) - `string`: 自定义尺寸（支持 '2rem'/'32px' 格式）
         */
        "size"?: 'lg' | 'md' | 'sm' | string;
    }
    /**
     * SVG 动态加载组件 (zane-svg)
     * @component 
     * @shadow true
     * @description 智能 SVG 图标容器，支持动态加载、尺寸控制与样式继承
     * @example <!-- 基础用法 -->
     * <zane-svg src="/assets/icon.svg"></zane-svg>
     * <!-- 带尺寸控制 -->
     * <zane-svg src="/assets/logo.svg"  size="xl"></zane-svg>
     * <!-- 自定义尺寸 -->
     * <zane-svg src="/assets/chart.svg"  size="32px"></zane-svg>
     */
    interface ZaneSvg {
        /**
          * 图标尺寸配置
          * @prop 
          * @attribute size
          * @reflect true
          * @default undefined
          * @description 控制 SVG 图标显示尺寸，支持以下类型： - 预设枚举：'xs' | 'sm' | 'md' | 'lg' | 'xl' - CSS 单位值：'24px' | '2rem' | '100%' - 未设置时继承父级字体大小
          * @presetDetails | 值   | 换算公式    | 典型场景          | |------|------------|-------------------| | xs   | 0.5rem (8px) | 表格行内小图标     | | sm   | 0.75rem (12px)| 按钮辅助图标      | | md   | 1rem (16px)  | 默认标准尺寸       | | lg   | 1.5rem (24px)| 卡片头部图标       | | xl   | 1.75rem (28px)| 展示型大图标      |
         */
        "size"?: string;
        /**
          * SVG 资源路径
          * @prop 
          * @attribute src
          * @default ''
          * @description 需要加载的 SVG 文件路径或 URL，支持： - 相对路径（基于项目根目录） - 绝对 URL（需配置 CORS） - 内联 DataURL（base64 编码）
          * @securityNote 当使用外部 URL 时，组件会自动添加 `rel="noopener noreferrer"` 防止钓鱼攻击，建议优先使用本地托管 SVG
         */
        "src"?: string;
    }
    /**
     * 单个标签页元素，支持多种交互状态和类型
     */
    interface ZaneTab {
        /**
          * 是否禁用标签
          * @type {boolean}
          * @prop disabled
          * @default false
          * @reflect
         */
        "disabled"?: boolean;
        /**
          * 禁用状态提示信息（支持无障碍访问）
          * @type {string}
          * @prop disabledReason
          * @default ''
         */
        "disabledReason"?: string;
        /**
          * 链接地址（存在时渲染为<a>标签）
          * @type {string}
          * @prop href
         */
        "href"?: string;
        /**
          * 图标名称（内置图标库）
          * @type {string}
          * @prop icon
         */
        "icon"?: string;
        /**
          * 标签文本（备用显示内容）
          * @type {string}
          * @prop label
         */
        "label"?: string;
        /**
          * 标签点击事件（冒泡给父级Tabs）
          * @event zane-tab--click
          * @type {EventEmitter<{element: HTMLElement; target: string; value: string}>}
         */
        "onZane-tab--click"?: (event: ZaneTabCustomEvent<any>) => void;
        /**
          * 选中状态（与父级Tabs组件联动）
          * @type {boolean}
          * @prop selected
          * @default false
          * @reflect
         */
        "selected"?: boolean;
        /**
          * 显示加载指示器
          * @type {boolean}
          * @prop showLoader
          * @default false
         */
        "showLoader"?: boolean;
        /**
          * 关联面板标识
          * @type {string}
          * @prop target
         */
        "target"?: string;
        /**
          * 标签类型（需与父级Tabs组件同步）
          * @type {'contained' | 'contained-bottom' | 'default'}
          * @prop type
          * @default 'default'
          * @reflect
         */
        "type"?: 'contained' | 'contained-bottom' | 'default';
        /**
          * 标签值（用于表单场景）
          * @type {string}
          * @prop value
         */
        "value"?: string;
    }
    /**
     * 标签页内容面板容器
     * 该组件与 zane-tab 标签页组件配合使用，形成完整的标签页系统。当标签页被激活时，
     * 关联的面板内容将显示在界面中，支持层级深度控制以实现复杂的视觉层次效果。
     * @example <zane-tab-panel value="profile" active>
     *   用户资料详情内容
     * </zane-tab-panel>
     */
    interface ZaneTabPanel {
        /**
          * 面板激活状态（与关联标签页同步）  当设置为 true 时，面板将显示在界面中。该属性通常由父级 zane-tabs 组件自动管理， 开发者也支持手动控制以实现特殊交互场景。
          * @type {boolean}
          * @prop active
          * @default false
          * @reflect
         */
        "active"?: boolean;
        /**
          * 视觉层级深度控制  提供三层深度选项，用于构建层次化界面效果： - '01': 顶层面板（默认最高层级） - '02': 中间层级面板 - 'background': 背景层级面板（最低层级）
          * @type {'01' | '02' | 'background'}
          * @prop layer
          * @reflect
         */
        "layer"?: '01' | '02' | 'background';
        /**
          * 面板唯一标识值  必须与对应 zane-tab 组件的 target 属性匹配，建立标签页与内容面板的关联关系。 该值应确保在同一个 zane-tabs 容器中保持唯一。
          * @type {string}
          * @prop value
          * @reflect
         */
        "value"?: string;
    }
    interface ZaneTable {
        /**
          * 表格列配置数组
          * @prop {Array<Object>} columns
          * @example [   {     name: "name",         // 数据字段名     label: "Name",        // 列标题显示文本     width: 300,           // 列宽度（像素或rem）     fixed: true,          // 是否固定列（左侧固定）     template: (row, column) => `<b>${row[column.name]}</b>` // 自定义渲染模板   },   {     name: "age",     label: "Age"   } ]
          * @default []
         */
        "columns"?: any[];
        /**
          * 表格数据源
          * @prop {Array<Object>} data
          * @example [{   id: '5e7118ddce4b3d577956457f',   age: 21,   name: 'John' }]
          * @default []
         */
        "data"?: any[];
        /**
          * 空状态描述文本
          * @prop {string} emptyStateDescription
          * @default 'There are no items to display'
         */
        "emptyStateDescription"?: string;
        /**
          * 空状态标题文本
          * @prop {string} emptyStateHeadline
          * @default 'No items'
         */
        "emptyStateHeadline"?: string;
        /**
          * 行数据唯一标识字段名
          * @prop {string} keyField
          * @default 'id'
         */
        "keyField"?: string;
        /**
          * 组件视觉层级（影响阴影和z-index）
          * @prop {'01' | '02' | 'background'} [layer] - '01': 基础层级（默认） - '02': 中层（用于悬浮元素） - 'background': 底层（无阴影）
         */
        "layer"?: '01' | '02' | 'background';
        /**
          * 是否为托管模式（外部控制分页/排序）
          * @prop {boolean} managed
          * @default false
          * @desc true: 外部控制数据（需监听事件处理分页/排序） false: 组件内部处理分页/排序
         */
        "managed"?: boolean;
        /**
          * 单元格点击事件
          * @event zane-table--cell-click
          * @param detail - 事件详情
          * @param detail.altKey - 是否按下Alt键
          * @param detail.column - 列配置对象
          * @param detail.ctrlKey - 是否按下Ctrl键
          * @param detail.metaKey - 是否按下Meta键
          * @param detail.record - 行数据对象
          * @param detail.shiftKey - 是否按下Shift键
         */
        "onZane-table--cell-click"?: (event: ZaneTableCustomEvent<any>) => void;
        /**
          * 分页变更事件
          * @event zane-table--page
          * @param detail - 事件详情
          * @param detail.page - 新页码
          * @param detail.pageSize - 新每页条数
         */
        "onZane-table--page"?: (event: ZaneTableCustomEvent<any>) => void;
        /**
          * 选择变更事件
          * @event zane-table--selection-change
          * @param detail - 事件详情
          * @param detail.isSelectAll - 是否全选
          * @param detail.value - 选中行key数组
         */
        "onZane-table--selection-change"?: (event: ZaneTableCustomEvent<any>) => void;
        /**
          * 排序事件
          * @event zane-table--sort
          * @param detail - 事件详情
          * @param detail.sortBy - 排序字段
          * @param detail.sortOrder - 排序方向
         */
        "onZane-table--sort"?: (event: ZaneTableCustomEvent<any>) => void;
        /**
          * 当前页码
          * @prop {number} page
          * @default 1
         */
        "page"?: number;
        /**
          * 每页显示条数
          * @prop {number} pageSize
          * @default 10
         */
        "pageSize"?: number;
        /**
          * 是否启用分页
          * @prop {boolean} paginate
          * @default true
         */
        "paginate"?: boolean;
        /**
          * 已选中的行key数组
          * @prop {string[]} selectedRowKeys
          * @default []
         */
        "selectedRowKeys"?: string[];
        /**
          * 行选择类型
          * @prop {'checkbox' | undefined} [selectionType] - 'checkbox': 显示多选框列 - undefined: 无选择功能
         */
        "selectionType"?: 'checkbox' | undefined;
        /**
          * 当前排序字段
          * @prop {string} [sortBy]
         */
        "sortBy"?: string;
        /**
          * 排序方向
          * @prop {'asc' | 'desc'} [sortOrder] - 'asc': 升序（A-Z/0-9） - 'desc': 降序（Z-A/9-0）
          * @default 'asc'
         */
        "sortOrder"?: 'asc' | 'desc';
        /**
          * 是否启用排序
          * @prop {boolean} sortable
          * @default true
         */
        "sortable"?: boolean;
        /**
          * 数据总条数（托管模式下必传）
          * @prop {number} [totalItems]
         */
        "totalItems"?: any;
    }
    /**
     * 标签页容器组件，用于管理和切换多个标签页
     */
    interface ZaneTabs {
        /**
          * 组件层级设置，影响样式和视觉层次
          * @type {'01' | '02' | 'background'}
          * @prop layer
          * @memberof Tabs  - `'01'`: 第一层级（最高层级，用于凸出显示） - `'02'`: 第二层级（中等层级，常规内容） - `'background'`: 背景层级（最低层级，用于背景元素）
         */
        "layer"?: '01' | '02' | 'background';
        /**
          * 标签页类型，决定标签页的视觉样式
          * @type {'contained' | 'contained-bottom' | 'default'}
          * @prop type
          * @default 'default'
          * @memberof Tabs  - `'contained'`: 包含式标签（标签与内容区域视觉统一） - `'contained-bottom'`: 底部包含式标签（标签位于内容底部） - `'default'`: 默认样式（标准分隔式标签）
         */
        "type"?: 'contained' | 'contained-bottom' | 'default';
    }
    interface ZaneTabsList {
        /**
          * 是否由外部管理状态（如父组件 zane-tabs 管理） 如果为 true，则点击标签页时不会自动修改选中状态，而是由外部通过事件来控制。 默认情况下，组件自身管理状态。
          * @default false
         */
        "managed"?: boolean;
        /**
          * 标签栏的样式类型 - default: 默认样式 - contained: 包含式（通常有背景和边框） - contained-bottom: 包含式，标签位于底部
          * @default 'default'
         */
        "type"?: 'contained' | 'contained-bottom' | 'default';
    }
    /**
     * 多功能标签/徽章组件
     * 提供灵活的内容展示能力，支持多种颜色主题、尺寸规格、可关闭操作和选中状态。
     * 适用于分类标记、状态指示、可选项选择等场景，可与表单组件或列表组件配合使用。
     * @example <!-- 基础用法 -->
     * <zane-tag>默认标签</zane-tag>
     * <!-- 带关闭按钮 -->
     * <zane-tag dismissible>可关闭标签</zane-tag>
     * <!-- 带图片 -->
     * <zane-tag image-src="/path/to/avatar.jpg"> 用户标签</zane-tag>
     */
    interface ZaneTag {
        /**
          * 标签颜色主题  提供10种预设颜色方案，满足不同场景的视觉需求： - `blue`: 蓝色主题（中性信息） - `error`: 错误红色（操作失败/危险状态） - `gray`: 灰色主题（默认中性色） - `green`: 绿色主题（成功/完成状态） - `info`: 信息蓝（通知/提示信息） - `primary`: 品牌主色（重要内容） - `red`: 警示红色（紧急通知） - `success`: 成功绿色（操作成功） - `warning`: 警告黄色（注意/提醒） - `yellow`: 强调黄色（高亮显示）
          * @type {'blue' | 'error' | 'gray' | 'green' | 'info' | 'primary' | 'red' | 'success' | 'warning' | 'yellow'}
          * @prop color
          * @default 'gray'
          * @reflect
         */
        "color"?: | 'blue'
    | 'error'
    | 'gray'
    | 'green'
    | 'info'
    | 'primary'
    | 'red'
    | 'success'
    | 'warning'
    | 'yellow';
        /**
          * 是否显示关闭按钮  设置为 true 时，标签右侧显示关闭图标，点击触发 `zane-tag--dismiss` 事件
          * @type {boolean}
          * @prop dismissible
          * @default false
         */
        "dismissible"?: boolean;
        /**
          * 标签图片地址  设置后，在标签左侧显示指定图片（如用户头像）
          * @type {string}
          * @prop imageSrc
         */
        "imageSrc"?: string;
        /**
          * 标签点击事件  当标签被点击时触发（不包括关闭按钮区域）
          * @event zane-tag--click
          * @type {EventEmitter}
         */
        "onZane-tag--click"?: (event: ZaneTagCustomEvent<any>) => void;
        /**
          * 标签关闭事件  当关闭按钮被点击时触发，传递标签的 value 或文本内容
          * @event zane-tag--dismiss
          * @type {EventEmitter<{ value: string }>}
         */
        "onZane-tag--dismiss"?: (event: ZaneTagCustomEvent<any>) => void;
        /**
          * 选中状态  表示标签是否被选中，常用于多选场景
          * @type {boolean}
          * @prop selected
          * @default false
          * @reflect
         */
        "selected"?: boolean;
        /**
          * 标签尺寸  控制标签的整体尺寸规格： - `md`: 中等尺寸（默认） - `sm`: 小型尺寸（紧凑布局）
          * @type {'md' | 'sm'}
          * @prop size
          * @default 'md'
          * @reflect
         */
        "size"?: 'md' | 'sm';
        /**
          * 标签值  标签关联的业务数据值，在事件触发时作为参数传递
          * @type {string}
          * @prop value
          * @default ''
          * @reflect
         */
        "value"?: string;
    }
    /**
     * 多功能文本展示组件
     * 提供丰富的文本样式和语义化支持，满足不同场景的文本展示需求。支持多种文本类型、
     * 颜色主题、标题级别和响应式文本大小，集成了完善的 ARIA 可访问性支持。
     * @example <!-- 基础文本 -->
     * <zane-text>普通段落文本</zane-text>
     * <!-- 标题文本 -->
     * <zane-text type="heading" heading-level="2">二级标题</zane-text>
     * <!-- 带颜色的辅助文本 -->
     * <zane-text type="helper-text" color="helper">表单提示文本</zane-text>
     */
    interface ZaneText {
        /**
          * 文本颜色主题  提供7种预设颜色方案，满足不同场景的视觉需求： - `primary`: 主要文本颜色（默认） - `secondary`: 次要文本颜色（较浅） - `tertiary`: 三级文本颜色（最浅） - `error`: 错误状态文本（红色系） - `helper`: 辅助说明文本（灰色系） - `inverse`: 反色文本（深色背景使用） - `on-color`: 彩色背景上的文本
          * @prop color
          * @type {'primary' | 'secondary' | 'tertiary' | 'error' | 'helper' | 'inverse' | 'on-color'}
          * @default 'primary'
          * @reflect
         */
        "color"?: | 'error'
    | 'helper'
    | 'inverse'
    | 'on-color'
    | 'primary'
    | 'secondary'
    | 'tertiary';
        /**
          * ARIA 属性配置  用于存储动态收集的 ARIA 属性，提高组件的可访问性。 组件会自动收集元素上的所有 aria-* 属性并转移到内部元素。
          * @prop configAria
          * @type {any}
          * @mutable 
          * @reflect 
          * @default {}
         */
        "configAria"?: any;
        /**
          * 情感化文本模式  启用特殊的情感化排版样式，通常用于突出重要内容： - 更大的字号间距 - 更丰富的字体变化 - 增强的视觉层次
          * @prop expressive
          * @type {boolean}
          * @default false
          * @reflect
         */
        "expressive"?: boolean;
        /**
          * 标题语义级别  定义标题的 HTML 语义级别（h1-h6），影响： 1. 文档大纲结构 2. 屏幕阅读器识别 3. SEO 权重  当未指定时，组件会根据标题尺寸自动推导
          * @prop headingLevel
          * @type {1 | 2 | 3 | 4 | 5 | 6}
          * @reflect
         */
        "headingLevel"?: 1 | 2 | 3 | 4 | 5 | 6;
        /**
          * 标题视觉尺寸  控制标题的视觉大小（1-7级），与实际语义级别分离： - 1: 最大标题尺寸 - 7: 最小标题尺寸  当未指定时，默认值为： - 普通标题: 7 - 流式标题: 6
          * @prop headingSize
          * @type {1 | 2 | 3 | 4 | 5 | 6 | 7}
          * @reflect
         */
        "headingSize"?: 1 | 2 | 3 | 4 | 5 | 6 | 7;
        /**
          * 行内模式  设置为 true 时，文本将以行内元素（span）渲染， 否则以块级元素（p）渲染
          * @prop inline
          * @type {boolean}
          * @default false
          * @reflect
         */
        "inline"?: boolean;
        /**
          * 文本类型  定义文本的语义类型和基本样式： - `body`: 标准正文文本（默认） - `body-compact`: 紧凑正文（较小行高） - `code`: 代码样式（等宽字体） - `fluid-heading`: 流式响应式标题 - `heading`: 标准标题 - `heading-compact`: 紧凑标题 - `helper-text`: 辅助说明文本 - `label`: 表单标签文本 - `legal`: 法律条款小字
          * @prop type
          * @type {'body' | 'body-compact' | 'code' | 'fluid-heading' | 'heading' | 'heading-compact' | 'helper-text' | 'label' | 'legal'}
          * @default 'body'
          * @reflect
         */
        "type"?: | 'body'
    | 'body-compact'
    | 'code'
    | 'fluid-heading'
    | 'heading'
    | 'heading-compact'
    | 'helper-text'
    | 'label'
    | 'legal';
    }
    /**
     * 多功能文本区域输入组件
     * 提供完整的表单文本区域解决方案，支持响应式布局、表单验证、辅助文本提示和丰富的交互功能。
     * 集成了 ARIA 可访问性支持和多状态反馈设计，适用于复杂表单场景。
     * @example <!-- 基础用法 -->
     * <zane-textarea label="用户反馈" placeholder="请输入您的建议"></zane-textarea>
     * <!-- 带验证状态 -->
     * <zane-textarea
     *   label="密码"
     *   state="error"
     *   invalid-text="密码长度不足8位"
     * ></zane-textarea>
     */
    interface ZaneTextarea {
        /**
          * 是否显示清除按钮  设置为 true 时，在输入框有内容时会显示清除按钮
          * @prop clearable
          * @type {boolean}
          * @default false
         */
        "clearable"?: boolean;
        /**
          * ARIA 属性配置  存储动态收集的 ARIA 属性，用于增强组件可访问性。 组件加载时会自动收集宿主元素上的 aria-* 属性。
          * @prop configAria
          * @type {any}
          * @mutable 
          * @reflect 
          * @default {}
         */
        "configAria"?: any;
        /**
          * 输入事件防抖时间（毫秒）  减少频繁输入事件的处理频率，优化性能
          * @prop debounce
          * @type {number}
          * @default 300
         */
        "debounce"?: number;
        /**
          * 禁用状态  设置为 true 时，组件不可交互且样式变灰
          * @prop disabled
          * @type {boolean}
          * @default false
          * @reflect
         */
        "disabled"?: boolean;
        /**
          * 辅助提示文本  显示在输入区域下方的帮助信息
          * @prop helperText
          * @type {string}
         */
        "helperText"?: string;
        /**
          * 行内布局模式  设置为 true 时，标签和输入框水平排列
          * @prop inline
          * @type {boolean}
          * @default false
          * @reflect
         */
        "inline"?: boolean;
        /**
          * 错误验证状态  设置为 true 时显示错误样式和错误文本
          * @prop invalid
          * @type {boolean}
          * @default false
         */
        "invalid"?: boolean;
        /**
          * 错误提示文本  当 invalid 为 true 时显示的错误信息
          * @prop invalidText
          * @type {string}
         */
        "invalidText"?: string;
        /**
          * 输入框标签文本  显示在输入区域上方的描述标签
          * @prop label
          * @type {string}
         */
        "label"?: string;
        /**
          * 表单字段名称  用于表单提交的字段名，默认自动生成唯一值
          * @prop name
          * @type {string}
          * @default `zane-input-${gid}`
         */
        "name"?: string;
        /**
          * 操作按钮点击事件  当操作按钮（如清除按钮）被点击时触发
          * @event zane-textarea--action-click
          * @type {EventEmitter}
         */
        "onZane-textarea--action-click"?: (event: ZaneTextareaCustomEvent<any>) => void;
        /**
          * 失去焦点事件  当文本域失去焦点时触发
          * @event zane-textarea--blur
          * @type {EventEmitter}
         */
        "onZane-textarea--blur"?: (event: ZaneTextareaCustomEvent<any>) => void;
        /**
          * 值变更事件（防抖）  当文本域值变化且经过防抖处理后触发
          * @event zane-textarea--change
          * @type {EventEmitter}
         */
        "onZane-textarea--change"?: (event: ZaneTextareaCustomEvent<any>) => void;
        /**
          * 获得焦点事件  当文本域获得焦点时触发
          * @event zane-textarea--focus
          * @type {EventEmitter}
         */
        "onZane-textarea--focus"?: (event: ZaneTextareaCustomEvent<any>) => void;
        /**
          * 输入事件（实时）  当文本域值变化时实时触发
          * @event zane-textarea--input
          * @type {EventEmitter}
         */
        "onZane-textarea--input"?: (event: ZaneTextareaCustomEvent<any>) => void;
        /**
          * 占位符文本  输入框为空时显示的提示文本
          * @prop placeholder
          * @type {string}
         */
        "placeholder"?: string;
        /**
          * 只读状态  设置为 true 时，内容不可编辑但可复制
          * @prop readonly
          * @type {boolean}
          * @default false
          * @reflect
         */
        "readonly"?: boolean;
        /**
          * 必填状态  设置为 true 时，标签旁显示红色星号标记
          * @prop required
          * @type {boolean}
          * @default false
         */
        "required"?: boolean;
        /**
          * 尺寸规格  控制输入框的整体尺寸： - `lg`: 大尺寸（48px） - `md`: 中尺寸（40px，默认） - `sm`: 小尺寸（32px）
          * @prop size
          * @type {'lg' | 'md' | 'sm'}
          * @default 'md'
          * @reflect
         */
        "size"?: 'lg' | 'md' | 'sm';
        /**
          * 骨架屏状态  设置为 true 时显示加载占位样式
          * @prop skeleton
          * @type {boolean}
          * @default false
         */
        "skeleton"?: boolean;
        /**
          * 输入状态标识  控制输入框的视觉状态反馈： - `default`: 默认状态（无特殊样式） - `error`: 错误状态（红色边框） - `success`: 成功状态（绿色边框） - `warning`: 警告状态（黄色边框）
          * @prop state
          * @type {'default' | 'error' | 'success' | 'warning'}
          * @default 'default'
          * @reflect
         */
        "state"?: 'default' | 'error' | 'success' | 'warning';
        /**
          * 输入值  文本域的当前值，支持双向绑定
          * @prop value
          * @type {string}
          * @mutable
         */
        "value"?: string;
        /**
          * 警告状态  设置为 true 时显示警告样式和警告文本
          * @prop warn
          * @type {boolean}
          * @default false
         */
        "warn"?: boolean;
        /**
          * 警告提示文本  当 warn 为 true 时显示的警告信息
          * @prop warnText
          * @type {string}
         */
        "warnText"?: string;
    }
    /**
     * 时间选择器组件
     */
    interface ZaneTimePicker {
        /**
          * 动态收集的ARIA属性配置对象
          * @remarks 在组件加载时会自动收集宿主元素上所有以"aria-"开头的属性， 存储到该对象后从宿主元素移除，避免重复渲染问题
          * @default {}
         */
        "configAria"?: any;
        /**
          * 禁用状态标志（会反映到DOM属性）
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default false
         */
        "inline"?: boolean;
        /**
          * 自动生成的表单字段名称
          * @example 当gid为"123"时，name值为"zane-input-123"
          * @default `zane-input-${this.gid}`
         */
        "name"?: string;
        /**
          * 当时间选择器失去焦点时触发
          * @event zane-time-picker--blur
          * @type {EventEmitter<FocusEvent>}
         */
        "onZane-time-picker--blur"?: (event: ZaneTimePickerCustomEvent<any>) => void;
        /**
          * 当时间选择器的值发生改变时触发（仅当值实际变化）
          * @event zane-time-picker--change
          * @type {EventEmitter<KeyboardEvent>}
         */
        "onZane-time-picker--change"?: (event: ZaneTimePickerCustomEvent<any>) => void;
        /**
          * 当时间选择器获得焦点时触发
          * @event zane-time-picker--focus
          * @type {EventEmitter<FocusEvent>}
         */
        "onZane-time-picker--focus"?: (event: ZaneTimePickerCustomEvent<any>) => void;
        /**
          * 当时间选择器输入时触发（每次输入都会触发）
          * @event zane-time-picker--input
          * @type {EventEmitter<KeyboardEvent>}
         */
        "onZane-time-picker--input"?: (event: ZaneTimePickerCustomEvent<any>) => void;
        "placeholder"?: string;
        /**
          * @default false
         */
        "readonly"?: boolean;
        /**
          * @default 'md'
         */
        "size"?: 'lg' | 'md' | 'sm';
        /**
          * 时间值绑定
          * @remarks 支持三种格式： - null: 未选择状态 - number: Unix时间戳（毫秒级） - string: ISO格式时间字符串
          * @default ''
         */
        "value"?: null | number | string;
    }
    /**
     * 开关组件
     * 该组件实现了可定制的开关切换控件，支持多种交互状态和样式配置，
     * 符合WAI-ARIA无障碍规范，可无缝集成到表单中使用。
     */
    interface ZaneToggle {
        /**
          * ARIA属性配置对象
          * @prop {Object} configAria - 动态收集的ARIA属性键值对
          * @mutable 允许组件内部修改
          * @reflect 属性值变化时同步到DOM属性
          * @default {}
         */
        "configAria"?: any;
        /**
          * 禁用状态
          * @prop {boolean} disabled - 是否禁用开关交互
          * @default false
          * @reflect 同步到DOM属性
         */
        "disabled"?: boolean;
        /**
          * 开关标签文本
          * @prop {string} label - 显示在开关旁的文本内容
         */
        "label"?: string;
        /**
          * 表单字段名称
          * @prop {string} name - 关联input元素的name属性
          * @default `zane-input-${this.gid}`
         */
        "name"?: string;
        /**
          * 失去焦点事件
          * @event zane-toggle--blur
          * @emits {FocusEvent} 原生焦点事件对象
         */
        "onZane-toggle--blur"?: (event: ZaneToggleCustomEvent<any>) => void;
        /**
          * 值变更事件
          * @event zane-toggle--change
          * @emits {UIEvent} 原生UI事件对象
         */
        "onZane-toggle--change"?: (event: ZaneToggleCustomEvent<any>) => void;
        /**
          * 获得焦点事件
          * @event zane-toggle--focus
          * @emits {FocusEvent} 原生焦点事件对象
         */
        "onZane-toggle--focus"?: (event: ZaneToggleCustomEvent<any>) => void;
        /**
          * 只读状态
          * @prop {boolean} readonly - 是否只读（可聚焦但不可修改）
          * @default false
          * @reflect 同步到DOM属性
         */
        "readonly"?: boolean;
        /**
          * 必填状态
          * @prop {boolean} required - 是否必填项
          * @default false
          * @reflect 同步到DOM属性
         */
        "required"?: boolean;
        /**
          * 圆角样式
          * @prop {boolean} rounded - 是否显示为圆形开关
          * @default true
         */
        "rounded"?: boolean;
        /**
          * 开关尺寸
          * @prop {'lg' | 'md'} size - 控制开关尺寸的枚举值 - 'lg': 大尺寸 (large) - 'md': 中尺寸 (medium)
          * @default 'md'
         */
        "size"?: 'lg' | 'md';
        /**
          * 开关值
          * @prop {boolean} value - 开关当前状态（开/关）
          * @mutable 允许双向绑定
          * @default false
         */
        "value"?: boolean;
    }
    /**
     * 工具提示组件 (zane-tooltip)
     * 该组件实现了一个灵活的工具提示系统，可通过悬停或手动触发显示上下文信息。
     * 支持四种定位方向，可动态绑定目标元素，并适配无障碍规范。
     */
    interface ZaneTooltip {
        /**
          * 工具提示内容
          * @prop {string} content - 显示在提示框内的文本内容
          * @mutable 允许动态更新内容
          * @default ''
         */
        "content"?: string;
        /**
          * 提示框定位方向
          * @prop {string} placements - 逗号分隔的可用定位方向列表
          * @description   支持的定位值：   - 'top'     : 上方定位   - 'bottom'  : 下方定位   - 'right'   : 右侧定位   - 'left'    : 左侧定位
          * @default 'top,bottom,right,left' (支持所有方向)
         */
        "placements"?: string;
        /**
          * 触发方式
          * @prop {'hover' | 'manual'} trigger - 控制提示显示触发的模式 - 'hover' : 鼠标悬停在目标元素时自动触发（默认） - 'manual': 需要通过编程方式触发（如调用show()方法）
          * @default 'hover'
          * @reflect 同步到DOM属性
         */
        "trigger"?: 'hover' | 'manual';
    }
    /**
     * 树形结构可视化组件
     * @example <!-- 基础用法 -->
     * <zane-tree>
     *   <zane-tree-node value="node1">一级节点</zane-tree-node>
     *   <zane-tree-node value="node2">二级节点</zane-tree-node>
     * </zane-tree>
     */
    interface ZaneTree {
        /**
          * 空状态显示开关
          * @prop {boolean} [empty=false] - 是否展示空状态界面
          * @mutable 
          * @example <zane-tree empty></zane-tree>
          * @default false
         */
        "empty"?: boolean;
        /**
          * 空状态配置（JSON 字符串或对象）
          * @prop {string|Object} [emptyState] - 空状态配置参数，支持两种格式： 1. JSON 字符串格式（推荐） 2. 直接传入配置对象
          * @default { "headline": "No items", "description": "There are no items to display" }
          * @mutable 
          * @example <!-- JSON字符串形式 --> <zane-tree empty-state='{"headline":"空数据","description":"请添加节点"}'>  <!-- 对象形式（需通过JS绑定） --> <zane-tree empty-state={myConfig}>
         */
        "emptyState"?: string;
        /**
          * 当前选中节点标识
          * @prop {string} selectedNode - 当前选中节点的唯一标识符（对应zane-tree-node的value）
          * @mutable
         */
        "selectedNode"?: string;
    }
    /**
     * 树形结构节点组件
     */
    interface ZaneTreeNode {
        /**
          * 禁用节点交互
          * @prop {boolean} [disabled=false]
          * @reflect 属性值会同步到 DOM 属性
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 控制子节点展开状态
          * @prop {boolean} [expanded=true]
          * @mutable 允许组件内部修改
          * @reflect 属性值会同步到 DOM 属性
          * @default true
         */
        "expanded"?: boolean;
        /**
          * 链接地址（存在时节点渲染为<a>标签）
          * @prop {string} href
          * @reflect 属性值会同步到 DOM 属性
         */
        "href"?: string;
        /**
          * 节点图标名称（需配合图标库使用）
          * @prop {string} icon
         */
        "icon"?: string;
        /**
          * 节点显示文本
          * @prop {string} [label='']
          * @mutable 允许组件内部修改
          * @default ''
         */
        "label"?: string;
        /**
          * 节点层级（从父节点自动计算）
          * @prop {number} [level=0]
          * @reflect 属性值会同步到 DOM 属性
          * @default 0
         */
        "level"?: number;
        /**
          * 节点点击事件
          * @event zane-tree-node--click
          * @property {boolean} expand - 当前展开状态
          * @property {string} id - 组件全局 ID
          * @property {string} value - 节点标识值（优先取 value，否则使用 label）
         */
        "onZane-tree-node--click"?: (event: ZaneTreeNodeCustomEvent<any>) => void;
        /**
          * 当前选中节点标识符
          * @prop {string} selectedNode
          * @mutable 允许组件内部修改
          * @reflect 属性值会同步到 DOM 属性
         */
        "selectedNode"?: string;
        /**
          * 链接打开方式（仅在设置 href 时生效）
          * @prop {('_self'|'_blank'|'_parent'|'_top')} [target='_self']
          * @defaultValue '_self'
         */
        "target"?: string;
        /**
          * 节点唯一标识符（优先级高于 label）
          * @prop {(null|number|string)} [value]
          * @mutable 允许组件内部修改
         */
        "value"?: null | number | string;
    }
    interface IntrinsicElements {
        "zane-accordion": ZaneAccordion;
        "zane-accordion-item": ZaneAccordionItem;
        "zane-avatar": ZaneAvatar;
        "zane-badge": ZaneBadge;
        "zane-breadcrumb": ZaneBreadcrumb;
        "zane-breadcrumb-item": ZaneBreadcrumbItem;
        "zane-button": ZaneButton;
        "zane-button-group": ZaneButtonGroup;
        "zane-card": ZaneCard;
        "zane-checkbox": ZaneCheckbox;
        "zane-code-editor": ZaneCodeEditor;
        "zane-code-highlighter": ZaneCodeHighlighter;
        "zane-container": ZaneContainer;
        "zane-current-time": ZaneCurrentTime;
        "zane-date-picker": ZaneDatePicker;
        "zane-divider": ZaneDivider;
        "zane-dropdown": ZaneDropdown;
        "zane-dropdown-menu": ZaneDropdownMenu;
        "zane-empty-state": ZaneEmptyState;
        "zane-footer": ZaneFooter;
        "zane-footer-copyright": ZaneFooterCopyright;
        "zane-footer-links": ZaneFooterLinks;
        "zane-form-control": ZaneFormControl;
        "zane-header": ZaneHeader;
        "zane-header-action": ZaneHeaderAction;
        "zane-header-brand": ZaneHeaderBrand;
        "zane-html-editor": ZaneHtmlEditor;
        "zane-icon": ZaneIcon;
        "zane-image": ZaneImage;
        "zane-input": ZaneInput;
        "zane-input-url": ZaneInputUrl;
        "zane-link": ZaneLink;
        "zane-menu": ZaneMenu;
        "zane-menu-divider": ZaneMenuDivider;
        "zane-menu-item": ZaneMenuItem;
        "zane-modal": ZaneModal;
        "zane-modal-content": ZaneModalContent;
        "zane-notification": ZaneNotification;
        "zane-notification-manager": ZaneNotificationManager;
        "zane-number": ZaneNumber;
        "zane-popover": ZanePopover;
        "zane-popover-content": ZanePopoverContent;
        "zane-progress": ZaneProgress;
        "zane-select": ZaneSelect;
        "zane-sidenav": ZaneSidenav;
        "zane-sidenav-menu": ZaneSidenavMenu;
        "zane-sidenav-menu-item": ZaneSidenavMenuItem;
        "zane-slider": ZaneSlider;
        "zane-spinner": ZaneSpinner;
        "zane-svg": ZaneSvg;
        "zane-tab": ZaneTab;
        "zane-tab-panel": ZaneTabPanel;
        "zane-table": ZaneTable;
        "zane-tabs": ZaneTabs;
        "zane-tabs-list": ZaneTabsList;
        "zane-tag": ZaneTag;
        "zane-text": ZaneText;
        "zane-textarea": ZaneTextarea;
        "zane-time-picker": ZaneTimePicker;
        "zane-toggle": ZaneToggle;
        "zane-tooltip": ZaneTooltip;
        "zane-tree": ZaneTree;
        "zane-tree-node": ZaneTreeNode;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * 可折叠面板(Accordion)容器组件
             * 提供可折叠内容区域的容器组件，管理多个折叠项的状态和交互。
             * 支持单开/多开模式、多种尺寸和图标位置配置。
             */
            "zane-accordion": LocalJSX.ZaneAccordion & JSXBase.HTMLAttributes<HTMLZaneAccordionElement>;
            /**
             * 可折叠面板项(Accordion Item)组件
             * 作为zane-accordion的子组件使用，实现单个可折叠面板项的功能
             * @component 
             * @shadowDom 使用Shadow DOM封装组件样式
             */
            "zane-accordion-item": LocalJSX.ZaneAccordionItem & JSXBase.HTMLAttributes<HTMLZaneAccordionItemElement>;
            /**
             * 头像组件
             * @Component 装饰器定义组件元数据
             * @shadow 启用Shadow DOM封装
             * @styleUrl 指定组件样式文件
             * @tag 定义组件在HTML中的标签名
             */
            "zane-avatar": LocalJSX.ZaneAvatar & JSXBase.HTMLAttributes<HTMLZaneAvatarElement>;
            /**
             * 徽章组件
             * @Component 装饰器定义组件元数据
             * @shadow 启用Shadow DOM封装
             * @styleUrl 指定组件样式文件
             * @tag 定义组件在HTML中的标签名
             */
            "zane-badge": LocalJSX.ZaneBadge & JSXBase.HTMLAttributes<HTMLZaneBadgeElement>;
            /**
             * 面包屑导航组件
             * 用于显示当前页面在网站层次结构中的位置，并提供快速导航功能。
             * @example ```html
             * <zane-breadcrumb>
             *   <zane-breadcrumb-item href="/home">首页</zane-breadcrumb-item>
             *   <zane-breadcrumb-item href="/products">产品</zane-breadcrumb-item>
             *   <zane-breadcrumb-item>当前页面</zane-breadcrumb-item>
             * </zane-breadcrumb>
             * ```
             * @Component 装饰器定义了组件的元数据
             * @property {boolean} shadow - 启用 Shadow DOM 封装
             * @property {string} styleUrl - 组件样式文件路径
             * @property {string} tag - 组件的自定义元素标签名
             */
            "zane-breadcrumb": LocalJSX.ZaneBreadcrumb & JSXBase.HTMLAttributes<HTMLZaneBreadcrumbElement>;
            /**
             * 面包屑导航项组件
             * 作为面包屑导航系统的单个项使用，必须作为`zane-breadcrumb`的子元素使用。
             * 支持链接导航、活动状态指示和Schema.org 结构化数据。
             * @example ```html
             * <!-- 活动状态项(当前页面) -->
             * <zane-breadcrumb-item active>
             *   当前页面
             * </zane-breadcrumb-item>
             * <!-- 可点击链接项 -->
             * <zane-breadcrumb-item href="/products" position="2">
             *   产品列表
             * </zane-breadcrumb-item>
             * ```
             * @Component 配置项说明：
             * @property {boolean} shadow - 启用Shadow DOM封装
             * @property {string} styleUrl - 组件样式文件路径
             * @property {string} tag - 自定义元素标签名
             */
            "zane-breadcrumb-item": LocalJSX.ZaneBreadcrumbItem & JSXBase.HTMLAttributes<HTMLZaneBreadcrumbItemElement>;
            /**
             * 多功能按钮组件
             * 提供丰富的交互样式和状态管理，支持：
             * - 多种视觉变体(variant)
             * - 完整的大小(size)控制
             * - 主题颜色(color)系统
             * - 暗黑模式适配
             * - 完善的ARIA可访问性
             * - 图标集成
             * - 加载状态
             * @example 基础使用
             * ```html
             * <zane-button>普通按钮</zane-button>
             * <zane-button variant="outline">轮廓按钮</zane-button>
             * <zane-button icon="settings" iconAlign="start">带图标按钮</zane-button>
             * ```
             * @example 高级使用
             * ```html
             * <zane-button
             * color="danger"
             * darkModeColor="warning"
             * variant="ghost.simple"
             * size="xl"
             * disabled
             * disabledReason="权限不足"
             * >
             * 危险操作
             * </zane-button>
             * ```
             */
            "zane-button": LocalJSX.ZaneButton & JSXBase.HTMLAttributes<HTMLZaneButtonElement>;
            /**
             * 按钮组容器组件
             */
            "zane-button-group": LocalJSX.ZaneButtonGroup & JSXBase.HTMLAttributes<HTMLZaneButtonGroupElement>;
            /**
             * 卡片组件
             * 提供可自定义阴影级别的卡片容器
             */
            "zane-card": LocalJSX.ZaneCard & JSXBase.HTMLAttributes<HTMLZaneCardElement>;
            /**
             * 自定义复选框组件
             * 实现可定制的复选框控件，支持选中/未选/中间态三种状态，
             * 提供完整的ARIA支持、键盘交互和事件响应机制。
             * @example ```html
             * <zane-checkbox
             *   label="同意协议"
             *   size="md"
             *   layer="02"
             *   rounded
             *   required
             * ></zane-checkbox>
             * ```
             */
            "zane-checkbox": LocalJSX.ZaneCheckbox & JSXBase.HTMLAttributes<HTMLZaneCheckboxElement>;
            /**
             * 基于Monaco Editor的代码编辑器组件
             * 提供语法高亮、智能提示等专业编辑功能，支持暗黑/亮色主题切换，
             * 内置防抖机制优化高频变更事件，适用于代码片段展示和实时编辑场景。
             * @example ```html
             * <zane-code-editor
             *   language="javascript"
             *   minimap
             *   debounce="500"
             *   value="console.log('Hello  World')"
             * ></zane-code-editor>
             * ```
             */
            "zane-code-editor": LocalJSX.ZaneCodeEditor & JSXBase.HTMLAttributes<HTMLZaneCodeEditorElement>;
            /**
             * 代码高亮组件
             * @Component 装饰器定义组件元数据
             * @shadow 启用Shadow DOM封装
             * @styleUrl 组件样式表路径
             * @tag 组件自定义标签名称
             */
            "zane-code-highlighter": LocalJSX.ZaneCodeHighlighter & JSXBase.HTMLAttributes<HTMLZaneCodeHighlighterElement>;
            /**
             * 容器布局组件
             * @Component 装饰器定义组件元数据
             * @shadow 启用Shadow DOM封装
             * @styleUrl 组件样式表路径
             * @tag 组件自定义标签名称
             */
            "zane-container": LocalJSX.ZaneContainer & JSXBase.HTMLAttributes<HTMLZaneContainerElement>;
            /**
             * 当前时间显示组件
             * @Component 装饰器定义组件元数据
             * @shadow 启用Shadow DOM封装
             * @styleUrl 组件样式表路径
             * @tag 组件自定义标签名称
             */
            "zane-current-time": LocalJSX.ZaneCurrentTime & JSXBase.HTMLAttributes<HTMLZaneCurrentTimeElement>;
            /**
             * 日期选择器组件
             * @Component 装饰器定义组件元数据
             * @shadow 启用Shadow DOM封装
             * @styleUrl 组件样式表路径
             * @tag 组件自定义标签名称
             */
            "zane-date-picker": LocalJSX.ZaneDatePicker & JSXBase.HTMLAttributes<HTMLZaneDatePickerElement>;
            /**
             * 分割线组件
             * @Component 装饰器定义组件元数据
             * @shadow 启用Shadow DOM封装
             * @styleUrl 组件样式表路径
             * @tag 组件自定义标签名称
             */
            "zane-divider": LocalJSX.ZaneDivider & JSXBase.HTMLAttributes<HTMLZaneDividerElement>;
            /**
             * 下拉菜单组件
             * @Component 装饰器定义组件元数据
             * @shadow 启用Shadow DOM封装
             * @styleUrl 组件样式表路径
             * @tag 组件自定义标签名称
             */
            "zane-dropdown": LocalJSX.ZaneDropdown & JSXBase.HTMLAttributes<HTMLZaneDropdownElement>;
            /**
             * 下拉菜单内容组件（需与zane-dropdown配合使用）
             * @Component 装饰器定义组件元数据
             * @shadow 启用Shadow DOM封装
             * @styleUrl 组件样式表路径
             * @tag 组件自定义标签名称
             */
            "zane-dropdown-menu": LocalJSX.ZaneDropdownMenu & JSXBase.HTMLAttributes<HTMLZaneDropdownMenuElement>;
            /**
             * 空状态(Empty State)组件
             * 用于展示无数据时的占位内容，包含插图、标题、描述和操作按钮
             * @component 
             * @shadowDom 使用Shadow DOM封装组件样式
             * @implements ComponentInterface 实现Stencil组件生命周期接口
             */
            "zane-empty-state": LocalJSX.ZaneEmptyState & JSXBase.HTMLAttributes<HTMLZaneEmptyStateElement>;
            /**
             * 页脚(Footer)组件
             * 提供可定制的页脚布局，支持多种变体和插槽内容
             * @component 
             * @shadowDom 使用Shadow DOM封装组件样式
             */
            "zane-footer": LocalJSX.ZaneFooter & JSXBase.HTMLAttributes<HTMLZaneFooterElement>;
            /**
             * 页脚版权(Footer Copyright)组件
             * 用于展示标准版权声明，包含年份、版权所有者链接和保留权利声明
             * @component 
             * @shadowDom 使用Shadow DOM封装组件样式
             */
            "zane-footer-copyright": LocalJSX.ZaneFooterCopyright & JSXBase.HTMLAttributes<HTMLZaneFooterCopyrightElement>;
            /**
             * 页脚链接(Footer Links)组件
             * 用于展示页脚导航链接列表，支持动态链接数据传入
             * @component 
             * @shadowDom 使用Shadow DOM封装组件样式
             */
            "zane-footer-links": LocalJSX.ZaneFooterLinks & JSXBase.HTMLAttributes<HTMLZaneFooterLinksElement>;
            /**
             * 表单控件容器组件
             * @Component 装饰器定义组件元数据
             * @shadow 启用Shadow DOM封装
             * @styleUrl 组件样式表路径
             * @tag 组件自定义标签名称
             */
            "zane-form-control": LocalJSX.ZaneFormControl & JSXBase.HTMLAttributes<HTMLZaneFormControlElement>;
            /**
             * 头部组件，提供可定制的页面顶部导航栏
             * @Component 装饰器定义组件元数据
             * @shadow 启用Shadow DOM封装
             * @styleUrl 指定组件样式文件
             * @tag 定义组件在HTML中的标签名
             */
            "zane-header": LocalJSX.ZaneHeader & JSXBase.HTMLAttributes<HTMLZaneHeaderElement>;
            /**
             * 头部操作按钮组件，用于在头部导航栏中创建可交互的操作项
             * @Component 装饰器定义组件元数据
             * @shadow 启用Shadow DOM封装
             * @styleUrl 指定组件样式文件
             * @tag 定义组件在HTML中的标签名
             */
            "zane-header-action": LocalJSX.ZaneHeaderAction & JSXBase.HTMLAttributes<HTMLZaneHeaderActionElement>;
            /**
             * 头部品牌标识组件，用于显示网站/应用的品牌标识和名称
             * @Component 装饰器定义组件元数据
             * @shadow 启用Shadow DOM封装
             * @styleUrl 指定组件样式文件
             * @tag 定义组件在HTML中的标签名
             */
            "zane-header-brand": LocalJSX.ZaneHeaderBrand & JSXBase.HTMLAttributes<HTMLZaneHeaderBrandElement>;
            /**
             * 基于 Tiptap 的富文本编辑器组件，支持：
             * - HTML 源码编辑
             * - Mention（@提及）自动补全功能
             * - 内置工具条（加粗、斜体、列表等）
             * - 主题切换（vs-dark / vs-light）
             * - 可视化编辑与 HTML 源码切换
             * - 与表单集成（name、required、readonly 等属性）
             */
            "zane-html-editor": LocalJSX.ZaneHtmlEditor & JSXBase.HTMLAttributes<HTMLZaneHtmlEditorElement>;
            /**
             * 图标组件（zane-icon）
             * 该组件基于 Stencil 构建，用于按需异步加载并渲染 SVG 图标。
             * 支持通过属性 name 指定图标名称，通过 size 控制图标尺寸。
             * 组件内部使用 Shadow DOM 实现样式隔离，并暴露 CSS 自定义属性
             * `--zane-icon-size` 供外部覆盖默认尺寸。
             * @example <!-- 基础用法 -->
             * <zane-icon name="home" size="md"></zane-icon>
             * <!-- 自定义尺寸 -->
             * <zane-icon name="user" size="32px"></zane-icon>
             */
            "zane-icon": LocalJSX.ZaneIcon & JSXBase.HTMLAttributes<HTMLZaneIconElement>;
            /**
             * 自适应主题图片组件（zane-image）
             * 该组件能够根据当前系统的明暗主题自动切换显示的图片资源。
             * 当检测到处于暗色模式时，优先使用 darkSrc 指定的暗色主题图片；
             * 否则使用 src 指定的默认图片。
             * 组件内部通过监听主题变化事件实现实时切换，无需手动刷新。
             * @example <!-- 基础用法 -->
             * <zane-image
             *   src="assets/logo-light.svg"
             *   dark-src="assets/logo-dark.svg"
             *   image-title="公司 Logo">
             * </zane-image>
             */
            "zane-image": LocalJSX.ZaneImage & JSXBase.HTMLAttributes<HTMLZaneImageElement>;
            /**
             * 自定义输入框组件 zane-input
             * 实现功能：
             * 1. 支持多种输入类型（文本、密码、邮箱等）及尺寸控制
             * 2. 包含表单验证状态（错误/警告）及辅助文本展示
             * 3. 提供前后插槽(start/end)扩展能力
             * 4. 支持防抖事件处理与无障碍访问
             * 5. 集成密码可见性切换功能
             */
            "zane-input": LocalJSX.ZaneInput & JSXBase.HTMLAttributes<HTMLZaneInputElement>;
            /**
             * 双模式URL输入组件
             * @component zane-input-url
             * @tags form-control, input, url
             * @shadow true
             * @description 提供URL输入与预览双模式交互的输入组件。在展示模式下显示可点击的URL链接，
             * 在编辑模式下提供带验证功能的输入框。支持防抖值变化事件和实时URL验证。
             * @example <!-- 基础用法 -->
             * <zane-input-url
             *   value="https://example.com"
             *   placeholder="输入网站地址"
             * />
             * <!-- 带尺寸控制 -->
             * <zane-input-url size="sm" />
             */
            "zane-input-url": LocalJSX.ZaneInputUrl & JSXBase.HTMLAttributes<HTMLZaneInputUrlElement>;
            /**
             * 智能链接组件
             * @component zane-link
             * @tags navigation, link, interactive
             * @shadow true
             * @description 增强型可交互链接组件，支持动态状态反馈和键盘导航优化。
             * 特性包括：
             * - 视觉状态反馈（聚焦/激活）
             * - 空格键触发点击
             * - 跨浏览器兼容的焦点管理
             * - 无障碍属性支持
             * @example <!-- 基础链接 -->
             * <zane-link href="/about">关于我们</zane-link>
             * <!-- 新窗口打开 -->
             * <zane-link href="https://external.com"  target="_blank">
             *   外部链接
             * </zane-link>
             */
            "zane-link": LocalJSX.ZaneLink & JSXBase.HTMLAttributes<HTMLZaneLinkElement>;
            /**
             * 多功能菜单容器组件
             * @component zane-menu
             * @tags navigation, menu, container
             * @shadow true
             * @description 提供标准化的菜单容器实现，支持：
             * - 多种视觉尺寸层级
             * - 键盘导航支持
             * - 空状态展示
             * - 动态焦点管理
             * @example <!-- 基础菜单 -->
             * <zane-menu>
             *   <zane-menu-item>选项一</zane-menu-item>
             *   <zane-menu-item>选项二</zane-menu-item>
             * </zane-menu>
             * <!-- 空状态菜单 -->
             * <zane-menu empty empty-state-headline="无数据" empty-state-description="请添加菜单项">
             * </zane-menu>
             */
            "zane-menu": LocalJSX.ZaneMenu & JSXBase.HTMLAttributes<HTMLZaneMenuElement>;
            /**
             * 菜单分隔线组件
             * @component zane-menu-divider
             * @shadow true
             * @description 提供菜单项之间的视觉分隔效果，用于增强菜单结构的可读性。该组件：
             * - 实现菜单项分组逻辑分隔
             * - 支持深浅主题色自动适配
             * - 提供标准化的间距和高度
             * @example <!-- 基础用法 -->
             * <zane-menu>
             *   <zane-menu-item>选项一</zane-menu-item>
             *   <zane-menu-divider></zane-menu-divider> <!-- 分隔线 -->
             *   <zane-menu-item>选项二</zane-menu-item>
             * </zane-menu>
             * <!-- 分组场景 -->
             * <zane-menu>
             *   <zane-menu-item>操作类</zane-menu-item>
             *   <zane-menu-divider></zane-menu-divider>
             *   <zane-menu-item>设置类</zane-menu-item>
             * </zane-menu>
             */
            "zane-menu-divider": LocalJSX.ZaneMenuDivider & JSXBase.HTMLAttributes<HTMLZaneMenuDividerElement>;
            /**
             * 菜单项组件 (zane-menu-item)
             * @component zane-menu-item
             * @shadow true
             * @description 实现标准导航菜单项的核心组件，提供：
             * - 多状态交互（正常/选中/禁用/聚焦）
             * - 8种语义化色彩主题
             * - 可选中标记功能（带对勾图标）
             * - 原生链接支持（href/target）
             * - 键盘导航支持（空格/回车触发）
             * - 无障碍ARIA兼容设计
             * @example <!-- 基础文本菜单项 -->
             * <zane-menu-item>个人中心</zane-menu-item>
             * <!-- 带图标和选中状态的菜单项 -->
             * <zane-menu-item selected selectable>
             *   收件箱
             *   <zane-badge slot="end">12</zane-badge>
             * </zane-menu-item>
             * <!-- 作为链接的菜单项 -->
             * <zane-menu-item
             *   href="/settings"
             *   color="primary"
             *   target="_blank">
             *   系统设置
             * </zane-menu-item>
             * @designSystem | 状态         | 视觉特征                     |
             * |--------------|----------------------------|
             * | 正常         | 浅灰背景，深灰文字          |
             * | 悬停         | 浅蓝色背景（#f0f7ff）       |
             * | 聚焦         | 2px蓝色边框（#1a73e8）      |
             * | 选中         | 左侧蓝色条+对勾图标         |
             * | 禁用         | 50%透明度，阻止交互事件     |
             */
            "zane-menu-item": LocalJSX.ZaneMenuItem & JSXBase.HTMLAttributes<HTMLZaneMenuItemElement>;
            /**
             * 模态框组件 (zane-modal)
             * @component zane-modal
             * @shadow true
             * @description 提供企业级应用的模态对话框解决方案，支持：
             * - 多种预设尺寸响应式布局
             * - 灵活的内容插槽（头部/主体/底部）
             * - 加载状态可视化
             * - 可控关闭行为（自动关闭/受控关闭）
             * - 无障碍访问支持
             * - 滚动条自动管理
             * @example <!-- 基础用法 -->
             * <zane-modal
             *   heading="确认操作"
             *   open={true}>
             *   <p>确定要删除此项吗？</p>
             *   <div slot="footer">
             *     <zane-button>取消</zane-button>
             *     <zane-button variant="primary">确定</zane-button>
             *   </div>
             * </zane-modal>
             * <!-- 带加载状态的模态框 -->
             * <zane-modal
             *   heading="数据处理中"
             *   open={true}
             *   showLoader={true}>
             *   <p>请稍候，正在保存您的数据...</p>
             * </zane-modal>
             */
            "zane-modal": LocalJSX.ZaneModal & JSXBase.HTMLAttributes<HTMLZaneModalElement>;
            /**
             * 模态框内容容器组件 (zane-modal-content)
             * @component zane-modal-content
             * @shadow true
             * @description 专为 zane-modal 设计的结构化内容容器，提供三种预设内容样式方案，
             * 支持动态切换内容展示模式。作为模态框生态系统的核心子组件，实现：
             * - 内容区域样式规范化
             * - 自适应内容布局
             * - 多场景内容样式预设
             * - 无缝衔接父级模态框的交互状态
             * @see {@link zane-modal } 关联的父级模态框组件
             * @example <!-- 默认带边框样式 -->
             * <zane-modal-content>
             *   <p>标准内容区块</p>
             * </zane-modal-content>
             * <!-- 无边框模式 -->
             * <zane-modal-content type="borderless">
             *   <img src="data-chart.png"  alt="数据图表"/>
             * </zane-modal-content>
             * <!-- 文本优化模式 -->
             * <zane-modal-content type="text">
             *   <h3>服务条款</h3>
             *   <p>这里是详细的协议文本内容...</p>
             * </zane-modal-content>
             */
            "zane-modal-content": LocalJSX.ZaneModalContent & JSXBase.HTMLAttributes<HTMLZaneModalContentElement>;
            /**
             * 智能通知系统组件 (zane-notification)
             * @component zane-notification
             * @shadow true
             * @description 提供多场景智能通知解决方案，支持四态反馈、操作交互和主题适配。
             * 核心功能包括：
             * - 状态图标自动匹配
             * - 暗黑模式/高对比度自适应
             * - 内联/块级布局切换
             * - 可定制的操作按钮
             * - 可控的关闭行为
             * - 无障碍访问支持
             * @example <!-- 基础警告通知 -->
             * <zane-notification state="warning" dismissible>
             *   <span slot="title">存储空间不足</span>
             *   <span slot="subtitle">剩余 5% 磁盘空间，建议清理缓存</span>
             * </zane-notification>
             * <!-- 带操作的成功通知 -->
             * <zane-notification state="success" action="查看详情" high-contrast>
             *   <span slot="title">支付成功</span>
             *   <span slot="subtitle">订单号：20250719-2156</span>
             * </zane-notification>
             */
            "zane-notification": LocalJSX.ZaneNotification & JSXBase.HTMLAttributes<HTMLZaneNotificationElement>;
            /**
             * 智能通知管理系统组件 (zane-notification-manager)
             * @component zane-notification-manager
             * @shadow true
             * @description 全局通知管理中心，提供以下核心能力：
             * 1. 跨组件通知聚合：通过事件总线收集全应用通知
             * 2. 多位置布局：支持4种屏幕定位策略
             * 3. 生命周期管理：自动关闭/手动关闭/防重复
             * 4. 安全渲染：内置DOM净化防止XSS攻击
             * 5. 主题适配：自动同步暗黑模式状态
             * @example <!-- 基础用法 -->
             * <zane-notification-manager position="top-right"></zane-notification-manager>
             * <!-- 自定义命名管理器 -->
             * <zane-notification-manager name="dashboard" position="bottom-left"></zane-notification-manager>
             */
            "zane-notification-manager": LocalJSX.ZaneNotificationManager & JSXBase.HTMLAttributes<HTMLZaneNotificationManagerElement>;
            /**
             * 数字输入框组件 zane-number
             * 核心功能：
             * 1. 支持数字输入及增减按钮控制
             * 2. 提供四种状态反馈（默认/成功/警告/错误）
             * 3. 表单验证支持（必填/禁用/只读）
             * 4. 防抖事件处理与无障碍访问优化
             * 5. 插槽扩展能力（前后扩展区域）
             * @implements ComponentInterface *
             * @implements InputComponentInterface *
             */
            "zane-number": LocalJSX.ZaneNumber & JSXBase.HTMLAttributes<HTMLZaneNumberElement>;
            /**
             * 弹出框组件（Popover）
             * @component zane-popover
             * @shadow true
             * @description `zane-popover` 是一个灵活的弹出框组件，可以在目标元素周围显示内容。它支持多种触发方式（点击、悬停、手动控制）、多种箭头样式以及自定义位置。
             * 使用此组件时，需要在组件内部放置一个 `zane-popover-content` 组件作为弹出内容，以及一个触发元素（例如按钮）。
             * @example <zane-popover trigger="click">
             *   <button>点击我</button>
             *   <zane-popover-content>
             *     这里是弹出内容
             *   </zane-popover-content>
             * </zane-popover>
             */
            "zane-popover": LocalJSX.ZanePopover & JSXBase.HTMLAttributes<HTMLZanePopoverElement>;
            /**
             * 弹出框内容容器组件 (zane-popover-content)
             * @component zane-popover-content
             * @shadow true
             * @description 弹出框系统的核心内容承载容器，提供以下核心功能：
             * 1. 结构化内容容器：为弹出内容提供标准化的布局结构
             * 2. 动态箭头指示器：根据父组件配置自动调整箭头样式和位置
             * 3. 无障碍支持：内置ARIA角色属性增强可访问性
             * 4. 主题适配：通过CSS变量支持深度主题定制
             * @dependency 必须作为`<zane-popover>`组件的直接子元素使用
             * @example <!-- 基础用法 -->
             * <zane-popover-content>
             *   <h3>标题</h3>
             *   <p>详细说明内容...</p>
             *   <button>确认</button>
             * </zane-popover-content>
             * <!-- 带样式定制 -->
             * <zane-popover-content style="--background: #2c3e50; --color: white">
             *   ...
             * </zane-popover-content>
             */
            "zane-popover-content": LocalJSX.ZanePopoverContent & JSXBase.HTMLAttributes<HTMLZanePopoverContentElement>;
            /**
             * 动态进度指示器组件 (zane-progress)
             * @component zane-progress
             * @shadow true
             * @description 提供可视化任务进程的进度指示器，支持多种状态显示和尺寸配置。适用于文件上传、数据加载、操作流程等场景。
             * @example <!-- 基础用法 -->
             * <zane-progress value={75}></zane-progress>
             * <!-- 带标签和状态 -->
             * <zane-progress
             *   value={50}
             *   label="上传进度"
             *   status="active"
             *   helperText="剩余时间：2分钟"
             * ></zane-progress>
             * <!-- 错误状态 -->
             * <zane-progress
             *   value={30}
             *   status="error"
             *   helperText="上传失败，请重试"
             * ></zane-progress>
             */
            "zane-progress": LocalJSX.ZaneProgress & JSXBase.HTMLAttributes<HTMLZaneProgressElement>;
            /**
             * 基于 Floating UI 的增强型下拉选择组件
             * @component 
             * @tag zane-select
             * @implements ComponentInterface , InputComponentInterface}
             * @example <!-- 基础用法 -->
             * <zane-select
             *   items={[{label: '选项1', value: 1}]}
             *   placeholder="请选择"
             *   size="md"
             * />
             */
            "zane-select": LocalJSX.ZaneSelect & JSXBase.HTMLAttributes<HTMLZaneSelectElement>;
            /**
             * 侧边导航栏组件，提供页面侧边导航功能
             * @Component 装饰器定义组件元数据
             * @shadow 启用Shadow DOM封装
             * @styleUrl 指定组件样式文件
             * @tag 定义组件在HTML中的标签名
             */
            "zane-sidenav": LocalJSX.ZaneSidenav & JSXBase.HTMLAttributes<HTMLZaneSidenavElement>;
            /**
             * 侧边导航菜单组件
             * @Component 装饰器定义组件元数据
             * @shadow 启用Shadow DOM封装
             * @styleUrl 指定组件样式文件
             * @tag 定义组件在HTML中的标签名
             */
            "zane-sidenav-menu": LocalJSX.ZaneSidenavMenu & JSXBase.HTMLAttributes<HTMLZaneSidenavMenuElement>;
            /**
             * 侧边导航菜单项组件
             * @Component 装饰器定义组件元数据
             * @shadow 启用Shadow DOM封装
             * @styleUrl 指定组件样式文件
             * @tag 定义组件在HTML中的标签名
             */
            "zane-sidenav-menu-item": LocalJSX.ZaneSidenavMenuItem & JSXBase.HTMLAttributes<HTMLZaneSidenavMenuItemElement>;
            /**
             * 滑动选择器组件
             * 提供可拖动的滑块选择器，支持鼠标/触摸交互、键盘操作和数值输入框集成。
             * @component zane-slider
             * @tags zane-slider
             * @shadow true
             * @example <!-- 基础用法 -->
             * <zane-slider min="0" max="100" value="50"></zane-slider>
             * <!-- 禁用状态 -->
             * <zane-slider disabled value="30"></zane-slider>
             * <!-- 隐藏数值输入框 -->
             * <zane-slider show-only-slider value="75"></zane-slider>
             */
            "zane-slider": LocalJSX.ZaneSlider & JSXBase.HTMLAttributes<HTMLZaneSliderElement>;
            /**
             * 加载指示器组件 (zane-spinner)
             * @component 
             * @shadow true
             * @description 用于表示加载状态的动画指示器，支持自定义尺寸和样式。
             * @example <!-- 基本用法 -->
             * <zane-spinner></zane-spinner>
             * <!-- 自定义描述文本 -->
             * <zane-spinner description="数据加载中"></zane-spinner>
             * <!-- 隐藏背景圆环 -->
             * <zane-spinner hide-background></zane-spinner>
             */
            "zane-spinner": LocalJSX.ZaneSpinner & JSXBase.HTMLAttributes<HTMLZaneSpinnerElement>;
            /**
             * SVG 动态加载组件 (zane-svg)
             * @component 
             * @shadow true
             * @description 智能 SVG 图标容器，支持动态加载、尺寸控制与样式继承
             * @example <!-- 基础用法 -->
             * <zane-svg src="/assets/icon.svg"></zane-svg>
             * <!-- 带尺寸控制 -->
             * <zane-svg src="/assets/logo.svg"  size="xl"></zane-svg>
             * <!-- 自定义尺寸 -->
             * <zane-svg src="/assets/chart.svg"  size="32px"></zane-svg>
             */
            "zane-svg": LocalJSX.ZaneSvg & JSXBase.HTMLAttributes<HTMLZaneSvgElement>;
            /**
             * 单个标签页元素，支持多种交互状态和类型
             */
            "zane-tab": LocalJSX.ZaneTab & JSXBase.HTMLAttributes<HTMLZaneTabElement>;
            /**
             * 标签页内容面板容器
             * 该组件与 zane-tab 标签页组件配合使用，形成完整的标签页系统。当标签页被激活时，
             * 关联的面板内容将显示在界面中，支持层级深度控制以实现复杂的视觉层次效果。
             * @example <zane-tab-panel value="profile" active>
             *   用户资料详情内容
             * </zane-tab-panel>
             */
            "zane-tab-panel": LocalJSX.ZaneTabPanel & JSXBase.HTMLAttributes<HTMLZaneTabPanelElement>;
            "zane-table": LocalJSX.ZaneTable & JSXBase.HTMLAttributes<HTMLZaneTableElement>;
            /**
             * 标签页容器组件，用于管理和切换多个标签页
             */
            "zane-tabs": LocalJSX.ZaneTabs & JSXBase.HTMLAttributes<HTMLZaneTabsElement>;
            "zane-tabs-list": LocalJSX.ZaneTabsList & JSXBase.HTMLAttributes<HTMLZaneTabsListElement>;
            /**
             * 多功能标签/徽章组件
             * 提供灵活的内容展示能力，支持多种颜色主题、尺寸规格、可关闭操作和选中状态。
             * 适用于分类标记、状态指示、可选项选择等场景，可与表单组件或列表组件配合使用。
             * @example <!-- 基础用法 -->
             * <zane-tag>默认标签</zane-tag>
             * <!-- 带关闭按钮 -->
             * <zane-tag dismissible>可关闭标签</zane-tag>
             * <!-- 带图片 -->
             * <zane-tag image-src="/path/to/avatar.jpg"> 用户标签</zane-tag>
             */
            "zane-tag": LocalJSX.ZaneTag & JSXBase.HTMLAttributes<HTMLZaneTagElement>;
            /**
             * 多功能文本展示组件
             * 提供丰富的文本样式和语义化支持，满足不同场景的文本展示需求。支持多种文本类型、
             * 颜色主题、标题级别和响应式文本大小，集成了完善的 ARIA 可访问性支持。
             * @example <!-- 基础文本 -->
             * <zane-text>普通段落文本</zane-text>
             * <!-- 标题文本 -->
             * <zane-text type="heading" heading-level="2">二级标题</zane-text>
             * <!-- 带颜色的辅助文本 -->
             * <zane-text type="helper-text" color="helper">表单提示文本</zane-text>
             */
            "zane-text": LocalJSX.ZaneText & JSXBase.HTMLAttributes<HTMLZaneTextElement>;
            /**
             * 多功能文本区域输入组件
             * 提供完整的表单文本区域解决方案，支持响应式布局、表单验证、辅助文本提示和丰富的交互功能。
             * 集成了 ARIA 可访问性支持和多状态反馈设计，适用于复杂表单场景。
             * @example <!-- 基础用法 -->
             * <zane-textarea label="用户反馈" placeholder="请输入您的建议"></zane-textarea>
             * <!-- 带验证状态 -->
             * <zane-textarea
             *   label="密码"
             *   state="error"
             *   invalid-text="密码长度不足8位"
             * ></zane-textarea>
             */
            "zane-textarea": LocalJSX.ZaneTextarea & JSXBase.HTMLAttributes<HTMLZaneTextareaElement>;
            /**
             * 时间选择器组件
             */
            "zane-time-picker": LocalJSX.ZaneTimePicker & JSXBase.HTMLAttributes<HTMLZaneTimePickerElement>;
            /**
             * 开关组件
             * 该组件实现了可定制的开关切换控件，支持多种交互状态和样式配置，
             * 符合WAI-ARIA无障碍规范，可无缝集成到表单中使用。
             */
            "zane-toggle": LocalJSX.ZaneToggle & JSXBase.HTMLAttributes<HTMLZaneToggleElement>;
            /**
             * 工具提示组件 (zane-tooltip)
             * 该组件实现了一个灵活的工具提示系统，可通过悬停或手动触发显示上下文信息。
             * 支持四种定位方向，可动态绑定目标元素，并适配无障碍规范。
             */
            "zane-tooltip": LocalJSX.ZaneTooltip & JSXBase.HTMLAttributes<HTMLZaneTooltipElement>;
            /**
             * 树形结构可视化组件
             * @example <!-- 基础用法 -->
             * <zane-tree>
             *   <zane-tree-node value="node1">一级节点</zane-tree-node>
             *   <zane-tree-node value="node2">二级节点</zane-tree-node>
             * </zane-tree>
             */
            "zane-tree": LocalJSX.ZaneTree & JSXBase.HTMLAttributes<HTMLZaneTreeElement>;
            /**
             * 树形结构节点组件
             */
            "zane-tree-node": LocalJSX.ZaneTreeNode & JSXBase.HTMLAttributes<HTMLZaneTreeNodeElement>;
        }
    }
}
