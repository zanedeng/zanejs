/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Language } from "./constants";
export { Language } from "./constants";
export namespace Components {
    /**
     * @name Accordion
     * @description An accordion is a vertically stacked list of headers that reveal or hide associated sections of content.
     * @overview  <p>The accordion component delivers large amounts of content in a small space through progressive disclosure. The header title give the user a high level overview of the content allowing the user to decide which sections to read.</p>
     *  <p>Accordions can make information processing and discovering more effective. However, it does hide content from users and it’s important to account for a user not noticing or reading all of the included content. If a user is likely to read all of the content then don’t use an accordion as it adds the burden of an extra click; instead use a full scrolling page with normal headers.</p>
     * @category Data Display
     * @subcategory Accordion
     * @tags display
     * @img /assets/img/accordion.webp
     * @imgDark /assets/img/accordion-dark.webp
     */
    interface ZaneAccordion {
        /**
          * Accordion item dropdown alignment.
          * @default 'end'
         */
        "align": 'end' | 'start';
        /**
          * @default false
         */
        "multiple": boolean;
        /**
          * The According size.
          * @default 'md'
         */
        "size": 'lg' | 'md' | 'sm';
    }
    /**
     * @name Accordion Item
     * @description An accordion item is single item in an accordion list. It contains a header and a content section that can be expanded or collapsed by the user.
     * @overview  <p>The accordion item component is a single item in an accordion list. It contains a header and a content section that can be expanded or collapsed by the user. The accordion item can be used in conjunction with the accordion component to create a list of expandable items.</p>
     * @category Data Display
     * @subcategory Accordion
     * @childComponent true
     */
    interface ZaneAccordionItem {
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled": boolean;
        /**
          * The menu item value.
         */
        "heading": string;
        /**
          * Menu item selection state.
          * @default false
         */
        "open": boolean;
    }
    /**
     * @name Avatar
     * @description The Avatar component is used to represent user, and displays the profile picture, initials or fallback icon.
     * @category Data Display
     * @tags display
     * @example <zane-avatar size="5rem" name="Shivaji Varma" src="/assets/img/avatar.webp"></zane-avatar>
     */
    interface ZaneAvatar {
        /**
          * @default ''
         */
        "name": string;
        /**
          * Avatar size.
          * @default '2rem'
         */
        "size": string;
        /**
          * @default ''
         */
        "src": string;
    }
    /**
     * @name Badge
     * @description The badge component is used to display a small amount of information to the user.
     * @category Informational
     * @tag content
     * @example <zane-badge content="5"> <zane-icon name="notification" size="2rem"></zane-icon></zane-badge>
     */
    interface ZaneBadge {
        /**
          * @default 'error'
         */
        "color": | 'error'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning';
        "content": string;
    }
    /**
     * @name Breadcrumb
     * @description A breadcrumb is a secondary navigation scheme that reveals the user's location in a website or web application.
     * @category Navigation
     * @tags navigation
     * @example <zane-breadcrumb><zane-breadcrumb-item href="#">Home</zane-breadcrumb-item><zane-breadcrumb-item href="#" active>Page</zane-breadcrumb-item></zane-breadcrumb>
     */
    interface ZaneBreadcrumb {
    }
    interface ZaneBreadcrumbItem {
        /**
          * @default false
         */
        "active": boolean;
        /**
          * Hyperlink to navigate to on click.
         */
        "href": string;
        "position": string;
        /**
          * Sets or retrieves the window or frame at which to target content.
         */
        "target": string;
    }
    /**
     * @name Button
     * @description Buttons are used to initialize an action. Button labels express what action will occur when the user interacts with it.
     * @overview  <p>Buttons are clickable elements that are used to trigger actions. They communicate calls to action to the user and allow users to interact with pages in a variety of ways. Button labels express what action will occur when the user interacts with it.</p>
     * @category General
     * @tags controls
     * @example <zane-button>
     * Button CTA
     * </zane-button>
     */
    interface ZaneButton {
        /**
          * The `appendData` property allows you to attach additional data to the button component. This data can be of any type, making it versatile for various use cases. It's particularly useful for passing extra context or information that can be accessed in event handlers or other component logic.
         */
        "appendData": any;
        /**
          * Defines the primary color of the button. This can be set to predefined color names to apply specific color themes.
          * @default 'primary'
         */
        "color": | 'black'
    | 'danger'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning'
    | 'white';
        /**
          * @default {}
         */
        "configAria": any;
        /**
          * Color variant for dark mode, applicable when [data-theme="dark"] is set.
         */
        "darkModeColor"?: | 'black'
    | 'danger'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning'
    | 'white';
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled": boolean;
        /**
          * If button is disabled, the reason why it is disabled.
          * @default ''
         */
        "disabledReason": string;
        /**
          * Hyperlink to navigate to on click.
         */
        "href": string;
        /**
          * Icon which will displayed on button. Possible values are icon names.
         */
        "icon"?: string;
        /**
          * Icon alignment. Possible values are `"start"`, `"end"`. Defaults to `"end"`.
          * @default 'end'
         */
        "iconAlign": 'end' | 'start';
        /**
          * Button selection state.
          * @default false
         */
        "selected": boolean;
        /**
          * Sets blur on the native `button` in `zane-button`. Use this method instead of the global `button.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `button` in `zane-button`. Use this method instead of the global `button.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * If true, a loader will be displayed on button.
          * @default false
         */
        "showLoader": boolean;
        /**
          * Button size. Possible values are `"sm"`, `"md"`, `"lg"`, `"xl"`, `"2xl"`, `"full"`. Defaults to `"md"`.
          * @default 'md'
         */
        "size": '2xl' | 'lg' | 'md' | 'sm' | 'xl' | 'xs';
        /**
          * Sets or retrieves the window or frame at which to target content.
          * @default '_self'
         */
        "target": string;
        /**
          * Sets the delay for throttle in milliseconds. Defaults to 200 milliseconds.
          * @default 200
         */
        "throttleDelay": number;
        /**
          * If true, the button will be in a toggled state.
          * @default false
         */
        "toggle": boolean;
        /**
          * Triggers a click event on the native `button` in `zane-button`. Use this method instead of the global `button.click()`.
         */
        "triggerClick": () => Promise<void>;
        /**
          * Button type based on which actions are performed when the button is clicked.
          * @default 'button'
         */
        "type": 'button' | 'reset' | 'submit';
        /**
          * The visual style of the button.   Possible variant values: `"default"` is a filled button. `"outline"` is an outlined button. `"ghost"` is a transparent button. `"light"` is a light color button.  Possible sub-variant values: `"simple"` is a simple button without default padding at end. `"block"` is a full-width button that spans the full width of its container.    Mix and match the `variant` and `sub-variant` to create a variety of buttons.  `"default.simple"`, `"outline.block"` etc.
          * @default 'default'
         */
        "variant": | 'default'
    | 'default.simple'
    | 'ghost'
    | 'ghost.simple'
    | 'light'
    | 'light.simple'
    | 'link'
    | 'link.simple'
    | 'neo'
    | 'neo.simple'
    | 'outline'
    | 'outline.simple';
    }
    /**
     * @name Button Group
     * @description Group a series of buttons together on a single line with the button group, and super-power.
     * @category General
     * @tags controls
     * @example <zane-button-group>
     * <zane-button block icon="home"></zane-button>
     * <zane-button block icon="alarm"></zane-button>
     * </zane-button-group>
     */
    interface ZaneButtonGroup {
    }
    interface ZaneCard {
        "shadowLevel": 'lg' | 'md' | 'sm' | 'xl' | 'xs' | 'xxl' | undefined;
    }
    /**
     * @name Checkbox
     * @description Captures boolean input with an optional indeterminate mode.
     * @category Form Inputs
     * @tags input, form
     * @example <zane-checkbox value='true'>Want ice cream?</zane-checkbox>
     */
    interface ZaneCheckbox {
        /**
          * @default {}
         */
        "configAria": any;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled": boolean;
        "getComponentId": () => Promise<string>;
        /**
          * @default false
         */
        "intermediate": boolean;
        /**
          * The checkbox label.
         */
        "label": string;
        "layer"?: '01' | '02' | 'background';
        /**
          * The input field name.
          * @default `zane-input-${this.gid}`
         */
        "name": string;
        /**
          * @default false
         */
        "readonly": boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
          * @default false
         */
        "required": boolean;
        /**
          * @default false
         */
        "rounded": boolean;
        /**
          * Sets blur on the native `input` in `zane-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `zane-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The button size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
          * @default 'md'
         */
        "size": 'lg' | 'md' | 'sm';
        /**
          * The input field value.
          * @default false
         */
        "value": boolean;
    }
    /**
     * @name Code Editor
     * @description A browser based code editor.
     * @category Form Inputs
     * @tags input, form
     * @img /assets/img/code-editor.webp
     * @imgDark /assets/img/code-editor-dark.webp
     */
    interface ZaneCodeEditor {
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `onChange` event after each keystroke.
          * @default 250
         */
        "debounce": number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled": boolean;
        "getComponentId": () => Promise<string>;
        /**
          * @default 'javascript'
         */
        "language": 'html' | 'javascript' | 'json';
        "libSource": any;
        /**
          * @default 'on'
         */
        "lineNumbers": 'off' | 'on';
        /**
          * @default false
         */
        "minimap": boolean;
        /**
          * The input field name.
          * @default `zane-input-${this.gid}`
         */
        "name": string;
        /**
          * @default false
         */
        "readonly": boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
          * @default false
         */
        "required": boolean;
        /**
          * Sets blur on the native `input` in `zane-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `zane-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The input field value.
         */
        "value": string;
    }
    /**
     * @name Code Highlighter
     * @description A browser based code highlighter.
     * @category Data Display
     * @tag display, code
     * @img /assets/img/code-highlighter.webp
     * @imgDark /assets/img/code-highlighter-dark.webp
     */
    interface ZaneCodeHighlighter {
        /**
          * Format the code snippet.
         */
        "format": boolean;
        /**
          * Hide the copy button.
          * @default false
         */
        "hideCopy": boolean;
        /**
          * Display the code snippet inline.
          * @default false
         */
        "inline": boolean;
        /**
          * The language of the code snippet.
          * @default 'javascript'
         */
        "language": Language;
        /**
          * Display line numbers.
          * @default false
         */
        "lineNumbers": boolean;
        /**
          * The code snippet to highlight.
          * @default ''
         */
        "value": string;
    }
    interface ZaneContainer {
        /**
          * @default 'full'
         */
        "size": 'full' | 'lg' | 'max' | 'md' | 'sm' | 'xl';
    }
    /**
     * @name Current Time
     * @description Displays the current time in a given timezone.
     * @category Others
     * @example <zane-current-time></zane-current-time>
     */
    interface ZaneCurrentTime {
        "timezone": string;
    }
    /**
     * @name Date Picker
     * @category Form Inputs
     * @description Captures date input.
     * @example <zane-date-picker value='true'></zane-date-picker>
     */
    interface ZaneDatePicker {
        /**
          * @default {}
         */
        "configAria": any;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `zaneChange` event after each keystroke.
          * @default 300
         */
        "debounce": number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled": boolean;
        "getComponentId": () => Promise<string>;
        "helperText": string;
        /**
          * @default false
         */
        "inline": boolean;
        /**
          * @default false
         */
        "invalid": boolean;
        "invalidText": string;
        "label": string;
        /**
          * The input field name.
          * @default `zane-input-${this.gid}`
         */
        "name": string;
        /**
          * The input field placeholder.
         */
        "placeholder": string;
        /**
          * If true, the user read the value cannot modify it. Defaults to `false`.
          * @default false
         */
        "readonly": boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
          * @default false
         */
        "required": boolean;
        /**
          * Sets blur on the native `input` in `zane-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `zane-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The input field size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
          * @default 'md'
         */
        "size": 'lg' | 'md' | 'sm';
        /**
          * The input field value.
          * @default ''
         */
        "value"?: null | number | string;
        /**
          * @default false
         */
        "warn": boolean;
        "warnText": string;
    }
    /**
     * @name Divider
     * @description A divider can be used to segment content vertically or horizontally.
     * @category Layout
     * @example <zane-divider style="width: 12rem;">or</zane-divider>
     */
    interface ZaneDivider {
        /**
          * @default false
         */
        "vertical": boolean;
    }
    /**
     * @name Dropdown
     * @description Enables native inputs to be used within a Form field.
     * @category Navigation
     * @subcategory Dropdown
     * @img /assets/img/dropdown.webp
     * @imgDark /assets/img/dropdown-dark.webp
     */
    interface ZaneDropdown {
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled": boolean;
        /**
          * @default false
         */
        "managed": boolean;
        /**
          * @default false
         */
        "open": boolean;
        /**
          * @default 'bottom-start,top-start,bottom-end,top-end'
         */
        "placements": string;
        "setFocus": () => Promise<void>;
        /**
          * @default 'click'
         */
        "trigger": 'click' | 'hover' | 'manual';
    }
    /**
     * @name Dropdown Menu
     * @description The Dropdown Menu component is used to display a list of options.
     * @category Navigation
     * @subcategory Dropdown
     * @childComponent true
     */
    interface ZaneDropdownMenu {
        /**
          * Sets focus on first menu item. Use this method instead of the global `element.focus()`.
         */
        "setFocus": () => Promise<void>;
    }
    /**
     * @name Empty State
     * @description A message that displays when there is no information to display.
     * @category Data Display
     * @img /assets/img/empty-state.webp
     * @imgDark /assets/img/empty-state-dark.webp
     */
    interface ZaneEmptyState {
        "action": string;
        /**
          * @default false
         */
        "actionDisabled": boolean;
        "actionUrl": string;
        /**
          * @default 'default'
         */
        "actionVariant": 'default' | 'ghost' | 'outline';
        "description": string;
        "headline": string;
        /**
          * @default 'no-document'
         */
        "illustration": string;
    }
    /**
     * @name Footer
     * @description The footer component provides a container for displaying additional navigation information about a site.
     * @overview <p>The footer is one of the most underestimated sections of a website being located at the very bottom of every page, however, it can be used as a way to try to convince users to stay on your website if they haven’t found the information they’ve been looking for inside the main content area.</p>
     * @category Navigation
     * @img /assets/img/footer.webp
     * @imgDark /assets/img/footer-dark.webp
     */
    interface ZaneFooter {
        /**
          * @default 'simple'
         */
        "variant": string;
        /**
          * @default new Date().getFullYear()
         */
        "year": number;
    }
    interface ZaneFooterCopyright {
        "copyright": string;
        "copyrightHref": string;
        /**
          * @default new Date().getFullYear()
         */
        "year": number;
    }
    interface ZaneFooterLinks {
        /**
          * @default []
         */
        "links": { href: string; name: string }[];
    }
    /**
     * @name Form Control
     * @description The Form Control component adds a label and caption for its child control.
     * @category Form Inputs
     * @tags form
     * @example <zane-form-control label='Full Name' required>
     * <zane-input type='text'></zane-input>
     * </zane-form-control>
     */
    interface ZaneFormControl {
        "helperText": string;
        /**
          * @default false
         */
        "inline": boolean;
        /**
          * @default false
         */
        "invalid": boolean;
        "invalidText": string;
        "label": string;
        /**
          * Whether the form control is required.
          * @default false
         */
        "required": boolean;
        /**
          * @default false
         */
        "skeleton": boolean;
        /**
          * @default false
         */
        "warn": boolean;
        "warnText": string;
    }
    /**
     * @name Header
     * @description Header component is used to display a header with a brand, navigation, and actions.
     * @category Navigation
     * @img /assets/img/header.webp
     * @imgDark /assets/img/header-dark.webp
     */
    interface ZaneHeader {
        /**
          * Defines the primary color of the header. This can be set to predefined color names to apply specific color themes.
          * @default 'black'
         */
        "color": | 'black'
    | 'danger'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning'
    | 'white'
    | string;
        /**
          * Color variant for dark mode, applicable when [data-theme="dark"] is set.
         */
        "darkModeColor"?: | 'black'
    | 'danger'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning'
    | 'white'
    | string;
        /**
          * @default false
         */
        "float": boolean;
    }
    interface ZaneHeaderAction {
        /**
          * @default '_self'
         */
        "badge": string;
        /**
          * @default {}
         */
        "configAria": any;
        /**
          * Hyperlink to navigate to on click.
         */
        "href": string;
        /**
          * Icon which will displayed on button. Possible values are icon names.
         */
        "icon": string;
        /**
          * Button selection state.
          * @default false
         */
        "selected": boolean;
        "setColor": (color: string) => Promise<void>;
        /**
          * Button size. Possible values are `"sm"`, `"md"`, `"lg"`, `"xl"`, `"xxl"`, `"none"`. Defaults to `"md"`.
          * @default 'md'
         */
        "size": 'lg' | 'md' | 'none' | 'sm' | 'xl' | 'xxl';
        /**
          * Sets or retrieves the window or frame at which to target content.
          * @default '_self'
         */
        "target": string;
    }
    interface ZaneHeaderBrand {
        /**
          * @default '#'
         */
        "href": string;
        "logo": string;
        "name": string;
        "setColor": (color: string) => Promise<void>;
        "subTitle": string;
    }
    /**
     * @name HTML Editor
     * @description HTML Editor component is a WYSIWYG editor that allows users to edit HTML content.
     * @category Up coming
     * @tags input, form
     * @img /assets/img/html-editor.webp
     * @imgDark /assets/img/html-editor-dark.webp
     */
    interface ZaneHtmlEditor {
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `onChange` event after each keystroke.
          * @default 250
         */
        "debounce": number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled": boolean;
        "getComponentId": () => Promise<string>;
        "layer"?: '01' | '02' | 'background';
        /**
          * @default 'on'
         */
        "lineNumbers": 'off' | 'on';
        /**
          * @default []
         */
        "mentions": { label: string; value: string }[];
        /**
          * @default 'contains'
         */
        "mentionsSearch": 'contains' | 'managed';
        /**
          * The input field name.
          * @default `zane-input-${this.gid}`
         */
        "name": string;
        /**
          * The input field placeholder.
         */
        "placeholder": string;
        /**
          * @default false
         */
        "readonly": boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
          * @default false
         */
        "required": boolean;
        /**
          * Sets blur on the native `input` in `zane-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `zane-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * @default true
         */
        "showSuggestionCharacter": boolean;
        /**
          * @default true
         */
        "showToolbar": boolean;
        /**
          * @default '@'
         */
        "suggestionCharacter": string;
        /**
          * @default 'vs-light'
         */
        "theme": 'vs-dark' | 'vs-light';
        /**
          * The input field value.
         */
        "value": string;
    }
    /**
     * @name Icon
     * @description Icons are visual symbols used to represent ideas, objects, or actions.
     * @overview Icons are visual symbols used to represent ideas, objects, or actions. They communicate messages at a glance, afford interactivity, and draw attention to important information.
     * @category General
     * @example <zane-icon name="home" size="2rem"></zane-icon>
     */
    interface ZaneIcon {
        /**
          * The identifier for the icon. This name corresponds to a specific SVG asset in the icon set.
         */
        "name": string;
        /**
          * The size of the icon. This can be specified in pixels (px) or rem units to control the icon's dimensions. If a number is provided, it will be treated as rem units. For example, '16px', '2rem', or 2 would be valid values.
         */
        "size": string;
    }
    interface ZaneImage {
        "darkSrc": string;
        "imageTitle": string;
        "src": string;
    }
    /**
     * @name Input
     * @description Enables native inputs to be used within a Form field.
     * @category Form Inputs
     * @tags input, form
     * @example <zane-input placeholder="Enter your name"></zane-input>
     */
    interface ZaneInput {
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
          * @default 'off'
         */
        "autocomplete": 'off' | 'on';
        /**
          * @default {}
         */
        "configAria": any;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `zaneChange` event after each keystroke.
          * @default 300
         */
        "debounce": number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled": boolean;
        "getComponentId": () => Promise<string>;
        "helperText": string;
        /**
          * @default false
         */
        "inline": boolean;
        /**
          * @default false
         */
        "invalid": boolean;
        "invalidText": string;
        "label": string;
        /**
          * The input field name.
          * @default `zane-input-${this.gid}`
         */
        "name": string;
        /**
          * The input field placeholder.
         */
        "placeholder": string;
        /**
          * If true, the user read the value cannot modify it. Defaults to `false`.
          * @default false
         */
        "readonly": boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
          * @default false
         */
        "required": boolean;
        /**
          * Sets blur on the native `input` in `zane-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `zane-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The input field size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
          * @default 'md'
         */
        "size": 'lg' | 'md' | 'sm';
        /**
          * @default false
         */
        "skeleton": boolean;
        /**
          * The type of control to display. Possible values are: `"text"`, `"password"`, `"email"`, `"tel"`. Defaults to `"text"`.
          * @default 'text'
         */
        "type": 'email' | 'password' | 'tel' | 'text';
        /**
          * The input field value.
         */
        "value": string;
        /**
          * @default false
         */
        "warn": boolean;
        "warnText": string;
    }
    /**
     * @name Input URL
     * @description A specialized input field for URL validation.
     * @category Up coming
     * @tags input, form, url
     * @example <zane-input-url value="https://shivajivarma.com"></zane-input-url>
     */
    interface ZaneInputUrl {
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `valueChange` event after each keystroke.
          * @default 300
         */
        "debounce": number;
        /**
          * If true, the user cannot interact with the input. Defaults to `false`.
          * @default false
         */
        "disabled": boolean;
        /**
          * @default false
         */
        "editing": boolean;
        /**
          * Get the component's unique ID
         */
        "getComponentId": () => Promise<string>;
        /**
          * The input field name.
          * @default `zane-input-url-${this.gid}`
         */
        "name": string;
        /**
          * The input field placeholder.
         */
        "placeholder": string;
        /**
          * Sets blur on the native `input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The input field size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
          * @default 'md'
         */
        "size": 'lg' | 'md' | 'sm';
        /**
          * The input field value.
         */
        "value": string;
    }
    /**
     * @name Link
     * @description Links allow users to click their way from page to page.
     * @category Navigation
     * @example <zane-link href="#">Link</zane-link>
     */
    interface ZaneLink {
        /**
          * Hyperlink to navigate to on click.
         */
        "href": string;
        /**
          * Sets or retrieves the window or frame at which to target content.
         */
        "target": string;
        "triggerClick": () => Promise<void>;
    }
    /**
     * @name Menu
     * @description Menus display a list of choices on temporary surfaces.
     * @category Navigation
     * @subcategory Menu
     * @img /assets/img/menu.webp
     * @imgDark /assets/img/menu-dark.webp
     */
    interface ZaneMenu {
        /**
          * @default false
         */
        "empty": boolean;
        /**
          * @default 'There are no items to display'
         */
        "emptyStateDescription": string;
        /**
          * @default 'No items'
         */
        "emptyStateHeadline": string;
        "layer"?: '01' | '02' | 'background';
        /**
          * Sets focus on first menu item. Use this method instead of the global `element.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * @default false
         */
        "showLoader": boolean;
        /**
          * The menu item size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
          * @default 'md'
         */
        "size": 'lg' | 'md' | 'sm';
        "value"?: number | string;
    }
    /**
     * @name MenuDivider
     * @description A divider to separate menu items.
     * @category Layout
     * @subcategory Menu
     * @childComponents true
     * @example <zane-divider style="width: 12rem;">or</zane-divider>
     */
    interface ZaneMenuDivider {
    }
    /**
     * @name Menu Item
     * @description Menu items display a list of choices on temporary surfaces.
     * @category Navigation
     * @subcategory Menu
     * @childComponent true
     */
    interface ZaneMenuItem {
        /**
          * @default 'default'
         */
        "color": | 'black'
    | 'danger'
    | 'default'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning'
    | 'white';
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled": boolean;
        /**
          * Hyperlink to navigate to on click.
         */
        "href": string;
        "layer"?: '01' | '02' | 'background';
        /**
          * @default false
         */
        "selectable": boolean;
        /**
          * Menu item selection state.
          * @default false
         */
        "selected": boolean;
        /**
          * Sets blur on the native `input` in `zane-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `zane-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Sets or retrieves the window or frame at which to target content.
          * @default '_self'
         */
        "target": string;
        /**
          * The menu item value.
         */
        "value"?: null | number | string;
    }
    /**
     * @name Modal
     * @description Modals are used to display content in a layer above the app.
     * @category Informational
     * @subcategory Modal
     * @tags controls
     * @img /assets/img/modal.webp
     * @imgDark /assets/img/modal-dark.webp
     */
    interface ZaneModal {
        "heading": string;
        /**
          * @default false
         */
        "hideClose": boolean;
        /**
          * Specify whether the Modal is managed by the parent component
          * @default false
         */
        "managed": boolean;
        /**
          * Specify whether the Modal is currently open
          * @default false
         */
        "open": boolean;
        /**
          * @default false
         */
        "showLoader": boolean;
        /**
          * @default 'md'
         */
        "size": 'lg' | 'md' | 'sm';
        "subheading": string;
    }
    /**
     * @name Modal Content
     * @description The Modal Content component is used to display the content within a modal.
     * @category Informational
     * @subcategory Modal
     * @childComponent true
     */
    interface ZaneModalContent {
        /**
          * @default 'default'
         */
        "type": 'borderless' | 'default' | 'text';
    }
    /**
     * @name Notification
     * @description Notifications are messages that communicate information to the user.
     * @category Informational
     * @tags notification
     * @example <zane-notification state="success">
     *      <div slot='title'>Successful saved the record</div>
     *    </zane-notification>
     */
    interface ZaneNotification {
        /**
          * Action to be displayed on the notification
         */
        "action": string;
        /**
          * Whether the notification is dismissible
          * @default false
         */
        "dismissible": boolean;
        /**
          * Whether to use high contrast mode
          * @default false
         */
        "highContrast": boolean;
        /**
          * Whether the notification should be displayed inline
          * @default false
         */
        "inline": boolean;
        /**
          * Whether the notification is managed by the notification manager
          * @default false
         */
        "managed": boolean;
        /**
          * The state of the notification. Possible values are: 'success', 'error', 'info', 'warning'
          * @default 'info'
         */
        "state": 'error' | 'info' | 'success' | 'warning';
    }
    /**
     * @name Notification Manager
     * @description The Notification Manager handles the organization and display of notifications within the application.
     * @category Informational
     * @tags notification
     * @img /assets/img/notification-manager.webp
     * @imgDark /assets/img/notification-manager-dark.webp
     */
    interface ZaneNotificationManager {
        /**
          * @default 'global'
         */
        "name": string;
        /**
          * @default 'bottom-right'
         */
        "position": | 'bottom-left'
    | 'bottom-right'
    | 'top-left'
    | 'top-right';
    }
    /**
     * @name Number
     * @description Number input lets users enter a numeric value and incrementally increase or decrease the value with a two-segment control.
     * @category Form Inputs
     * @tags input, form
     * @example <zane-number value="100"></zane-input>
     */
    interface ZaneNumber {
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
          * @default 'off'
         */
        "autocomplete": 'off' | 'on';
        /**
          * @default {}
         */
        "configAria": any;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `zaneChange` event after each keystroke.
          * @default 300
         */
        "debounce": number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled": boolean;
        "getComponentId": () => Promise<string>;
        "helperText": string;
        /**
          * @default false
         */
        "hideActions": boolean;
        /**
          * @default false
         */
        "inline": boolean;
        /**
          * @default false
         */
        "invalid": boolean;
        "invalidText": string;
        "label": string;
        /**
          * The input field name.
          * @default `zane-input-${this.gid}`
         */
        "name": string;
        /**
          * The input field placeholder.
         */
        "placeholder": string;
        /**
          * If true, the user read the value cannot modify it. Defaults to `false`.
          * @default false
         */
        "readonly": boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
          * @default false
         */
        "required": boolean;
        /**
          * Sets blur on the native `input` in `zane-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `zane-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The input field size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
          * @default 'md'
         */
        "size": 'lg' | 'md' | 'sm';
        /**
          * @default false
         */
        "skeleton": boolean;
        /**
          * The input state. Possible values are: `"success"`, `"error"`, `"warning"`, 'default'. Defaults to `"default"`.
          * @default 'default'
         */
        "state": 'default' | 'error' | 'success' | 'warning';
        /**
          * The input field value.
          * @default null
         */
        "value"?: null | number;
        /**
          * @default false
         */
        "warn": boolean;
        "warnText": string;
    }
    /**
     * @name Popover
     * @description The Popover component is used to display additional information.
     * @category Informational
     * @subcategory Popover
     * @img /assets/img/dropdown.webp
     * @imgDark /assets/img/dropdown-dark.webp
     */
    interface ZanePopover {
        /**
          * Time in milliseconds to wait before hiding the popover when the trigger is set to `"hover"`.
          * @default 300
         */
        "dismissTimeout": number;
        /**
          * Hides the popover. This method is useful when the trigger is set to `"manual"`.
         */
        "hide": () => Promise<void>;
        /**
          * The offset of the popover relative to the trigger element. This value is used to adjust the position of the popover along the axis of the trigger element.
          * @default 4
         */
        "offset": number;
        /**
          * Determines whether the popover is open.
          * @default false
         */
        "open": boolean;
        /**
          * Time in milliseconds to wait before showing the popover when the trigger is set to `"hover"`.
          * @default 200
         */
        "openTimeout": number;
        /**
          * The placement of the popover relative to the trigger element. Possible values are: - `"top"`: The popover is placed above the trigger element. - `"top-start"`: The popover is placed above the trigger element, aligned to the start. - `"top-end"`: The popover is placed above the trigger element, aligned to the end. - `"right"`: The popover is placed to the right of the trigger element. - `"right-start"`: The popover is placed to the right of the trigger element, aligned to the start. - `"right-end"`: The popover is placed to the right of the trigger element, aligned to the end. - `"bottom"`: The popover is placed below the trigger element. - `"bottom-start"`: The popover is placed below the trigger element, aligned to the start. - `"bottom-end"`: The popover is placed below the trigger element, aligned to the end. - `"left"`: The popover is placed to the left of the trigger element. - `"left-start"`: The popover is placed to the left of the trigger element, aligned to the start. - `"left-end"`: The popover is placed to the left of the trigger element, aligned to the end.
         */
        "placements": string;
        /**
          * Shows the popover. This method is particularly useful when the trigger mode is set to `"manual"`. It allows for programmatic control over the visibility of the popover, making it visible regardless of the trigger mode. Optionally, a target HTMLElement can be provided to dynamically set the trigger element for the popover.
         */
        "show": (target?: HTMLElement) => Promise<void>;
        /**
          * The tip of the popover. Possible values are: - `"caret"`: A triangle tip. - `"tab"`: A tab tip. - `"none"`: No tip.
          * @default 'caret'
         */
        "tip": 'caret' | 'none' | 'tab';
        /**
          * Determines how the popover is triggered. Possible values are: - `"click"`: The popover is shown or hidden when the trigger element is clicked. - `"hover"`: The popover is shown when the mouse hovers over the trigger element and hidden when it leaves. - `"manual"`: The visibility of the popover must be manually controlled through the `open` property.
          * @default 'hover'
         */
        "trigger": 'click' | 'hover' | 'manual';
    }
    /**
     * @name Popover Content
     * @description The PopoverContent component is used to display additional information.
     * @category Informational
     * @subcategory Popover
     * @childComponent true
     */
    interface ZanePopoverContent {
    }
    /**
     * @name Progress
     * @description Progress indicators express an unspecified wait time or display the length of a process.
     * @category Informational
     * @tags feedback, loading, progress, spinner
     * @example <zane-progress value="40" label="Progress" width="100%" helper-text="Optional helper text goes here..."></zane-progress>
     */
    interface ZaneProgress {
        "helperText": string;
        /**
          * @default false
         */
        "hideLabel": boolean;
        /**
          * A label describing the progress bar.
         */
        "label": string;
        /**
          * Possible values are: `"sm"` and `"md"` in pixel. Defaults to `"md"`.
          * @default 'md'
         */
        "size": 'md' | 'sm';
        /**
          * @default 'active'
         */
        "status": 'active' | 'error' | 'success';
        /**
          * @default null
         */
        "value": number;
    }
    /**
     * @name Select
     * @description Allows the user to select one or more options using a dropdown.
     * @category Form Inputs
     * @tags input, form
     * @img /assets/img/select.webp
     * @imgDark /assets/img/select-dark.webp
     */
    interface ZaneSelect {
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
          * @default false
         */
        "clearable": boolean;
        /**
          * @default {}
         */
        "configAria": any;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `zaneChange` event after each keystroke.
          * @default 300
         */
        "debounce": number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled": boolean;
        "getComponentId": () => Promise<string>;
        "helperText": string;
        /**
          * @default false
         */
        "hideDropdownIcon": boolean;
        /**
          * @default false
         */
        "inline": boolean;
        /**
          * @default false
         */
        "invalid": boolean;
        "invalidText": string;
        /**
          * [{   label: 'Zane Deng',   value: 'zane-deng',   icon: 'person' }]
          * @default []
         */
        "items": {
    icon?: string;
    label: number | string;
    value: number | string;
  }[];
        "label": string;
        "layer"?: '01' | '02' | 'background';
        /**
          * @default false
         */
        "multiple": boolean;
        /**
          * The input field name.
          * @default `zane-input-${this.gid}`
         */
        "name": string;
        /**
          * @default false
         */
        "open": boolean;
        "openSelectList": () => Promise<void>;
        /**
          * The input field placeholder.
         */
        "placeholder": string;
        /**
          * @default 'bottom-start,top-start,bottom-end,top-end'
         */
        "placements": string;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "readonly": boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
          * @default false
         */
        "required": boolean;
        /**
          * Search type Possible values are `"none"`, `"initial"`, `"contains"`, `"managed"`. Defaults to `"none"`.
          * @default 'none'
         */
        "search": 'contains' | 'initial' | 'managed' | 'none';
        /**
          * Sets blur on the native `input` in `zane-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `ion-input`. Use this method instead of the global `input.focus()`.t
         */
        "setFocus": () => Promise<void>;
        /**
          * @default false
         */
        "showLoader": boolean;
        /**
          * The select input size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
          * @default 'md'
         */
        "size": 'lg' | 'md' | 'sm';
        /**
          * The input state. Possible values are: `"success"`, `"error"`, `"warning"`, 'default'. Defaults to `"default"`.
          * @default 'default'
         */
        "state": 'default' | 'error' | 'success' | 'warning';
        /**
          * The input field value.
          * @default ''
         */
        "value"?: number | string;
        /**
          * @default false
         */
        "warn": boolean;
        "warnText": string;
    }
    /**
     * @name1 Side Navigation
     * @description1 The side navigation component provides an easy way to navigate through your website / application.
     * @img1 /assets/img/sidenav.webp
     */
    interface ZaneSidenav {
        /**
          * @default false
         */
        "showLoader": boolean;
    }
    interface ZaneSidenavMenu {
        /**
          * @default false
         */
        "empty": boolean;
        /**
          * @default `{     "headline": "No items",     "description": "There are no items to display"   }`
         */
        "emptyState": any;
        /**
          * Sets focus on first menu item. Use this method instead of the global `element.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * @default false
         */
        "showLoader": boolean;
        "value"?: number | string;
    }
    interface ZaneSidenavMenuItem {
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled": boolean;
        /**
          * Menu item selection state.
          * @default false
         */
        "selected": boolean;
        /**
          * Sets blur on the native `input` in `zane-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `zane-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The menu item value.
         */
        "value"?: null | number | string;
    }
    /**
     * @name Slider
     * @description Sliders allow users to make selections from a range of values.
     * @category Form Inputs
     * @tags input, form
     * @img /assets/img/slider.webp
     * @imgDark /assets/img/slider-dark.webp
     */
    interface ZaneSlider {
        /**
          * @default {}
         */
        "configAria": any;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `zaneChange` event after each keystroke.
          * @default 300
         */
        "debounce": number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled": boolean;
        /**
          * function to format the value of the input
         */
        "formatter": (value: number | string) => string;
        "getComponentId": () => Promise<string>;
        /**
          * @default 100
         */
        "max": number;
        /**
          * @default 0
         */
        "min": number;
        /**
          * The input field name.
          * @default `zane-input-${this.gid}`
         */
        "name": string;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "readonly": boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
          * @default false
         */
        "required": boolean;
        /**
          * Sets blur on the native `input` in `zane-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `ion-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * @default false
         */
        "showOnlySlider": boolean;
        /**
          * @default 1
         */
        "step": number;
        /**
          * The input field value.
          * @default 0
         */
        "value"?: number;
    }
    /**
     * @name Spinner
     * @description Spinners provide a visual cue that an action is processing awaiting a course of change or a result.
     * @category Informational
     * @tags feedback, loading, progress, spinner
     * @example <zane-spinner class="rainbow" size="2rem"></zane-spinner>
     */
    interface ZaneSpinner {
        /**
          * @default 'Loading...'
         */
        "description": string;
        /**
          * @default false
         */
        "hideBackground": boolean;
        /**
          * The Icon size. Possible values are: `"sm"`, `"md"`, `"lg"` and size in pixel. Defaults to `"md"`.
          * @default 'md'
         */
        "size": 'lg' | 'md' | 'sm' | string;
    }
    /**
     * @name SVG
     * @description Render SVG content from an external source.
     * @category Data Display
     * @example <zane-svg src="https://icons.getbootstrap.com/assets/icons/bug.svg" size="2rem"></zane-svg>
     */
    interface ZaneSvg {
        /**
          * The Icon size.
         */
        "size": string;
        /**
          * @default ''
         */
        "src": string;
    }
    interface ZaneTab {
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled": boolean;
        /**
          * @default ''
         */
        "disabledReason": string;
        /**
          * Hyperlink to navigate to on click.
         */
        "href": string;
        /**
          * Icon which will displayed on button. Possible values are bootstrap icon names.
         */
        "icon": string;
        "label": string;
        /**
          * Button selection state.
          * @default false
         */
        "selected": boolean;
        "setFocus": () => Promise<void>;
        /**
          * Show loader.
          * @default false
         */
        "showLoader": boolean;
        "target": string;
        "triggerClick": () => Promise<void>;
        /**
          * @default 'default'
         */
        "type": 'contained' | 'contained-bottom' | 'default';
        "value": string;
    }
    interface ZaneTabPanel {
        /**
          * @default false
         */
        "active": boolean;
        "layer"?: '01' | '02' | 'background';
        "value": string;
    }
    /**
     * @name Table
     * @description A configurable component for displaying tabular data.
     * @category Data Display
     * @img /assets/img/table.webp
     * @imgDark /assets/img/table-dark.webp
     */
    interface ZaneTable {
        /**
          * Grid columns configuration. [ {   "name":"name",   "label":"Name",   "width":300,   "fixed":true,   "template": function(row, column) { return row[column.name];}  }, {   "name":"age",   "label":"Age" } ]
          * @default []
         */
        "columns": any[];
        /**
          * Grid data to display on table [{  'id': '5e7118ddce4b3d577956457f',  'age': 21,  'name': 'John',  'company': 'India',  'email': 'john@example.com',  'phone': '+1 (839) 560-3581',  'address': '326 Irving Street, Grimsley, Texas, 4048'  }]
          * @default []
         */
        "data": any[];
        /**
          * @default 'There are no items to display'
         */
        "emptyStateDescription": string;
        /**
          * @default 'No items'
         */
        "emptyStateHeadline": string;
        /**
          * @default 'id'
         */
        "keyField": string;
        "layer"?: '01' | '02' | 'background';
        /**
          * @default false
         */
        "managed": boolean;
        /**
          * @default 1
         */
        "page": number;
        /**
          * @default 10
         */
        "pageSize": number;
        /**
          * @default true
         */
        "paginate": boolean;
        /**
          * @default []
         */
        "selectedRowKeys": string[];
        "selectionType": 'checkbox' | undefined;
        "sortBy": string;
        /**
          * @default 'asc'
         */
        "sortOrder": 'asc' | 'desc';
        /**
          * @default true
         */
        "sortable": boolean;
        "totalItems": any;
    }
    /**
     * @name Tabs
     * @description The tabs component is used to display multiple panels of content in a container.
     * @category Navigation
     * @tags navigation
     * @example <zane-tabs>
     * <zane-tabs-list>
     * <zane-tab selected >Tab 1</zane-tab>
     * <zane-tab>Tab 2</zane-tab>
     * </zane-tabs-list>
     * </zane-tabs>
     */
    interface ZaneTabs {
        "layer"?: '01' | '02' | 'background';
        /**
          * @default 'default'
         */
        "type": 'contained' | 'contained-bottom' | 'default';
    }
    interface ZaneTabsList {
        /**
          * @default false
         */
        "managed": boolean;
        /**
          * @default 'default'
         */
        "type": 'contained' | 'contained-bottom' | 'default';
    }
    /**
     * @name Tag
     * @description Use tags to label, categorize, or organize items using keywords that describe them.
     * @category Data Display
     * @tag controls
     * @example <zane-tag class="color-red">Important</zane-tag>
     */
    interface ZaneTag {
        /**
          * Tag color. Possible values are: 'gray', 'blue', 'green', 'red', 'yellow', 'primary', 'success', 'info', 'warning', 'error'.
          * @default 'gray'
         */
        "color": | 'blue'
    | 'error'
    | 'gray'
    | 'green'
    | 'info'
    | 'primary'
    | 'red'
    | 'success'
    | 'warning'
    | 'yellow';
        /**
          * If true, the tag will have a close icon.
          * @default false
         */
        "dismissible": boolean;
        /**
          * Image source.
         */
        "imageSrc"?: string;
        /**
          * If true, the tag will be selected.
          * @default false
         */
        "selected": boolean;
        /**
          * Text size.
          * @default 'md'
         */
        "size": 'md' | 'sm';
        /**
          * Tag value.
          * @default ''
         */
        "value": string;
    }
    /**
     * @name Text
     * @description Typography are used for rendering headlines, paragraphs and captions.
     * @category General
     * @example <zane-text type="heading" level="1">Heading</zane-typography>
     */
    interface ZaneText {
        /**
          * @default 'primary'
         */
        "color": | 'error'
    | 'helper'
    | 'inverse'
    | 'on-color'
    | 'primary'
    | 'secondary'
    | 'tertiary';
        /**
          * @default {}
         */
        "configAria": any;
        /**
          * @default false
         */
        "expressive": boolean;
        "headingLevel": 1 | 2 | 3 | 4 | 5 | 6;
        "headingSize": 1 | 2 | 3 | 4 | 5 | 6 | 7;
        /**
          * @default false
         */
        "inline": boolean;
        /**
          * @default 'body'
         */
        "type": | 'body'
    | 'body-compact'
    | 'code'
    | 'fluid-heading'
    | 'heading'
    | 'heading-compact'
    | 'helper-text'
    | 'label'
    | 'legal';
    }
    /**
     * @name Textarea
     * @description Enables native inputs to be used within a Form field.
     * @category Form Inputs
     * @tags input, form
     * @example <zane-textarea placeholder="Enter some description over here"></zane-textarea>
     */
    interface ZaneTextarea {
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
          * @default false
         */
        "clearable": boolean;
        /**
          * @default {}
         */
        "configAria": any;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `zane:change` event after each keystroke.
          * @default 300
         */
        "debounce": number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled": boolean;
        "getComponentId": () => Promise<string>;
        "helperText": string;
        /**
          * @default false
         */
        "inline": boolean;
        /**
          * @default false
         */
        "invalid": boolean;
        "invalidText": string;
        "label": string;
        /**
          * The input field name.
          * @default `zane-input-${this.gid}`
         */
        "name": string;
        /**
          * The input field placeholder.
         */
        "placeholder": string;
        /**
          * If true, the user read the value cannot modify it. Defaults to `false`.
          * @default false
         */
        "readonly": boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
          * @default false
         */
        "required": boolean;
        /**
          * Sets blur on the native `textarea` in `zane-textarea`. Use this method instead of the global `textarea.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `textarea` in `zane-textarea`. Use this method instead of the global `textarea.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The input field size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
          * @default 'md'
         */
        "size": 'lg' | 'md' | 'sm';
        /**
          * @default false
         */
        "skeleton": boolean;
        /**
          * The input state. Possible values are: `"success"`, `"error"`, `"warning"`, 'default'. Defaults to `"default"`.
          * @default 'default'
         */
        "state": 'default' | 'error' | 'success' | 'warning';
        /**
          * The input field value.
         */
        "value": string;
        /**
          * @default false
         */
        "warn": boolean;
        "warnText": string;
    }
    /**
     * @name Time Picker
     * @description Captures time input.
     * @category Form Inputs
     * @tags input, form
     * @example <zane-time-picker value='true'></zane-time-picker>
     */
    interface ZaneTimePicker {
        /**
          * @default {}
         */
        "configAria": any;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled": boolean;
        "getComponentId": () => Promise<string>;
        /**
          * @default false
         */
        "inline": boolean;
        /**
          * The input field name.
          * @default `zane-input-${this.gid}`
         */
        "name": string;
        /**
          * The input field placeholder.
         */
        "placeholder": string;
        /**
          * If true, the user read the value cannot modify it. Defaults to `false`.
          * @default false
         */
        "readonly": boolean;
        /**
          * Sets blur on the native `input` in `zane-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `zane-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The input field size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
          * @default 'md'
         */
        "size": 'lg' | 'md' | 'sm';
        /**
          * The input field value.
          * @default ''
         */
        "value"?: null | number | string;
    }
    /**
     * @name Toggle
     * @description Captures boolean input with an optional indeterminate mode.
     * @category Form Inputs
     * @tags input, form
     * @example <zane-toggle value='true'>Want ice cream?</zane-toggle>
     */
    interface ZaneToggle {
        /**
          * @default {}
         */
        "configAria": any;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled": boolean;
        "getComponentId": () => Promise<string>;
        /**
          * The checkbox label.
         */
        "label": string;
        /**
          * The input field name.
          * @default `zane-input-${this.gid}`
         */
        "name": string;
        /**
          * @default false
         */
        "readonly": boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
          * @default false
         */
        "required": boolean;
        /**
          * @default true
         */
        "rounded": boolean;
        /**
          * Sets blur on the native `input` in `zane-toggle`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `zane-toggle`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The button size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
          * @default 'md'
         */
        "size": 'lg' | 'md';
        /**
          * The input field value.
          * @default false
         */
        "value": boolean;
    }
    /**
     * @name Tooltip
     * @description The Tooltip component is used to display additional information on hover.
     * @category Informational
     * @tag content
     * @img /assets/img/tooltip.webp
     * @imgDark /assets/img/tooltip-dark.webp
     */
    interface ZaneTooltip {
        /**
          * The content of the tooltip.
          * @default ''
         */
        "content": string;
        /**
          * The placement of the popover relative to the trigger element. Possible values are: - `"top"`: The popover is placed above the trigger element. - `"right"`: The popover is placed to the right of the trigger element. - `"bottom"`: The popover is placed below the trigger element. - `"left"`: The popover is placed to the left of the trigger element.
          * @default 'top,bottom,right,left'
         */
        "placements": string;
        /**
          * If true, the tooltip will be managed by the parent component.
          * @default 'hover'
         */
        "trigger": 'hover' | 'manual';
    }
    /**
     * @name Tree
     * @description A tree view is a hierarchical structure that provides nested levels of navigation.
     * @category Navigation
     * @subcategory Tree View
     * @img /assets/img/tree-view.webp
     * @imgDark /assets/img/tree-view-dark.webp
     */
    interface ZaneTree {
        /**
          * @default false
         */
        "empty": boolean;
        /**
          * @default `{     "headline": "No items",     "description": "There are no items to display"   }`
         */
        "emptyState": string;
        "getSelectedNode": () => Promise<string>;
        "selectedNode": string;
        /**
          * Sets focus on first menu item. Use this method instead of the global `element.focus()`.
         */
        "setFocus": () => Promise<void>;
        "subscribeToSelect": (cb: any) => Promise<void>;
    }
    /**
     * @name TreeNode
     * @description A tree node is a hierarchical structure that provides nested levels of navigation.
     * @category Navigation
     * @subcategory Tree View
     * @childComponent true
     * @img /assets/img/tree-view.webp
     * @imgDark /assets/img/tree-view-dark.webp
     */
    interface ZaneTreeNode {
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled": boolean;
        /**
          * @default true
         */
        "expanded": boolean;
        /**
          * Hyperlink to navigate to on click.
         */
        "href": string;
        /**
          * Icon which will displayed on button. Possible values are icon names.
         */
        "icon": string;
        /**
          * @default ''
         */
        "label": string;
        /**
          * @default 0
         */
        "level": number;
        /**
          * Menu item selection state.
         */
        "selectedNode": string;
        /**
          * Sets blur on the native `input` in `zane-input`. Use this method instead of the global `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the native `input` in `zane-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Sets or retrieves the window or frame at which to target content.
          * @default '_self'
         */
        "target": string;
        /**
          * The menu item value.
         */
        "value"?: null | number | string;
    }
}
export interface ZaneAccordionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneAccordionItemElement;
}
export interface ZaneButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneButtonElement;
}
export interface ZaneCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneCheckboxElement;
}
export interface ZaneCodeEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneCodeEditorElement;
}
export interface ZaneDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneDatePickerElement;
}
export interface ZaneDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneDropdownElement;
}
export interface ZaneHtmlEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneHtmlEditorElement;
}
export interface ZaneInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneInputElement;
}
export interface ZaneInputUrlCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneInputUrlElement;
}
export interface ZaneMenuItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneMenuItemElement;
}
export interface ZaneModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneModalElement;
}
export interface ZaneNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneNotificationElement;
}
export interface ZaneNumberCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneNumberElement;
}
export interface ZanePopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZanePopoverElement;
}
export interface ZaneSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneSelectElement;
}
export interface ZaneSidenavMenuItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneSidenavMenuItemElement;
}
export interface ZaneSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneSliderElement;
}
export interface ZaneTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneTabElement;
}
export interface ZaneTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneTableElement;
}
export interface ZaneTagCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneTagElement;
}
export interface ZaneTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneTextareaElement;
}
export interface ZaneTimePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneTimePickerElement;
}
export interface ZaneToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneToggleElement;
}
export interface ZaneTreeNodeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLZaneTreeNodeElement;
}
declare global {
    /**
     * @name Accordion
     * @description An accordion is a vertically stacked list of headers that reveal or hide associated sections of content.
     * @overview  <p>The accordion component delivers large amounts of content in a small space through progressive disclosure. The header title give the user a high level overview of the content allowing the user to decide which sections to read.</p>
     *  <p>Accordions can make information processing and discovering more effective. However, it does hide content from users and it’s important to account for a user not noticing or reading all of the included content. If a user is likely to read all of the content then don’t use an accordion as it adds the burden of an extra click; instead use a full scrolling page with normal headers.</p>
     * @category Data Display
     * @subcategory Accordion
     * @tags display
     * @img /assets/img/accordion.webp
     * @imgDark /assets/img/accordion-dark.webp
     */
    interface HTMLZaneAccordionElement extends Components.ZaneAccordion, HTMLStencilElement {
    }
    var HTMLZaneAccordionElement: {
        prototype: HTMLZaneAccordionElement;
        new (): HTMLZaneAccordionElement;
    };
    interface HTMLZaneAccordionItemElementEventMap {
        "zane-accordion-item--click": any;
    }
    /**
     * @name Accordion Item
     * @description An accordion item is single item in an accordion list. It contains a header and a content section that can be expanded or collapsed by the user.
     * @overview  <p>The accordion item component is a single item in an accordion list. It contains a header and a content section that can be expanded or collapsed by the user. The accordion item can be used in conjunction with the accordion component to create a list of expandable items.</p>
     * @category Data Display
     * @subcategory Accordion
     * @childComponent true
     */
    interface HTMLZaneAccordionItemElement extends Components.ZaneAccordionItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneAccordionItemElementEventMap>(type: K, listener: (this: HTMLZaneAccordionItemElement, ev: ZaneAccordionItemCustomEvent<HTMLZaneAccordionItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneAccordionItemElementEventMap>(type: K, listener: (this: HTMLZaneAccordionItemElement, ev: ZaneAccordionItemCustomEvent<HTMLZaneAccordionItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneAccordionItemElement: {
        prototype: HTMLZaneAccordionItemElement;
        new (): HTMLZaneAccordionItemElement;
    };
    /**
     * @name Avatar
     * @description The Avatar component is used to represent user, and displays the profile picture, initials or fallback icon.
     * @category Data Display
     * @tags display
     * @example <zane-avatar size="5rem" name="Shivaji Varma" src="/assets/img/avatar.webp"></zane-avatar>
     */
    interface HTMLZaneAvatarElement extends Components.ZaneAvatar, HTMLStencilElement {
    }
    var HTMLZaneAvatarElement: {
        prototype: HTMLZaneAvatarElement;
        new (): HTMLZaneAvatarElement;
    };
    /**
     * @name Badge
     * @description The badge component is used to display a small amount of information to the user.
     * @category Informational
     * @tag content
     * @example <zane-badge content="5"> <zane-icon name="notification" size="2rem"></zane-icon></zane-badge>
     */
    interface HTMLZaneBadgeElement extends Components.ZaneBadge, HTMLStencilElement {
    }
    var HTMLZaneBadgeElement: {
        prototype: HTMLZaneBadgeElement;
        new (): HTMLZaneBadgeElement;
    };
    /**
     * @name Breadcrumb
     * @description A breadcrumb is a secondary navigation scheme that reveals the user's location in a website or web application.
     * @category Navigation
     * @tags navigation
     * @example <zane-breadcrumb><zane-breadcrumb-item href="#">Home</zane-breadcrumb-item><zane-breadcrumb-item href="#" active>Page</zane-breadcrumb-item></zane-breadcrumb>
     */
    interface HTMLZaneBreadcrumbElement extends Components.ZaneBreadcrumb, HTMLStencilElement {
    }
    var HTMLZaneBreadcrumbElement: {
        prototype: HTMLZaneBreadcrumbElement;
        new (): HTMLZaneBreadcrumbElement;
    };
    interface HTMLZaneBreadcrumbItemElement extends Components.ZaneBreadcrumbItem, HTMLStencilElement {
    }
    var HTMLZaneBreadcrumbItemElement: {
        prototype: HTMLZaneBreadcrumbItemElement;
        new (): HTMLZaneBreadcrumbItemElement;
    };
    interface HTMLZaneButtonElementEventMap {
        "zane-button--click": {
    appendData: any;
  };
    }
    /**
     * @name Button
     * @description Buttons are used to initialize an action. Button labels express what action will occur when the user interacts with it.
     * @overview  <p>Buttons are clickable elements that are used to trigger actions. They communicate calls to action to the user and allow users to interact with pages in a variety of ways. Button labels express what action will occur when the user interacts with it.</p>
     * @category General
     * @tags controls
     * @example <zane-button>
     * Button CTA
     * </zane-button>
     */
    interface HTMLZaneButtonElement extends Components.ZaneButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneButtonElementEventMap>(type: K, listener: (this: HTMLZaneButtonElement, ev: ZaneButtonCustomEvent<HTMLZaneButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneButtonElementEventMap>(type: K, listener: (this: HTMLZaneButtonElement, ev: ZaneButtonCustomEvent<HTMLZaneButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneButtonElement: {
        prototype: HTMLZaneButtonElement;
        new (): HTMLZaneButtonElement;
    };
    /**
     * @name Button Group
     * @description Group a series of buttons together on a single line with the button group, and super-power.
     * @category General
     * @tags controls
     * @example <zane-button-group>
     * <zane-button block icon="home"></zane-button>
     * <zane-button block icon="alarm"></zane-button>
     * </zane-button-group>
     */
    interface HTMLZaneButtonGroupElement extends Components.ZaneButtonGroup, HTMLStencilElement {
    }
    var HTMLZaneButtonGroupElement: {
        prototype: HTMLZaneButtonGroupElement;
        new (): HTMLZaneButtonGroupElement;
    };
    interface HTMLZaneCardElement extends Components.ZaneCard, HTMLStencilElement {
    }
    var HTMLZaneCardElement: {
        prototype: HTMLZaneCardElement;
        new (): HTMLZaneCardElement;
    };
    interface HTMLZaneCheckboxElementEventMap {
        "zane-checkbox--blur": any;
        "zane-checkbox--change": any;
        "zane-checkbox--focus": any;
    }
    /**
     * @name Checkbox
     * @description Captures boolean input with an optional indeterminate mode.
     * @category Form Inputs
     * @tags input, form
     * @example <zane-checkbox value='true'>Want ice cream?</zane-checkbox>
     */
    interface HTMLZaneCheckboxElement extends Components.ZaneCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneCheckboxElementEventMap>(type: K, listener: (this: HTMLZaneCheckboxElement, ev: ZaneCheckboxCustomEvent<HTMLZaneCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneCheckboxElementEventMap>(type: K, listener: (this: HTMLZaneCheckboxElement, ev: ZaneCheckboxCustomEvent<HTMLZaneCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneCheckboxElement: {
        prototype: HTMLZaneCheckboxElement;
        new (): HTMLZaneCheckboxElement;
    };
    interface HTMLZaneCodeEditorElementEventMap {
        "zane-code-editor--change": any;
    }
    /**
     * @name Code Editor
     * @description A browser based code editor.
     * @category Form Inputs
     * @tags input, form
     * @img /assets/img/code-editor.webp
     * @imgDark /assets/img/code-editor-dark.webp
     */
    interface HTMLZaneCodeEditorElement extends Components.ZaneCodeEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneCodeEditorElementEventMap>(type: K, listener: (this: HTMLZaneCodeEditorElement, ev: ZaneCodeEditorCustomEvent<HTMLZaneCodeEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneCodeEditorElementEventMap>(type: K, listener: (this: HTMLZaneCodeEditorElement, ev: ZaneCodeEditorCustomEvent<HTMLZaneCodeEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneCodeEditorElement: {
        prototype: HTMLZaneCodeEditorElement;
        new (): HTMLZaneCodeEditorElement;
    };
    /**
     * @name Code Highlighter
     * @description A browser based code highlighter.
     * @category Data Display
     * @tag display, code
     * @img /assets/img/code-highlighter.webp
     * @imgDark /assets/img/code-highlighter-dark.webp
     */
    interface HTMLZaneCodeHighlighterElement extends Components.ZaneCodeHighlighter, HTMLStencilElement {
    }
    var HTMLZaneCodeHighlighterElement: {
        prototype: HTMLZaneCodeHighlighterElement;
        new (): HTMLZaneCodeHighlighterElement;
    };
    interface HTMLZaneContainerElement extends Components.ZaneContainer, HTMLStencilElement {
    }
    var HTMLZaneContainerElement: {
        prototype: HTMLZaneContainerElement;
        new (): HTMLZaneContainerElement;
    };
    /**
     * @name Current Time
     * @description Displays the current time in a given timezone.
     * @category Others
     * @example <zane-current-time></zane-current-time>
     */
    interface HTMLZaneCurrentTimeElement extends Components.ZaneCurrentTime, HTMLStencilElement {
    }
    var HTMLZaneCurrentTimeElement: {
        prototype: HTMLZaneCurrentTimeElement;
        new (): HTMLZaneCurrentTimeElement;
    };
    interface HTMLZaneDatePickerElementEventMap {
        "zane-date-picker--blur": any;
        "zane-date-picker--change": any;
        "zane-date-picker--focus": any;
        "zane-date-picker--input": any;
    }
    /**
     * @name Date Picker
     * @category Form Inputs
     * @description Captures date input.
     * @example <zane-date-picker value='true'></zane-date-picker>
     */
    interface HTMLZaneDatePickerElement extends Components.ZaneDatePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneDatePickerElementEventMap>(type: K, listener: (this: HTMLZaneDatePickerElement, ev: ZaneDatePickerCustomEvent<HTMLZaneDatePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneDatePickerElementEventMap>(type: K, listener: (this: HTMLZaneDatePickerElement, ev: ZaneDatePickerCustomEvent<HTMLZaneDatePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneDatePickerElement: {
        prototype: HTMLZaneDatePickerElement;
        new (): HTMLZaneDatePickerElement;
    };
    /**
     * @name Divider
     * @description A divider can be used to segment content vertically or horizontally.
     * @category Layout
     * @example <zane-divider style="width: 12rem;">or</zane-divider>
     */
    interface HTMLZaneDividerElement extends Components.ZaneDivider, HTMLStencilElement {
    }
    var HTMLZaneDividerElement: {
        prototype: HTMLZaneDividerElement;
        new (): HTMLZaneDividerElement;
    };
    interface HTMLZaneDropdownElementEventMap {
        "zane-dropdown--close": any;
        "zane-dropdown--open": any;
        "zane-dropdown--item-click": any;
    }
    /**
     * @name Dropdown
     * @description Enables native inputs to be used within a Form field.
     * @category Navigation
     * @subcategory Dropdown
     * @img /assets/img/dropdown.webp
     * @imgDark /assets/img/dropdown-dark.webp
     */
    interface HTMLZaneDropdownElement extends Components.ZaneDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneDropdownElementEventMap>(type: K, listener: (this: HTMLZaneDropdownElement, ev: ZaneDropdownCustomEvent<HTMLZaneDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneDropdownElementEventMap>(type: K, listener: (this: HTMLZaneDropdownElement, ev: ZaneDropdownCustomEvent<HTMLZaneDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneDropdownElement: {
        prototype: HTMLZaneDropdownElement;
        new (): HTMLZaneDropdownElement;
    };
    /**
     * @name Dropdown Menu
     * @description The Dropdown Menu component is used to display a list of options.
     * @category Navigation
     * @subcategory Dropdown
     * @childComponent true
     */
    interface HTMLZaneDropdownMenuElement extends Components.ZaneDropdownMenu, HTMLStencilElement {
    }
    var HTMLZaneDropdownMenuElement: {
        prototype: HTMLZaneDropdownMenuElement;
        new (): HTMLZaneDropdownMenuElement;
    };
    /**
     * @name Empty State
     * @description A message that displays when there is no information to display.
     * @category Data Display
     * @img /assets/img/empty-state.webp
     * @imgDark /assets/img/empty-state-dark.webp
     */
    interface HTMLZaneEmptyStateElement extends Components.ZaneEmptyState, HTMLStencilElement {
    }
    var HTMLZaneEmptyStateElement: {
        prototype: HTMLZaneEmptyStateElement;
        new (): HTMLZaneEmptyStateElement;
    };
    /**
     * @name Footer
     * @description The footer component provides a container for displaying additional navigation information about a site.
     * @overview <p>The footer is one of the most underestimated sections of a website being located at the very bottom of every page, however, it can be used as a way to try to convince users to stay on your website if they haven’t found the information they’ve been looking for inside the main content area.</p>
     * @category Navigation
     * @img /assets/img/footer.webp
     * @imgDark /assets/img/footer-dark.webp
     */
    interface HTMLZaneFooterElement extends Components.ZaneFooter, HTMLStencilElement {
    }
    var HTMLZaneFooterElement: {
        prototype: HTMLZaneFooterElement;
        new (): HTMLZaneFooterElement;
    };
    interface HTMLZaneFooterCopyrightElement extends Components.ZaneFooterCopyright, HTMLStencilElement {
    }
    var HTMLZaneFooterCopyrightElement: {
        prototype: HTMLZaneFooterCopyrightElement;
        new (): HTMLZaneFooterCopyrightElement;
    };
    interface HTMLZaneFooterLinksElement extends Components.ZaneFooterLinks, HTMLStencilElement {
    }
    var HTMLZaneFooterLinksElement: {
        prototype: HTMLZaneFooterLinksElement;
        new (): HTMLZaneFooterLinksElement;
    };
    /**
     * @name Form Control
     * @description The Form Control component adds a label and caption for its child control.
     * @category Form Inputs
     * @tags form
     * @example <zane-form-control label='Full Name' required>
     * <zane-input type='text'></zane-input>
     * </zane-form-control>
     */
    interface HTMLZaneFormControlElement extends Components.ZaneFormControl, HTMLStencilElement {
    }
    var HTMLZaneFormControlElement: {
        prototype: HTMLZaneFormControlElement;
        new (): HTMLZaneFormControlElement;
    };
    /**
     * @name Header
     * @description Header component is used to display a header with a brand, navigation, and actions.
     * @category Navigation
     * @img /assets/img/header.webp
     * @imgDark /assets/img/header-dark.webp
     */
    interface HTMLZaneHeaderElement extends Components.ZaneHeader, HTMLStencilElement {
    }
    var HTMLZaneHeaderElement: {
        prototype: HTMLZaneHeaderElement;
        new (): HTMLZaneHeaderElement;
    };
    interface HTMLZaneHeaderActionElement extends Components.ZaneHeaderAction, HTMLStencilElement {
    }
    var HTMLZaneHeaderActionElement: {
        prototype: HTMLZaneHeaderActionElement;
        new (): HTMLZaneHeaderActionElement;
    };
    interface HTMLZaneHeaderBrandElement extends Components.ZaneHeaderBrand, HTMLStencilElement {
    }
    var HTMLZaneHeaderBrandElement: {
        prototype: HTMLZaneHeaderBrandElement;
        new (): HTMLZaneHeaderBrandElement;
    };
    interface HTMLZaneHtmlEditorElementEventMap {
        "zane-html-editor--change": any;
        "zane-html-editor--search": any;
    }
    /**
     * @name HTML Editor
     * @description HTML Editor component is a WYSIWYG editor that allows users to edit HTML content.
     * @category Up coming
     * @tags input, form
     * @img /assets/img/html-editor.webp
     * @imgDark /assets/img/html-editor-dark.webp
     */
    interface HTMLZaneHtmlEditorElement extends Components.ZaneHtmlEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneHtmlEditorElementEventMap>(type: K, listener: (this: HTMLZaneHtmlEditorElement, ev: ZaneHtmlEditorCustomEvent<HTMLZaneHtmlEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneHtmlEditorElementEventMap>(type: K, listener: (this: HTMLZaneHtmlEditorElement, ev: ZaneHtmlEditorCustomEvent<HTMLZaneHtmlEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneHtmlEditorElement: {
        prototype: HTMLZaneHtmlEditorElement;
        new (): HTMLZaneHtmlEditorElement;
    };
    /**
     * @name Icon
     * @description Icons are visual symbols used to represent ideas, objects, or actions.
     * @overview Icons are visual symbols used to represent ideas, objects, or actions. They communicate messages at a glance, afford interactivity, and draw attention to important information.
     * @category General
     * @example <zane-icon name="home" size="2rem"></zane-icon>
     */
    interface HTMLZaneIconElement extends Components.ZaneIcon, HTMLStencilElement {
    }
    var HTMLZaneIconElement: {
        prototype: HTMLZaneIconElement;
        new (): HTMLZaneIconElement;
    };
    interface HTMLZaneImageElement extends Components.ZaneImage, HTMLStencilElement {
    }
    var HTMLZaneImageElement: {
        prototype: HTMLZaneImageElement;
        new (): HTMLZaneImageElement;
    };
    interface HTMLZaneInputElementEventMap {
        "zane-input--blur": any;
        "zane-input--change": any;
        "zane-input--focus": any;
        "zane-input--input": any;
    }
    /**
     * @name Input
     * @description Enables native inputs to be used within a Form field.
     * @category Form Inputs
     * @tags input, form
     * @example <zane-input placeholder="Enter your name"></zane-input>
     */
    interface HTMLZaneInputElement extends Components.ZaneInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneInputElementEventMap>(type: K, listener: (this: HTMLZaneInputElement, ev: ZaneInputCustomEvent<HTMLZaneInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneInputElementEventMap>(type: K, listener: (this: HTMLZaneInputElement, ev: ZaneInputCustomEvent<HTMLZaneInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneInputElement: {
        prototype: HTMLZaneInputElement;
        new (): HTMLZaneInputElement;
    };
    interface HTMLZaneInputUrlElementEventMap {
        "inputInvalid": boolean;
        "valueChange": string;
    }
    /**
     * @name Input URL
     * @description A specialized input field for URL validation.
     * @category Up coming
     * @tags input, form, url
     * @example <zane-input-url value="https://shivajivarma.com"></zane-input-url>
     */
    interface HTMLZaneInputUrlElement extends Components.ZaneInputUrl, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneInputUrlElementEventMap>(type: K, listener: (this: HTMLZaneInputUrlElement, ev: ZaneInputUrlCustomEvent<HTMLZaneInputUrlElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneInputUrlElementEventMap>(type: K, listener: (this: HTMLZaneInputUrlElement, ev: ZaneInputUrlCustomEvent<HTMLZaneInputUrlElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneInputUrlElement: {
        prototype: HTMLZaneInputUrlElement;
        new (): HTMLZaneInputUrlElement;
    };
    /**
     * @name Link
     * @description Links allow users to click their way from page to page.
     * @category Navigation
     * @example <zane-link href="#">Link</zane-link>
     */
    interface HTMLZaneLinkElement extends Components.ZaneLink, HTMLStencilElement {
    }
    var HTMLZaneLinkElement: {
        prototype: HTMLZaneLinkElement;
        new (): HTMLZaneLinkElement;
    };
    /**
     * @name Menu
     * @description Menus display a list of choices on temporary surfaces.
     * @category Navigation
     * @subcategory Menu
     * @img /assets/img/menu.webp
     * @imgDark /assets/img/menu-dark.webp
     */
    interface HTMLZaneMenuElement extends Components.ZaneMenu, HTMLStencilElement {
    }
    var HTMLZaneMenuElement: {
        prototype: HTMLZaneMenuElement;
        new (): HTMLZaneMenuElement;
    };
    /**
     * @name MenuDivider
     * @description A divider to separate menu items.
     * @category Layout
     * @subcategory Menu
     * @childComponents true
     * @example <zane-divider style="width: 12rem;">or</zane-divider>
     */
    interface HTMLZaneMenuDividerElement extends Components.ZaneMenuDivider, HTMLStencilElement {
    }
    var HTMLZaneMenuDividerElement: {
        prototype: HTMLZaneMenuDividerElement;
        new (): HTMLZaneMenuDividerElement;
    };
    interface HTMLZaneMenuItemElementEventMap {
        "zane-menu-item--click": any;
    }
    /**
     * @name Menu Item
     * @description Menu items display a list of choices on temporary surfaces.
     * @category Navigation
     * @subcategory Menu
     * @childComponent true
     */
    interface HTMLZaneMenuItemElement extends Components.ZaneMenuItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneMenuItemElementEventMap>(type: K, listener: (this: HTMLZaneMenuItemElement, ev: ZaneMenuItemCustomEvent<HTMLZaneMenuItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneMenuItemElementEventMap>(type: K, listener: (this: HTMLZaneMenuItemElement, ev: ZaneMenuItemCustomEvent<HTMLZaneMenuItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneMenuItemElement: {
        prototype: HTMLZaneMenuItemElement;
        new (): HTMLZaneMenuItemElement;
    };
    interface HTMLZaneModalElementEventMap {
        "zane-modal--close": any;
    }
    /**
     * @name Modal
     * @description Modals are used to display content in a layer above the app.
     * @category Informational
     * @subcategory Modal
     * @tags controls
     * @img /assets/img/modal.webp
     * @imgDark /assets/img/modal-dark.webp
     */
    interface HTMLZaneModalElement extends Components.ZaneModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneModalElementEventMap>(type: K, listener: (this: HTMLZaneModalElement, ev: ZaneModalCustomEvent<HTMLZaneModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneModalElementEventMap>(type: K, listener: (this: HTMLZaneModalElement, ev: ZaneModalCustomEvent<HTMLZaneModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneModalElement: {
        prototype: HTMLZaneModalElement;
        new (): HTMLZaneModalElement;
    };
    /**
     * @name Modal Content
     * @description The Modal Content component is used to display the content within a modal.
     * @category Informational
     * @subcategory Modal
     * @childComponent true
     */
    interface HTMLZaneModalContentElement extends Components.ZaneModalContent, HTMLStencilElement {
    }
    var HTMLZaneModalContentElement: {
        prototype: HTMLZaneModalContentElement;
        new (): HTMLZaneModalContentElement;
    };
    interface HTMLZaneNotificationElementEventMap {
        "zane-notification--action-click": any;
        "zane-notification--dismiss": any;
    }
    /**
     * @name Notification
     * @description Notifications are messages that communicate information to the user.
     * @category Informational
     * @tags notification
     * @example <zane-notification state="success">
     *      <div slot='title'>Successful saved the record</div>
     *    </zane-notification>
     */
    interface HTMLZaneNotificationElement extends Components.ZaneNotification, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneNotificationElementEventMap>(type: K, listener: (this: HTMLZaneNotificationElement, ev: ZaneNotificationCustomEvent<HTMLZaneNotificationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneNotificationElementEventMap>(type: K, listener: (this: HTMLZaneNotificationElement, ev: ZaneNotificationCustomEvent<HTMLZaneNotificationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneNotificationElement: {
        prototype: HTMLZaneNotificationElement;
        new (): HTMLZaneNotificationElement;
    };
    /**
     * @name Notification Manager
     * @description The Notification Manager handles the organization and display of notifications within the application.
     * @category Informational
     * @tags notification
     * @img /assets/img/notification-manager.webp
     * @imgDark /assets/img/notification-manager-dark.webp
     */
    interface HTMLZaneNotificationManagerElement extends Components.ZaneNotificationManager, HTMLStencilElement {
    }
    var HTMLZaneNotificationManagerElement: {
        prototype: HTMLZaneNotificationManagerElement;
        new (): HTMLZaneNotificationManagerElement;
    };
    interface HTMLZaneNumberElementEventMap {
        "zane-number--blur": any;
        "zane-number--change": any;
        "zane-number--focus": any;
        "zane-number--input": any;
    }
    /**
     * @name Number
     * @description Number input lets users enter a numeric value and incrementally increase or decrease the value with a two-segment control.
     * @category Form Inputs
     * @tags input, form
     * @example <zane-number value="100"></zane-input>
     */
    interface HTMLZaneNumberElement extends Components.ZaneNumber, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneNumberElementEventMap>(type: K, listener: (this: HTMLZaneNumberElement, ev: ZaneNumberCustomEvent<HTMLZaneNumberElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneNumberElementEventMap>(type: K, listener: (this: HTMLZaneNumberElement, ev: ZaneNumberCustomEvent<HTMLZaneNumberElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneNumberElement: {
        prototype: HTMLZaneNumberElement;
        new (): HTMLZaneNumberElement;
    };
    interface HTMLZanePopoverElementEventMap {
        "zane-popover--close": any;
        "zane-popover--open": any;
    }
    /**
     * @name Popover
     * @description The Popover component is used to display additional information.
     * @category Informational
     * @subcategory Popover
     * @img /assets/img/dropdown.webp
     * @imgDark /assets/img/dropdown-dark.webp
     */
    interface HTMLZanePopoverElement extends Components.ZanePopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZanePopoverElementEventMap>(type: K, listener: (this: HTMLZanePopoverElement, ev: ZanePopoverCustomEvent<HTMLZanePopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZanePopoverElementEventMap>(type: K, listener: (this: HTMLZanePopoverElement, ev: ZanePopoverCustomEvent<HTMLZanePopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZanePopoverElement: {
        prototype: HTMLZanePopoverElement;
        new (): HTMLZanePopoverElement;
    };
    /**
     * @name Popover Content
     * @description The PopoverContent component is used to display additional information.
     * @category Informational
     * @subcategory Popover
     * @childComponent true
     */
    interface HTMLZanePopoverContentElement extends Components.ZanePopoverContent, HTMLStencilElement {
    }
    var HTMLZanePopoverContentElement: {
        prototype: HTMLZanePopoverContentElement;
        new (): HTMLZanePopoverContentElement;
    };
    /**
     * @name Progress
     * @description Progress indicators express an unspecified wait time or display the length of a process.
     * @category Informational
     * @tags feedback, loading, progress, spinner
     * @example <zane-progress value="40" label="Progress" width="100%" helper-text="Optional helper text goes here..."></zane-progress>
     */
    interface HTMLZaneProgressElement extends Components.ZaneProgress, HTMLStencilElement {
    }
    var HTMLZaneProgressElement: {
        prototype: HTMLZaneProgressElement;
        new (): HTMLZaneProgressElement;
    };
    interface HTMLZaneSelectElementEventMap {
        "zane-select--change": any;
        "zane-select--search": any;
        "zane-select--enter": any;
    }
    /**
     * @name Select
     * @description Allows the user to select one or more options using a dropdown.
     * @category Form Inputs
     * @tags input, form
     * @img /assets/img/select.webp
     * @imgDark /assets/img/select-dark.webp
     */
    interface HTMLZaneSelectElement extends Components.ZaneSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneSelectElementEventMap>(type: K, listener: (this: HTMLZaneSelectElement, ev: ZaneSelectCustomEvent<HTMLZaneSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneSelectElementEventMap>(type: K, listener: (this: HTMLZaneSelectElement, ev: ZaneSelectCustomEvent<HTMLZaneSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneSelectElement: {
        prototype: HTMLZaneSelectElement;
        new (): HTMLZaneSelectElement;
    };
    /**
     * @name1 Side Navigation
     * @description1 The side navigation component provides an easy way to navigate through your website / application.
     * @img1 /assets/img/sidenav.webp
     */
    interface HTMLZaneSidenavElement extends Components.ZaneSidenav, HTMLStencilElement {
    }
    var HTMLZaneSidenavElement: {
        prototype: HTMLZaneSidenavElement;
        new (): HTMLZaneSidenavElement;
    };
    interface HTMLZaneSidenavMenuElement extends Components.ZaneSidenavMenu, HTMLStencilElement {
    }
    var HTMLZaneSidenavMenuElement: {
        prototype: HTMLZaneSidenavMenuElement;
        new (): HTMLZaneSidenavMenuElement;
    };
    interface HTMLZaneSidenavMenuItemElementEventMap {
        "zane:sidenav-menu-item-click": any;
    }
    interface HTMLZaneSidenavMenuItemElement extends Components.ZaneSidenavMenuItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneSidenavMenuItemElementEventMap>(type: K, listener: (this: HTMLZaneSidenavMenuItemElement, ev: ZaneSidenavMenuItemCustomEvent<HTMLZaneSidenavMenuItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneSidenavMenuItemElementEventMap>(type: K, listener: (this: HTMLZaneSidenavMenuItemElement, ev: ZaneSidenavMenuItemCustomEvent<HTMLZaneSidenavMenuItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneSidenavMenuItemElement: {
        prototype: HTMLZaneSidenavMenuItemElement;
        new (): HTMLZaneSidenavMenuItemElement;
    };
    interface HTMLZaneSliderElementEventMap {
        "zane-slider--change": any;
        "zane-slider--input": any;
    }
    /**
     * @name Slider
     * @description Sliders allow users to make selections from a range of values.
     * @category Form Inputs
     * @tags input, form
     * @img /assets/img/slider.webp
     * @imgDark /assets/img/slider-dark.webp
     */
    interface HTMLZaneSliderElement extends Components.ZaneSlider, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneSliderElementEventMap>(type: K, listener: (this: HTMLZaneSliderElement, ev: ZaneSliderCustomEvent<HTMLZaneSliderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneSliderElementEventMap>(type: K, listener: (this: HTMLZaneSliderElement, ev: ZaneSliderCustomEvent<HTMLZaneSliderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneSliderElement: {
        prototype: HTMLZaneSliderElement;
        new (): HTMLZaneSliderElement;
    };
    /**
     * @name Spinner
     * @description Spinners provide a visual cue that an action is processing awaiting a course of change or a result.
     * @category Informational
     * @tags feedback, loading, progress, spinner
     * @example <zane-spinner class="rainbow" size="2rem"></zane-spinner>
     */
    interface HTMLZaneSpinnerElement extends Components.ZaneSpinner, HTMLStencilElement {
    }
    var HTMLZaneSpinnerElement: {
        prototype: HTMLZaneSpinnerElement;
        new (): HTMLZaneSpinnerElement;
    };
    /**
     * @name SVG
     * @description Render SVG content from an external source.
     * @category Data Display
     * @example <zane-svg src="https://icons.getbootstrap.com/assets/icons/bug.svg" size="2rem"></zane-svg>
     */
    interface HTMLZaneSvgElement extends Components.ZaneSvg, HTMLStencilElement {
    }
    var HTMLZaneSvgElement: {
        prototype: HTMLZaneSvgElement;
        new (): HTMLZaneSvgElement;
    };
    interface HTMLZaneTabElementEventMap {
        "zane-tab--click": any;
    }
    interface HTMLZaneTabElement extends Components.ZaneTab, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneTabElementEventMap>(type: K, listener: (this: HTMLZaneTabElement, ev: ZaneTabCustomEvent<HTMLZaneTabElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneTabElementEventMap>(type: K, listener: (this: HTMLZaneTabElement, ev: ZaneTabCustomEvent<HTMLZaneTabElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneTabElement: {
        prototype: HTMLZaneTabElement;
        new (): HTMLZaneTabElement;
    };
    interface HTMLZaneTabPanelElement extends Components.ZaneTabPanel, HTMLStencilElement {
    }
    var HTMLZaneTabPanelElement: {
        prototype: HTMLZaneTabPanelElement;
        new (): HTMLZaneTabPanelElement;
    };
    interface HTMLZaneTableElementEventMap {
        "zane-table--cell-click": any;
        "zane-table--page": any;
        "zane-table--selection-change": any;
        "zane-table--sort": any;
    }
    /**
     * @name Table
     * @description A configurable component for displaying tabular data.
     * @category Data Display
     * @img /assets/img/table.webp
     * @imgDark /assets/img/table-dark.webp
     */
    interface HTMLZaneTableElement extends Components.ZaneTable, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneTableElementEventMap>(type: K, listener: (this: HTMLZaneTableElement, ev: ZaneTableCustomEvent<HTMLZaneTableElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneTableElementEventMap>(type: K, listener: (this: HTMLZaneTableElement, ev: ZaneTableCustomEvent<HTMLZaneTableElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneTableElement: {
        prototype: HTMLZaneTableElement;
        new (): HTMLZaneTableElement;
    };
    /**
     * @name Tabs
     * @description The tabs component is used to display multiple panels of content in a container.
     * @category Navigation
     * @tags navigation
     * @example <zane-tabs>
     * <zane-tabs-list>
     * <zane-tab selected >Tab 1</zane-tab>
     * <zane-tab>Tab 2</zane-tab>
     * </zane-tabs-list>
     * </zane-tabs>
     */
    interface HTMLZaneTabsElement extends Components.ZaneTabs, HTMLStencilElement {
    }
    var HTMLZaneTabsElement: {
        prototype: HTMLZaneTabsElement;
        new (): HTMLZaneTabsElement;
    };
    interface HTMLZaneTabsListElement extends Components.ZaneTabsList, HTMLStencilElement {
    }
    var HTMLZaneTabsListElement: {
        prototype: HTMLZaneTabsListElement;
        new (): HTMLZaneTabsListElement;
    };
    interface HTMLZaneTagElementEventMap {
        "zane-tag--click": any;
        "zane-tag--dismiss": any;
    }
    /**
     * @name Tag
     * @description Use tags to label, categorize, or organize items using keywords that describe them.
     * @category Data Display
     * @tag controls
     * @example <zane-tag class="color-red">Important</zane-tag>
     */
    interface HTMLZaneTagElement extends Components.ZaneTag, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneTagElementEventMap>(type: K, listener: (this: HTMLZaneTagElement, ev: ZaneTagCustomEvent<HTMLZaneTagElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneTagElementEventMap>(type: K, listener: (this: HTMLZaneTagElement, ev: ZaneTagCustomEvent<HTMLZaneTagElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneTagElement: {
        prototype: HTMLZaneTagElement;
        new (): HTMLZaneTagElement;
    };
    /**
     * @name Text
     * @description Typography are used for rendering headlines, paragraphs and captions.
     * @category General
     * @example <zane-text type="heading" level="1">Heading</zane-typography>
     */
    interface HTMLZaneTextElement extends Components.ZaneText, HTMLStencilElement {
    }
    var HTMLZaneTextElement: {
        prototype: HTMLZaneTextElement;
        new (): HTMLZaneTextElement;
    };
    interface HTMLZaneTextareaElementEventMap {
        "zane-textarea--action-click": any;
        "zane-textarea--blur": any;
        "zane-textarea--change": any;
        "zane-textarea--focus": any;
        "zane-textarea--input": any;
    }
    /**
     * @name Textarea
     * @description Enables native inputs to be used within a Form field.
     * @category Form Inputs
     * @tags input, form
     * @example <zane-textarea placeholder="Enter some description over here"></zane-textarea>
     */
    interface HTMLZaneTextareaElement extends Components.ZaneTextarea, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneTextareaElementEventMap>(type: K, listener: (this: HTMLZaneTextareaElement, ev: ZaneTextareaCustomEvent<HTMLZaneTextareaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneTextareaElementEventMap>(type: K, listener: (this: HTMLZaneTextareaElement, ev: ZaneTextareaCustomEvent<HTMLZaneTextareaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneTextareaElement: {
        prototype: HTMLZaneTextareaElement;
        new (): HTMLZaneTextareaElement;
    };
    interface HTMLZaneTimePickerElementEventMap {
        "zane-time-picker--blur": any;
        "zane-time-picker--change": any;
        "zane-time-picker--focus": any;
        "zane-time-picker--input": any;
    }
    /**
     * @name Time Picker
     * @description Captures time input.
     * @category Form Inputs
     * @tags input, form
     * @example <zane-time-picker value='true'></zane-time-picker>
     */
    interface HTMLZaneTimePickerElement extends Components.ZaneTimePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneTimePickerElementEventMap>(type: K, listener: (this: HTMLZaneTimePickerElement, ev: ZaneTimePickerCustomEvent<HTMLZaneTimePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneTimePickerElementEventMap>(type: K, listener: (this: HTMLZaneTimePickerElement, ev: ZaneTimePickerCustomEvent<HTMLZaneTimePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneTimePickerElement: {
        prototype: HTMLZaneTimePickerElement;
        new (): HTMLZaneTimePickerElement;
    };
    interface HTMLZaneToggleElementEventMap {
        "zane-toggle--blur": any;
        "zane-toggle--change": any;
        "zane-toggle--focus": any;
    }
    /**
     * @name Toggle
     * @description Captures boolean input with an optional indeterminate mode.
     * @category Form Inputs
     * @tags input, form
     * @example <zane-toggle value='true'>Want ice cream?</zane-toggle>
     */
    interface HTMLZaneToggleElement extends Components.ZaneToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneToggleElementEventMap>(type: K, listener: (this: HTMLZaneToggleElement, ev: ZaneToggleCustomEvent<HTMLZaneToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneToggleElementEventMap>(type: K, listener: (this: HTMLZaneToggleElement, ev: ZaneToggleCustomEvent<HTMLZaneToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneToggleElement: {
        prototype: HTMLZaneToggleElement;
        new (): HTMLZaneToggleElement;
    };
    /**
     * @name Tooltip
     * @description The Tooltip component is used to display additional information on hover.
     * @category Informational
     * @tag content
     * @img /assets/img/tooltip.webp
     * @imgDark /assets/img/tooltip-dark.webp
     */
    interface HTMLZaneTooltipElement extends Components.ZaneTooltip, HTMLStencilElement {
    }
    var HTMLZaneTooltipElement: {
        prototype: HTMLZaneTooltipElement;
        new (): HTMLZaneTooltipElement;
    };
    /**
     * @name Tree
     * @description A tree view is a hierarchical structure that provides nested levels of navigation.
     * @category Navigation
     * @subcategory Tree View
     * @img /assets/img/tree-view.webp
     * @imgDark /assets/img/tree-view-dark.webp
     */
    interface HTMLZaneTreeElement extends Components.ZaneTree, HTMLStencilElement {
    }
    var HTMLZaneTreeElement: {
        prototype: HTMLZaneTreeElement;
        new (): HTMLZaneTreeElement;
    };
    interface HTMLZaneTreeNodeElementEventMap {
        "zane-tree-node--click": any;
    }
    /**
     * @name TreeNode
     * @description A tree node is a hierarchical structure that provides nested levels of navigation.
     * @category Navigation
     * @subcategory Tree View
     * @childComponent true
     * @img /assets/img/tree-view.webp
     * @imgDark /assets/img/tree-view-dark.webp
     */
    interface HTMLZaneTreeNodeElement extends Components.ZaneTreeNode, HTMLStencilElement {
        addEventListener<K extends keyof HTMLZaneTreeNodeElementEventMap>(type: K, listener: (this: HTMLZaneTreeNodeElement, ev: ZaneTreeNodeCustomEvent<HTMLZaneTreeNodeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLZaneTreeNodeElementEventMap>(type: K, listener: (this: HTMLZaneTreeNodeElement, ev: ZaneTreeNodeCustomEvent<HTMLZaneTreeNodeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLZaneTreeNodeElement: {
        prototype: HTMLZaneTreeNodeElement;
        new (): HTMLZaneTreeNodeElement;
    };
    interface HTMLElementTagNameMap {
        "zane-accordion": HTMLZaneAccordionElement;
        "zane-accordion-item": HTMLZaneAccordionItemElement;
        "zane-avatar": HTMLZaneAvatarElement;
        "zane-badge": HTMLZaneBadgeElement;
        "zane-breadcrumb": HTMLZaneBreadcrumbElement;
        "zane-breadcrumb-item": HTMLZaneBreadcrumbItemElement;
        "zane-button": HTMLZaneButtonElement;
        "zane-button-group": HTMLZaneButtonGroupElement;
        "zane-card": HTMLZaneCardElement;
        "zane-checkbox": HTMLZaneCheckboxElement;
        "zane-code-editor": HTMLZaneCodeEditorElement;
        "zane-code-highlighter": HTMLZaneCodeHighlighterElement;
        "zane-container": HTMLZaneContainerElement;
        "zane-current-time": HTMLZaneCurrentTimeElement;
        "zane-date-picker": HTMLZaneDatePickerElement;
        "zane-divider": HTMLZaneDividerElement;
        "zane-dropdown": HTMLZaneDropdownElement;
        "zane-dropdown-menu": HTMLZaneDropdownMenuElement;
        "zane-empty-state": HTMLZaneEmptyStateElement;
        "zane-footer": HTMLZaneFooterElement;
        "zane-footer-copyright": HTMLZaneFooterCopyrightElement;
        "zane-footer-links": HTMLZaneFooterLinksElement;
        "zane-form-control": HTMLZaneFormControlElement;
        "zane-header": HTMLZaneHeaderElement;
        "zane-header-action": HTMLZaneHeaderActionElement;
        "zane-header-brand": HTMLZaneHeaderBrandElement;
        "zane-html-editor": HTMLZaneHtmlEditorElement;
        "zane-icon": HTMLZaneIconElement;
        "zane-image": HTMLZaneImageElement;
        "zane-input": HTMLZaneInputElement;
        "zane-input-url": HTMLZaneInputUrlElement;
        "zane-link": HTMLZaneLinkElement;
        "zane-menu": HTMLZaneMenuElement;
        "zane-menu-divider": HTMLZaneMenuDividerElement;
        "zane-menu-item": HTMLZaneMenuItemElement;
        "zane-modal": HTMLZaneModalElement;
        "zane-modal-content": HTMLZaneModalContentElement;
        "zane-notification": HTMLZaneNotificationElement;
        "zane-notification-manager": HTMLZaneNotificationManagerElement;
        "zane-number": HTMLZaneNumberElement;
        "zane-popover": HTMLZanePopoverElement;
        "zane-popover-content": HTMLZanePopoverContentElement;
        "zane-progress": HTMLZaneProgressElement;
        "zane-select": HTMLZaneSelectElement;
        "zane-sidenav": HTMLZaneSidenavElement;
        "zane-sidenav-menu": HTMLZaneSidenavMenuElement;
        "zane-sidenav-menu-item": HTMLZaneSidenavMenuItemElement;
        "zane-slider": HTMLZaneSliderElement;
        "zane-spinner": HTMLZaneSpinnerElement;
        "zane-svg": HTMLZaneSvgElement;
        "zane-tab": HTMLZaneTabElement;
        "zane-tab-panel": HTMLZaneTabPanelElement;
        "zane-table": HTMLZaneTableElement;
        "zane-tabs": HTMLZaneTabsElement;
        "zane-tabs-list": HTMLZaneTabsListElement;
        "zane-tag": HTMLZaneTagElement;
        "zane-text": HTMLZaneTextElement;
        "zane-textarea": HTMLZaneTextareaElement;
        "zane-time-picker": HTMLZaneTimePickerElement;
        "zane-toggle": HTMLZaneToggleElement;
        "zane-tooltip": HTMLZaneTooltipElement;
        "zane-tree": HTMLZaneTreeElement;
        "zane-tree-node": HTMLZaneTreeNodeElement;
    }
}
declare namespace LocalJSX {
    /**
     * @name Accordion
     * @description An accordion is a vertically stacked list of headers that reveal or hide associated sections of content.
     * @overview  <p>The accordion component delivers large amounts of content in a small space through progressive disclosure. The header title give the user a high level overview of the content allowing the user to decide which sections to read.</p>
     *  <p>Accordions can make information processing and discovering more effective. However, it does hide content from users and it’s important to account for a user not noticing or reading all of the included content. If a user is likely to read all of the content then don’t use an accordion as it adds the burden of an extra click; instead use a full scrolling page with normal headers.</p>
     * @category Data Display
     * @subcategory Accordion
     * @tags display
     * @img /assets/img/accordion.webp
     * @imgDark /assets/img/accordion-dark.webp
     */
    interface ZaneAccordion {
        /**
          * Accordion item dropdown alignment.
          * @default 'end'
         */
        "align"?: 'end' | 'start';
        /**
          * @default false
         */
        "multiple"?: boolean;
        /**
          * The According size.
          * @default 'md'
         */
        "size"?: 'lg' | 'md' | 'sm';
    }
    /**
     * @name Accordion Item
     * @description An accordion item is single item in an accordion list. It contains a header and a content section that can be expanded or collapsed by the user.
     * @overview  <p>The accordion item component is a single item in an accordion list. It contains a header and a content section that can be expanded or collapsed by the user. The accordion item can be used in conjunction with the accordion component to create a list of expandable items.</p>
     * @category Data Display
     * @subcategory Accordion
     * @childComponent true
     */
    interface ZaneAccordionItem {
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * The menu item value.
         */
        "heading"?: string;
        /**
          * Emitted when the menu item is clicked.
         */
        "onZane-accordion-item--click"?: (event: ZaneAccordionItemCustomEvent<any>) => void;
        /**
          * Menu item selection state.
          * @default false
         */
        "open"?: boolean;
    }
    /**
     * @name Avatar
     * @description The Avatar component is used to represent user, and displays the profile picture, initials or fallback icon.
     * @category Data Display
     * @tags display
     * @example <zane-avatar size="5rem" name="Shivaji Varma" src="/assets/img/avatar.webp"></zane-avatar>
     */
    interface ZaneAvatar {
        /**
          * @default ''
         */
        "name"?: string;
        /**
          * Avatar size.
          * @default '2rem'
         */
        "size"?: string;
        /**
          * @default ''
         */
        "src"?: string;
    }
    /**
     * @name Badge
     * @description The badge component is used to display a small amount of information to the user.
     * @category Informational
     * @tag content
     * @example <zane-badge content="5"> <zane-icon name="notification" size="2rem"></zane-icon></zane-badge>
     */
    interface ZaneBadge {
        /**
          * @default 'error'
         */
        "color"?: | 'error'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning';
        "content"?: string;
    }
    /**
     * @name Breadcrumb
     * @description A breadcrumb is a secondary navigation scheme that reveals the user's location in a website or web application.
     * @category Navigation
     * @tags navigation
     * @example <zane-breadcrumb><zane-breadcrumb-item href="#">Home</zane-breadcrumb-item><zane-breadcrumb-item href="#" active>Page</zane-breadcrumb-item></zane-breadcrumb>
     */
    interface ZaneBreadcrumb {
    }
    interface ZaneBreadcrumbItem {
        /**
          * @default false
         */
        "active"?: boolean;
        /**
          * Hyperlink to navigate to on click.
         */
        "href"?: string;
        "position"?: string;
        /**
          * Sets or retrieves the window or frame at which to target content.
         */
        "target"?: string;
    }
    /**
     * @name Button
     * @description Buttons are used to initialize an action. Button labels express what action will occur when the user interacts with it.
     * @overview  <p>Buttons are clickable elements that are used to trigger actions. They communicate calls to action to the user and allow users to interact with pages in a variety of ways. Button labels express what action will occur when the user interacts with it.</p>
     * @category General
     * @tags controls
     * @example <zane-button>
     * Button CTA
     * </zane-button>
     */
    interface ZaneButton {
        /**
          * The `appendData` property allows you to attach additional data to the button component. This data can be of any type, making it versatile for various use cases. It's particularly useful for passing extra context or information that can be accessed in event handlers or other component logic.
         */
        "appendData"?: any;
        /**
          * Defines the primary color of the button. This can be set to predefined color names to apply specific color themes.
          * @default 'primary'
         */
        "color"?: | 'black'
    | 'danger'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning'
    | 'white';
        /**
          * @default {}
         */
        "configAria"?: any;
        /**
          * Color variant for dark mode, applicable when [data-theme="dark"] is set.
         */
        "darkModeColor"?: | 'black'
    | 'danger'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning'
    | 'white';
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * If button is disabled, the reason why it is disabled.
          * @default ''
         */
        "disabledReason"?: string;
        /**
          * Hyperlink to navigate to on click.
         */
        "href"?: string;
        /**
          * Icon which will displayed on button. Possible values are icon names.
         */
        "icon"?: string;
        /**
          * Icon alignment. Possible values are `"start"`, `"end"`. Defaults to `"end"`.
          * @default 'end'
         */
        "iconAlign"?: 'end' | 'start';
        /**
          * Triggered when the button is clicked.
         */
        "onZane-button--click"?: (event: ZaneButtonCustomEvent<{
    appendData: any;
  }>) => void;
        /**
          * Button selection state.
          * @default false
         */
        "selected"?: boolean;
        /**
          * If true, a loader will be displayed on button.
          * @default false
         */
        "showLoader"?: boolean;
        /**
          * Button size. Possible values are `"sm"`, `"md"`, `"lg"`, `"xl"`, `"2xl"`, `"full"`. Defaults to `"md"`.
          * @default 'md'
         */
        "size"?: '2xl' | 'lg' | 'md' | 'sm' | 'xl' | 'xs';
        /**
          * Sets or retrieves the window or frame at which to target content.
          * @default '_self'
         */
        "target"?: string;
        /**
          * Sets the delay for throttle in milliseconds. Defaults to 200 milliseconds.
          * @default 200
         */
        "throttleDelay"?: number;
        /**
          * If true, the button will be in a toggled state.
          * @default false
         */
        "toggle"?: boolean;
        /**
          * Button type based on which actions are performed when the button is clicked.
          * @default 'button'
         */
        "type"?: 'button' | 'reset' | 'submit';
        /**
          * The visual style of the button.   Possible variant values: `"default"` is a filled button. `"outline"` is an outlined button. `"ghost"` is a transparent button. `"light"` is a light color button.  Possible sub-variant values: `"simple"` is a simple button without default padding at end. `"block"` is a full-width button that spans the full width of its container.    Mix and match the `variant` and `sub-variant` to create a variety of buttons.  `"default.simple"`, `"outline.block"` etc.
          * @default 'default'
         */
        "variant"?: | 'default'
    | 'default.simple'
    | 'ghost'
    | 'ghost.simple'
    | 'light'
    | 'light.simple'
    | 'link'
    | 'link.simple'
    | 'neo'
    | 'neo.simple'
    | 'outline'
    | 'outline.simple';
    }
    /**
     * @name Button Group
     * @description Group a series of buttons together on a single line with the button group, and super-power.
     * @category General
     * @tags controls
     * @example <zane-button-group>
     * <zane-button block icon="home"></zane-button>
     * <zane-button block icon="alarm"></zane-button>
     * </zane-button-group>
     */
    interface ZaneButtonGroup {
    }
    interface ZaneCard {
        "shadowLevel"?: 'lg' | 'md' | 'sm' | 'xl' | 'xs' | 'xxl' | undefined;
    }
    /**
     * @name Checkbox
     * @description Captures boolean input with an optional indeterminate mode.
     * @category Form Inputs
     * @tags input, form
     * @example <zane-checkbox value='true'>Want ice cream?</zane-checkbox>
     */
    interface ZaneCheckbox {
        /**
          * @default {}
         */
        "configAria"?: any;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default false
         */
        "intermediate"?: boolean;
        /**
          * The checkbox label.
         */
        "label"?: string;
        "layer"?: '01' | '02' | 'background';
        /**
          * The input field name.
          * @default `zane-input-${this.gid}`
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onZane-checkbox--blur"?: (event: ZaneCheckboxCustomEvent<any>) => void;
        /**
          * On change of input a CustomEvent 'zane-checkbox--change' will be triggered. Event details contains parent event, oldValue, newValue of input.
         */
        "onZane-checkbox--change"?: (event: ZaneCheckboxCustomEvent<any>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onZane-checkbox--focus"?: (event: ZaneCheckboxCustomEvent<any>) => void;
        /**
          * @default false
         */
        "readonly"?: boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
          * @default false
         */
        "required"?: boolean;
        /**
          * @default false
         */
        "rounded"?: boolean;
        /**
          * The button size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
          * @default 'md'
         */
        "size"?: 'lg' | 'md' | 'sm';
        /**
          * The input field value.
          * @default false
         */
        "value"?: boolean;
    }
    /**
     * @name Code Editor
     * @description A browser based code editor.
     * @category Form Inputs
     * @tags input, form
     * @img /assets/img/code-editor.webp
     * @imgDark /assets/img/code-editor-dark.webp
     */
    interface ZaneCodeEditor {
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `onChange` event after each keystroke.
          * @default 250
         */
        "debounce"?: number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default 'javascript'
         */
        "language"?: 'html' | 'javascript' | 'json';
        "libSource"?: any;
        /**
          * @default 'on'
         */
        "lineNumbers"?: 'off' | 'on';
        /**
          * @default false
         */
        "minimap"?: boolean;
        /**
          * The input field name.
          * @default `zane-input-${this.gid}`
         */
        "name"?: string;
        /**
          * Emitted when the value has changed.
         */
        "onZane-code-editor--change"?: (event: ZaneCodeEditorCustomEvent<any>) => void;
        /**
          * @default false
         */
        "readonly"?: boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
          * @default false
         */
        "required"?: boolean;
        /**
          * The input field value.
         */
        "value"?: string;
    }
    /**
     * @name Code Highlighter
     * @description A browser based code highlighter.
     * @category Data Display
     * @tag display, code
     * @img /assets/img/code-highlighter.webp
     * @imgDark /assets/img/code-highlighter-dark.webp
     */
    interface ZaneCodeHighlighter {
        /**
          * Format the code snippet.
         */
        "format"?: boolean;
        /**
          * Hide the copy button.
          * @default false
         */
        "hideCopy"?: boolean;
        /**
          * Display the code snippet inline.
          * @default false
         */
        "inline"?: boolean;
        /**
          * The language of the code snippet.
          * @default 'javascript'
         */
        "language"?: Language;
        /**
          * Display line numbers.
          * @default false
         */
        "lineNumbers"?: boolean;
        /**
          * The code snippet to highlight.
          * @default ''
         */
        "value"?: string;
    }
    interface ZaneContainer {
        /**
          * @default 'full'
         */
        "size"?: 'full' | 'lg' | 'max' | 'md' | 'sm' | 'xl';
    }
    /**
     * @name Current Time
     * @description Displays the current time in a given timezone.
     * @category Others
     * @example <zane-current-time></zane-current-time>
     */
    interface ZaneCurrentTime {
        "timezone"?: string;
    }
    /**
     * @name Date Picker
     * @category Form Inputs
     * @description Captures date input.
     * @example <zane-date-picker value='true'></zane-date-picker>
     */
    interface ZaneDatePicker {
        /**
          * @default {}
         */
        "configAria"?: any;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `zaneChange` event after each keystroke.
          * @default 300
         */
        "debounce"?: number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled"?: boolean;
        "helperText"?: string;
        /**
          * @default false
         */
        "inline"?: boolean;
        /**
          * @default false
         */
        "invalid"?: boolean;
        "invalidText"?: string;
        "label"?: string;
        /**
          * The input field name.
          * @default `zane-input-${this.gid}`
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onZane-date-picker--blur"?: (event: ZaneDatePickerCustomEvent<any>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onZane-date-picker--change"?: (event: ZaneDatePickerCustomEvent<any>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onZane-date-picker--focus"?: (event: ZaneDatePickerCustomEvent<any>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onZane-date-picker--input"?: (event: ZaneDatePickerCustomEvent<any>) => void;
        /**
          * The input field placeholder.
         */
        "placeholder"?: string;
        /**
          * If true, the user read the value cannot modify it. Defaults to `false`.
          * @default false
         */
        "readonly"?: boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
          * @default false
         */
        "required"?: boolean;
        /**
          * The input field size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
          * @default 'md'
         */
        "size"?: 'lg' | 'md' | 'sm';
        /**
          * The input field value.
          * @default ''
         */
        "value"?: null | number | string;
        /**
          * @default false
         */
        "warn"?: boolean;
        "warnText"?: string;
    }
    /**
     * @name Divider
     * @description A divider can be used to segment content vertically or horizontally.
     * @category Layout
     * @example <zane-divider style="width: 12rem;">or</zane-divider>
     */
    interface ZaneDivider {
        /**
          * @default false
         */
        "vertical"?: boolean;
    }
    /**
     * @name Dropdown
     * @description Enables native inputs to be used within a Form field.
     * @category Navigation
     * @subcategory Dropdown
     * @img /assets/img/dropdown.webp
     * @imgDark /assets/img/dropdown-dark.webp
     */
    interface ZaneDropdown {
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default false
         */
        "managed"?: boolean;
        /**
          * Emitted when the dropdown is closed.
         */
        "onZane-dropdown--close"?: (event: ZaneDropdownCustomEvent<any>) => void;
        "onZane-dropdown--item-click"?: (event: ZaneDropdownCustomEvent<any>) => void;
        /**
          * Emitted when the dropdown is opened.
         */
        "onZane-dropdown--open"?: (event: ZaneDropdownCustomEvent<any>) => void;
        /**
          * @default false
         */
        "open"?: boolean;
        /**
          * @default 'bottom-start,top-start,bottom-end,top-end'
         */
        "placements"?: string;
        /**
          * @default 'click'
         */
        "trigger"?: 'click' | 'hover' | 'manual';
    }
    /**
     * @name Dropdown Menu
     * @description The Dropdown Menu component is used to display a list of options.
     * @category Navigation
     * @subcategory Dropdown
     * @childComponent true
     */
    interface ZaneDropdownMenu {
    }
    /**
     * @name Empty State
     * @description A message that displays when there is no information to display.
     * @category Data Display
     * @img /assets/img/empty-state.webp
     * @imgDark /assets/img/empty-state-dark.webp
     */
    interface ZaneEmptyState {
        "action"?: string;
        /**
          * @default false
         */
        "actionDisabled"?: boolean;
        "actionUrl"?: string;
        /**
          * @default 'default'
         */
        "actionVariant"?: 'default' | 'ghost' | 'outline';
        "description"?: string;
        "headline"?: string;
        /**
          * @default 'no-document'
         */
        "illustration"?: string;
    }
    /**
     * @name Footer
     * @description The footer component provides a container for displaying additional navigation information about a site.
     * @overview <p>The footer is one of the most underestimated sections of a website being located at the very bottom of every page, however, it can be used as a way to try to convince users to stay on your website if they haven’t found the information they’ve been looking for inside the main content area.</p>
     * @category Navigation
     * @img /assets/img/footer.webp
     * @imgDark /assets/img/footer-dark.webp
     */
    interface ZaneFooter {
        /**
          * @default 'simple'
         */
        "variant"?: string;
        /**
          * @default new Date().getFullYear()
         */
        "year"?: number;
    }
    interface ZaneFooterCopyright {
        "copyright"?: string;
        "copyrightHref"?: string;
        /**
          * @default new Date().getFullYear()
         */
        "year"?: number;
    }
    interface ZaneFooterLinks {
        /**
          * @default []
         */
        "links"?: { href: string; name: string }[];
    }
    /**
     * @name Form Control
     * @description The Form Control component adds a label and caption for its child control.
     * @category Form Inputs
     * @tags form
     * @example <zane-form-control label='Full Name' required>
     * <zane-input type='text'></zane-input>
     * </zane-form-control>
     */
    interface ZaneFormControl {
        "helperText"?: string;
        /**
          * @default false
         */
        "inline"?: boolean;
        /**
          * @default false
         */
        "invalid"?: boolean;
        "invalidText"?: string;
        "label"?: string;
        /**
          * Whether the form control is required.
          * @default false
         */
        "required"?: boolean;
        /**
          * @default false
         */
        "skeleton"?: boolean;
        /**
          * @default false
         */
        "warn"?: boolean;
        "warnText"?: string;
    }
    /**
     * @name Header
     * @description Header component is used to display a header with a brand, navigation, and actions.
     * @category Navigation
     * @img /assets/img/header.webp
     * @imgDark /assets/img/header-dark.webp
     */
    interface ZaneHeader {
        /**
          * Defines the primary color of the header. This can be set to predefined color names to apply specific color themes.
          * @default 'black'
         */
        "color"?: | 'black'
    | 'danger'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning'
    | 'white'
    | string;
        /**
          * Color variant for dark mode, applicable when [data-theme="dark"] is set.
         */
        "darkModeColor"?: | 'black'
    | 'danger'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning'
    | 'white'
    | string;
        /**
          * @default false
         */
        "float"?: boolean;
    }
    interface ZaneHeaderAction {
        /**
          * @default '_self'
         */
        "badge"?: string;
        /**
          * @default {}
         */
        "configAria"?: any;
        /**
          * Hyperlink to navigate to on click.
         */
        "href"?: string;
        /**
          * Icon which will displayed on button. Possible values are icon names.
         */
        "icon"?: string;
        /**
          * Button selection state.
          * @default false
         */
        "selected"?: boolean;
        /**
          * Button size. Possible values are `"sm"`, `"md"`, `"lg"`, `"xl"`, `"xxl"`, `"none"`. Defaults to `"md"`.
          * @default 'md'
         */
        "size"?: 'lg' | 'md' | 'none' | 'sm' | 'xl' | 'xxl';
        /**
          * Sets or retrieves the window or frame at which to target content.
          * @default '_self'
         */
        "target"?: string;
    }
    interface ZaneHeaderBrand {
        /**
          * @default '#'
         */
        "href"?: string;
        "logo"?: string;
        "name"?: string;
        "subTitle"?: string;
    }
    /**
     * @name HTML Editor
     * @description HTML Editor component is a WYSIWYG editor that allows users to edit HTML content.
     * @category Up coming
     * @tags input, form
     * @img /assets/img/html-editor.webp
     * @imgDark /assets/img/html-editor-dark.webp
     */
    interface ZaneHtmlEditor {
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `onChange` event after each keystroke.
          * @default 250
         */
        "debounce"?: number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled"?: boolean;
        "layer"?: '01' | '02' | 'background';
        /**
          * @default 'on'
         */
        "lineNumbers"?: 'off' | 'on';
        /**
          * @default []
         */
        "mentions"?: { label: string; value: string }[];
        /**
          * @default 'contains'
         */
        "mentionsSearch"?: 'contains' | 'managed';
        /**
          * The input field name.
          * @default `zane-input-${this.gid}`
         */
        "name"?: string;
        /**
          * Emitted when the value has changed..
         */
        "onZane-html-editor--change"?: (event: ZaneHtmlEditorCustomEvent<any>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onZane-html-editor--search"?: (event: ZaneHtmlEditorCustomEvent<any>) => void;
        /**
          * The input field placeholder.
         */
        "placeholder"?: string;
        /**
          * @default false
         */
        "readonly"?: boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
          * @default false
         */
        "required"?: boolean;
        /**
          * @default true
         */
        "showSuggestionCharacter"?: boolean;
        /**
          * @default true
         */
        "showToolbar"?: boolean;
        /**
          * @default '@'
         */
        "suggestionCharacter"?: string;
        /**
          * @default 'vs-light'
         */
        "theme"?: 'vs-dark' | 'vs-light';
        /**
          * The input field value.
         */
        "value"?: string;
    }
    /**
     * @name Icon
     * @description Icons are visual symbols used to represent ideas, objects, or actions.
     * @overview Icons are visual symbols used to represent ideas, objects, or actions. They communicate messages at a glance, afford interactivity, and draw attention to important information.
     * @category General
     * @example <zane-icon name="home" size="2rem"></zane-icon>
     */
    interface ZaneIcon {
        /**
          * The identifier for the icon. This name corresponds to a specific SVG asset in the icon set.
         */
        "name"?: string;
        /**
          * The size of the icon. This can be specified in pixels (px) or rem units to control the icon's dimensions. If a number is provided, it will be treated as rem units. For example, '16px', '2rem', or 2 would be valid values.
         */
        "size"?: string;
    }
    interface ZaneImage {
        "darkSrc"?: string;
        "imageTitle"?: string;
        "src"?: string;
    }
    /**
     * @name Input
     * @description Enables native inputs to be used within a Form field.
     * @category Form Inputs
     * @tags input, form
     * @example <zane-input placeholder="Enter your name"></zane-input>
     */
    interface ZaneInput {
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
          * @default 'off'
         */
        "autocomplete"?: 'off' | 'on';
        /**
          * @default {}
         */
        "configAria"?: any;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `zaneChange` event after each keystroke.
          * @default 300
         */
        "debounce"?: number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled"?: boolean;
        "helperText"?: string;
        /**
          * @default false
         */
        "inline"?: boolean;
        /**
          * @default false
         */
        "invalid"?: boolean;
        "invalidText"?: string;
        "label"?: string;
        /**
          * The input field name.
          * @default `zane-input-${this.gid}`
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onZane-input--blur"?: (event: ZaneInputCustomEvent<any>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onZane-input--change"?: (event: ZaneInputCustomEvent<any>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onZane-input--focus"?: (event: ZaneInputCustomEvent<any>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onZane-input--input"?: (event: ZaneInputCustomEvent<any>) => void;
        /**
          * The input field placeholder.
         */
        "placeholder"?: string;
        /**
          * If true, the user read the value cannot modify it. Defaults to `false`.
          * @default false
         */
        "readonly"?: boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
          * @default false
         */
        "required"?: boolean;
        /**
          * The input field size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
          * @default 'md'
         */
        "size"?: 'lg' | 'md' | 'sm';
        /**
          * @default false
         */
        "skeleton"?: boolean;
        /**
          * The type of control to display. Possible values are: `"text"`, `"password"`, `"email"`, `"tel"`. Defaults to `"text"`.
          * @default 'text'
         */
        "type"?: 'email' | 'password' | 'tel' | 'text';
        /**
          * The input field value.
         */
        "value"?: string;
        /**
          * @default false
         */
        "warn"?: boolean;
        "warnText"?: string;
    }
    /**
     * @name Input URL
     * @description A specialized input field for URL validation.
     * @category Up coming
     * @tags input, form, url
     * @example <zane-input-url value="https://shivajivarma.com"></zane-input-url>
     */
    interface ZaneInputUrl {
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `valueChange` event after each keystroke.
          * @default 300
         */
        "debounce"?: number;
        /**
          * If true, the user cannot interact with the input. Defaults to `false`.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default false
         */
        "editing"?: boolean;
        /**
          * The input field name.
          * @default `zane-input-url-${this.gid}`
         */
        "name"?: string;
        /**
          * Emitted when the URL input is invalid.
         */
        "onInputInvalid"?: (event: ZaneInputUrlCustomEvent<boolean>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onValueChange"?: (event: ZaneInputUrlCustomEvent<string>) => void;
        /**
          * The input field placeholder.
         */
        "placeholder"?: string;
        /**
          * The input field size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
          * @default 'md'
         */
        "size"?: 'lg' | 'md' | 'sm';
        /**
          * The input field value.
         */
        "value"?: string;
    }
    /**
     * @name Link
     * @description Links allow users to click their way from page to page.
     * @category Navigation
     * @example <zane-link href="#">Link</zane-link>
     */
    interface ZaneLink {
        /**
          * Hyperlink to navigate to on click.
         */
        "href"?: string;
        /**
          * Sets or retrieves the window or frame at which to target content.
         */
        "target"?: string;
    }
    /**
     * @name Menu
     * @description Menus display a list of choices on temporary surfaces.
     * @category Navigation
     * @subcategory Menu
     * @img /assets/img/menu.webp
     * @imgDark /assets/img/menu-dark.webp
     */
    interface ZaneMenu {
        /**
          * @default false
         */
        "empty"?: boolean;
        /**
          * @default 'There are no items to display'
         */
        "emptyStateDescription"?: string;
        /**
          * @default 'No items'
         */
        "emptyStateHeadline"?: string;
        "layer"?: '01' | '02' | 'background';
        /**
          * @default false
         */
        "showLoader"?: boolean;
        /**
          * The menu item size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
          * @default 'md'
         */
        "size"?: 'lg' | 'md' | 'sm';
        "value"?: number | string;
    }
    /**
     * @name MenuDivider
     * @description A divider to separate menu items.
     * @category Layout
     * @subcategory Menu
     * @childComponents true
     * @example <zane-divider style="width: 12rem;">or</zane-divider>
     */
    interface ZaneMenuDivider {
    }
    /**
     * @name Menu Item
     * @description Menu items display a list of choices on temporary surfaces.
     * @category Navigation
     * @subcategory Menu
     * @childComponent true
     */
    interface ZaneMenuItem {
        /**
          * @default 'default'
         */
        "color"?: | 'black'
    | 'danger'
    | 'default'
    | 'primary'
    | 'secondary'
    | 'success'
    | 'warning'
    | 'white';
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Hyperlink to navigate to on click.
         */
        "href"?: string;
        "layer"?: '01' | '02' | 'background';
        /**
          * Emitted when the menu item is clicked.
         */
        "onZane-menu-item--click"?: (event: ZaneMenuItemCustomEvent<any>) => void;
        /**
          * @default false
         */
        "selectable"?: boolean;
        /**
          * Menu item selection state.
          * @default false
         */
        "selected"?: boolean;
        /**
          * Sets or retrieves the window or frame at which to target content.
          * @default '_self'
         */
        "target"?: string;
        /**
          * The menu item value.
         */
        "value"?: null | number | string;
    }
    /**
     * @name Modal
     * @description Modals are used to display content in a layer above the app.
     * @category Informational
     * @subcategory Modal
     * @tags controls
     * @img /assets/img/modal.webp
     * @imgDark /assets/img/modal-dark.webp
     */
    interface ZaneModal {
        "heading"?: string;
        /**
          * @default false
         */
        "hideClose"?: boolean;
        /**
          * Specify whether the Modal is managed by the parent component
          * @default false
         */
        "managed"?: boolean;
        /**
          * On click of button, a CustomEvent 'zane-modal--close' will be triggered.
         */
        "onZane-modal--close"?: (event: ZaneModalCustomEvent<any>) => void;
        /**
          * Specify whether the Modal is currently open
          * @default false
         */
        "open"?: boolean;
        /**
          * @default false
         */
        "showLoader"?: boolean;
        /**
          * @default 'md'
         */
        "size"?: 'lg' | 'md' | 'sm';
        "subheading"?: string;
    }
    /**
     * @name Modal Content
     * @description The Modal Content component is used to display the content within a modal.
     * @category Informational
     * @subcategory Modal
     * @childComponent true
     */
    interface ZaneModalContent {
        /**
          * @default 'default'
         */
        "type"?: 'borderless' | 'default' | 'text';
    }
    /**
     * @name Notification
     * @description Notifications are messages that communicate information to the user.
     * @category Informational
     * @tags notification
     * @example <zane-notification state="success">
     *      <div slot='title'>Successful saved the record</div>
     *    </zane-notification>
     */
    interface ZaneNotification {
        /**
          * Action to be displayed on the notification
         */
        "action"?: string;
        /**
          * Whether the notification is dismissible
          * @default false
         */
        "dismissible"?: boolean;
        /**
          * Whether to use high contrast mode
          * @default false
         */
        "highContrast"?: boolean;
        /**
          * Whether the notification should be displayed inline
          * @default false
         */
        "inline"?: boolean;
        /**
          * Whether the notification is managed by the notification manager
          * @default false
         */
        "managed"?: boolean;
        "onZane-notification--action-click"?: (event: ZaneNotificationCustomEvent<any>) => void;
        /**
          * Emitted when the notification is dismissed
         */
        "onZane-notification--dismiss"?: (event: ZaneNotificationCustomEvent<any>) => void;
        /**
          * The state of the notification. Possible values are: 'success', 'error', 'info', 'warning'
          * @default 'info'
         */
        "state"?: 'error' | 'info' | 'success' | 'warning';
    }
    /**
     * @name Notification Manager
     * @description The Notification Manager handles the organization and display of notifications within the application.
     * @category Informational
     * @tags notification
     * @img /assets/img/notification-manager.webp
     * @imgDark /assets/img/notification-manager-dark.webp
     */
    interface ZaneNotificationManager {
        /**
          * @default 'global'
         */
        "name"?: string;
        /**
          * @default 'bottom-right'
         */
        "position"?: | 'bottom-left'
    | 'bottom-right'
    | 'top-left'
    | 'top-right';
    }
    /**
     * @name Number
     * @description Number input lets users enter a numeric value and incrementally increase or decrease the value with a two-segment control.
     * @category Form Inputs
     * @tags input, form
     * @example <zane-number value="100"></zane-input>
     */
    interface ZaneNumber {
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
          * @default 'off'
         */
        "autocomplete"?: 'off' | 'on';
        /**
          * @default {}
         */
        "configAria"?: any;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `zaneChange` event after each keystroke.
          * @default 300
         */
        "debounce"?: number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled"?: boolean;
        "helperText"?: string;
        /**
          * @default false
         */
        "hideActions"?: boolean;
        /**
          * @default false
         */
        "inline"?: boolean;
        /**
          * @default false
         */
        "invalid"?: boolean;
        "invalidText"?: string;
        "label"?: string;
        /**
          * The input field name.
          * @default `zane-input-${this.gid}`
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onZane-number--blur"?: (event: ZaneNumberCustomEvent<any>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onZane-number--change"?: (event: ZaneNumberCustomEvent<any>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onZane-number--focus"?: (event: ZaneNumberCustomEvent<any>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onZane-number--input"?: (event: ZaneNumberCustomEvent<any>) => void;
        /**
          * The input field placeholder.
         */
        "placeholder"?: string;
        /**
          * If true, the user read the value cannot modify it. Defaults to `false`.
          * @default false
         */
        "readonly"?: boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
          * @default false
         */
        "required"?: boolean;
        /**
          * The input field size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
          * @default 'md'
         */
        "size"?: 'lg' | 'md' | 'sm';
        /**
          * @default false
         */
        "skeleton"?: boolean;
        /**
          * The input state. Possible values are: `"success"`, `"error"`, `"warning"`, 'default'. Defaults to `"default"`.
          * @default 'default'
         */
        "state"?: 'default' | 'error' | 'success' | 'warning';
        /**
          * The input field value.
          * @default null
         */
        "value"?: null | number;
        /**
          * @default false
         */
        "warn"?: boolean;
        "warnText"?: string;
    }
    /**
     * @name Popover
     * @description The Popover component is used to display additional information.
     * @category Informational
     * @subcategory Popover
     * @img /assets/img/dropdown.webp
     * @imgDark /assets/img/dropdown-dark.webp
     */
    interface ZanePopover {
        /**
          * Time in milliseconds to wait before hiding the popover when the trigger is set to `"hover"`.
          * @default 300
         */
        "dismissTimeout"?: number;
        /**
          * The offset of the popover relative to the trigger element. This value is used to adjust the position of the popover along the axis of the trigger element.
          * @default 4
         */
        "offset"?: number;
        /**
          * Emitted when the popover is closed.
         */
        "onZane-popover--close"?: (event: ZanePopoverCustomEvent<any>) => void;
        /**
          * Emitted when the popover is opened.
         */
        "onZane-popover--open"?: (event: ZanePopoverCustomEvent<any>) => void;
        /**
          * Determines whether the popover is open.
          * @default false
         */
        "open"?: boolean;
        /**
          * Time in milliseconds to wait before showing the popover when the trigger is set to `"hover"`.
          * @default 200
         */
        "openTimeout"?: number;
        /**
          * The placement of the popover relative to the trigger element. Possible values are: - `"top"`: The popover is placed above the trigger element. - `"top-start"`: The popover is placed above the trigger element, aligned to the start. - `"top-end"`: The popover is placed above the trigger element, aligned to the end. - `"right"`: The popover is placed to the right of the trigger element. - `"right-start"`: The popover is placed to the right of the trigger element, aligned to the start. - `"right-end"`: The popover is placed to the right of the trigger element, aligned to the end. - `"bottom"`: The popover is placed below the trigger element. - `"bottom-start"`: The popover is placed below the trigger element, aligned to the start. - `"bottom-end"`: The popover is placed below the trigger element, aligned to the end. - `"left"`: The popover is placed to the left of the trigger element. - `"left-start"`: The popover is placed to the left of the trigger element, aligned to the start. - `"left-end"`: The popover is placed to the left of the trigger element, aligned to the end.
         */
        "placements"?: string;
        /**
          * The tip of the popover. Possible values are: - `"caret"`: A triangle tip. - `"tab"`: A tab tip. - `"none"`: No tip.
          * @default 'caret'
         */
        "tip"?: 'caret' | 'none' | 'tab';
        /**
          * Determines how the popover is triggered. Possible values are: - `"click"`: The popover is shown or hidden when the trigger element is clicked. - `"hover"`: The popover is shown when the mouse hovers over the trigger element and hidden when it leaves. - `"manual"`: The visibility of the popover must be manually controlled through the `open` property.
          * @default 'hover'
         */
        "trigger"?: 'click' | 'hover' | 'manual';
    }
    /**
     * @name Popover Content
     * @description The PopoverContent component is used to display additional information.
     * @category Informational
     * @subcategory Popover
     * @childComponent true
     */
    interface ZanePopoverContent {
    }
    /**
     * @name Progress
     * @description Progress indicators express an unspecified wait time or display the length of a process.
     * @category Informational
     * @tags feedback, loading, progress, spinner
     * @example <zane-progress value="40" label="Progress" width="100%" helper-text="Optional helper text goes here..."></zane-progress>
     */
    interface ZaneProgress {
        "helperText"?: string;
        /**
          * @default false
         */
        "hideLabel"?: boolean;
        /**
          * A label describing the progress bar.
         */
        "label"?: string;
        /**
          * Possible values are: `"sm"` and `"md"` in pixel. Defaults to `"md"`.
          * @default 'md'
         */
        "size"?: 'md' | 'sm';
        /**
          * @default 'active'
         */
        "status"?: 'active' | 'error' | 'success';
        /**
          * @default null
         */
        "value"?: number;
    }
    /**
     * @name Select
     * @description Allows the user to select one or more options using a dropdown.
     * @category Form Inputs
     * @tags input, form
     * @img /assets/img/select.webp
     * @imgDark /assets/img/select-dark.webp
     */
    interface ZaneSelect {
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
          * @default false
         */
        "clearable"?: boolean;
        /**
          * @default {}
         */
        "configAria"?: any;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `zaneChange` event after each keystroke.
          * @default 300
         */
        "debounce"?: number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled"?: boolean;
        "helperText"?: string;
        /**
          * @default false
         */
        "hideDropdownIcon"?: boolean;
        /**
          * @default false
         */
        "inline"?: boolean;
        /**
          * @default false
         */
        "invalid"?: boolean;
        "invalidText"?: string;
        /**
          * [{   label: 'Zane Deng',   value: 'zane-deng',   icon: 'person' }]
          * @default []
         */
        "items"?: {
    icon?: string;
    label: number | string;
    value: number | string;
  }[];
        "label"?: string;
        "layer"?: '01' | '02' | 'background';
        /**
          * @default false
         */
        "multiple"?: boolean;
        /**
          * The input field name.
          * @default `zane-input-${this.gid}`
         */
        "name"?: string;
        /**
          * Emitted when the value has changed.
         */
        "onZane-select--change"?: (event: ZaneSelectCustomEvent<any>) => void;
        "onZane-select--enter"?: (event: ZaneSelectCustomEvent<any>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onZane-select--search"?: (event: ZaneSelectCustomEvent<any>) => void;
        /**
          * @default false
         */
        "open"?: boolean;
        /**
          * The input field placeholder.
         */
        "placeholder"?: string;
        /**
          * @default 'bottom-start,top-start,bottom-end,top-end'
         */
        "placements"?: string;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "readonly"?: boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
          * @default false
         */
        "required"?: boolean;
        /**
          * Search type Possible values are `"none"`, `"initial"`, `"contains"`, `"managed"`. Defaults to `"none"`.
          * @default 'none'
         */
        "search"?: 'contains' | 'initial' | 'managed' | 'none';
        /**
          * @default false
         */
        "showLoader"?: boolean;
        /**
          * The select input size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
          * @default 'md'
         */
        "size"?: 'lg' | 'md' | 'sm';
        /**
          * The input state. Possible values are: `"success"`, `"error"`, `"warning"`, 'default'. Defaults to `"default"`.
          * @default 'default'
         */
        "state"?: 'default' | 'error' | 'success' | 'warning';
        /**
          * The input field value.
          * @default ''
         */
        "value"?: number | string;
        /**
          * @default false
         */
        "warn"?: boolean;
        "warnText"?: string;
    }
    /**
     * @name1 Side Navigation
     * @description1 The side navigation component provides an easy way to navigate through your website / application.
     * @img1 /assets/img/sidenav.webp
     */
    interface ZaneSidenav {
        /**
          * @default false
         */
        "showLoader"?: boolean;
    }
    interface ZaneSidenavMenu {
        /**
          * @default false
         */
        "empty"?: boolean;
        /**
          * @default `{     "headline": "No items",     "description": "There are no items to display"   }`
         */
        "emptyState"?: any;
        /**
          * @default false
         */
        "showLoader"?: boolean;
        "value"?: number | string;
    }
    interface ZaneSidenavMenuItem {
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Emitted when the menu item is clicked.
         */
        "onZane:sidenav-menu-item-click"?: (event: ZaneSidenavMenuItemCustomEvent<any>) => void;
        /**
          * Menu item selection state.
          * @default false
         */
        "selected"?: boolean;
        /**
          * The menu item value.
         */
        "value"?: null | number | string;
    }
    /**
     * @name Slider
     * @description Sliders allow users to make selections from a range of values.
     * @category Form Inputs
     * @tags input, form
     * @img /assets/img/slider.webp
     * @imgDark /assets/img/slider-dark.webp
     */
    interface ZaneSlider {
        /**
          * @default {}
         */
        "configAria"?: any;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `zaneChange` event after each keystroke.
          * @default 300
         */
        "debounce"?: number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * function to format the value of the input
         */
        "formatter"?: (value: number | string) => string;
        /**
          * @default 100
         */
        "max"?: number;
        /**
          * @default 0
         */
        "min"?: number;
        /**
          * The input field name.
          * @default `zane-input-${this.gid}`
         */
        "name"?: string;
        /**
          * Emitted when the value has changed.
         */
        "onZane-slider--change"?: (event: ZaneSliderCustomEvent<any>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onZane-slider--input"?: (event: ZaneSliderCustomEvent<any>) => void;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "readonly"?: boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
          * @default false
         */
        "required"?: boolean;
        /**
          * @default false
         */
        "showOnlySlider"?: boolean;
        /**
          * @default 1
         */
        "step"?: number;
        /**
          * The input field value.
          * @default 0
         */
        "value"?: number;
    }
    /**
     * @name Spinner
     * @description Spinners provide a visual cue that an action is processing awaiting a course of change or a result.
     * @category Informational
     * @tags feedback, loading, progress, spinner
     * @example <zane-spinner class="rainbow" size="2rem"></zane-spinner>
     */
    interface ZaneSpinner {
        /**
          * @default 'Loading...'
         */
        "description"?: string;
        /**
          * @default false
         */
        "hideBackground"?: boolean;
        /**
          * The Icon size. Possible values are: `"sm"`, `"md"`, `"lg"` and size in pixel. Defaults to `"md"`.
          * @default 'md'
         */
        "size"?: 'lg' | 'md' | 'sm' | string;
    }
    /**
     * @name SVG
     * @description Render SVG content from an external source.
     * @category Data Display
     * @example <zane-svg src="https://icons.getbootstrap.com/assets/icons/bug.svg" size="2rem"></zane-svg>
     */
    interface ZaneSvg {
        /**
          * The Icon size.
         */
        "size"?: string;
        /**
          * @default ''
         */
        "src"?: string;
    }
    interface ZaneTab {
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default ''
         */
        "disabledReason"?: string;
        /**
          * Hyperlink to navigate to on click.
         */
        "href"?: string;
        /**
          * Icon which will displayed on button. Possible values are bootstrap icon names.
         */
        "icon"?: string;
        "label"?: string;
        /**
          * On click of tab, a CustomEvent 'zane-tab-click' will be triggered.
         */
        "onZane-tab--click"?: (event: ZaneTabCustomEvent<any>) => void;
        /**
          * Button selection state.
          * @default false
         */
        "selected"?: boolean;
        /**
          * Show loader.
          * @default false
         */
        "showLoader"?: boolean;
        "target"?: string;
        /**
          * @default 'default'
         */
        "type"?: 'contained' | 'contained-bottom' | 'default';
        "value"?: string;
    }
    interface ZaneTabPanel {
        /**
          * @default false
         */
        "active"?: boolean;
        "layer"?: '01' | '02' | 'background';
        "value"?: string;
    }
    /**
     * @name Table
     * @description A configurable component for displaying tabular data.
     * @category Data Display
     * @img /assets/img/table.webp
     * @imgDark /assets/img/table-dark.webp
     */
    interface ZaneTable {
        /**
          * Grid columns configuration. [ {   "name":"name",   "label":"Name",   "width":300,   "fixed":true,   "template": function(row, column) { return row[column.name];}  }, {   "name":"age",   "label":"Age" } ]
          * @default []
         */
        "columns"?: any[];
        /**
          * Grid data to display on table [{  'id': '5e7118ddce4b3d577956457f',  'age': 21,  'name': 'John',  'company': 'India',  'email': 'john@example.com',  'phone': '+1 (839) 560-3581',  'address': '326 Irving Street, Grimsley, Texas, 4048'  }]
          * @default []
         */
        "data"?: any[];
        /**
          * @default 'There are no items to display'
         */
        "emptyStateDescription"?: string;
        /**
          * @default 'No items'
         */
        "emptyStateHeadline"?: string;
        /**
          * @default 'id'
         */
        "keyField"?: string;
        "layer"?: '01' | '02' | 'background';
        /**
          * @default false
         */
        "managed"?: boolean;
        /**
          * Emitted when a table cell is clicked.
         */
        "onZane-table--cell-click"?: (event: ZaneTableCustomEvent<any>) => void;
        /**
          * Emitted when the page changes.
         */
        "onZane-table--page"?: (event: ZaneTableCustomEvent<any>) => void;
        /**
          * Emitted when the selection changes.
         */
        "onZane-table--selection-change"?: (event: ZaneTableCustomEvent<any>) => void;
        /**
          * Emitted when the table is sorted.
         */
        "onZane-table--sort"?: (event: ZaneTableCustomEvent<any>) => void;
        /**
          * @default 1
         */
        "page"?: number;
        /**
          * @default 10
         */
        "pageSize"?: number;
        /**
          * @default true
         */
        "paginate"?: boolean;
        /**
          * @default []
         */
        "selectedRowKeys"?: string[];
        "selectionType"?: 'checkbox' | undefined;
        "sortBy"?: string;
        /**
          * @default 'asc'
         */
        "sortOrder"?: 'asc' | 'desc';
        /**
          * @default true
         */
        "sortable"?: boolean;
        "totalItems"?: any;
    }
    /**
     * @name Tabs
     * @description The tabs component is used to display multiple panels of content in a container.
     * @category Navigation
     * @tags navigation
     * @example <zane-tabs>
     * <zane-tabs-list>
     * <zane-tab selected >Tab 1</zane-tab>
     * <zane-tab>Tab 2</zane-tab>
     * </zane-tabs-list>
     * </zane-tabs>
     */
    interface ZaneTabs {
        "layer"?: '01' | '02' | 'background';
        /**
          * @default 'default'
         */
        "type"?: 'contained' | 'contained-bottom' | 'default';
    }
    interface ZaneTabsList {
        /**
          * @default false
         */
        "managed"?: boolean;
        /**
          * @default 'default'
         */
        "type"?: 'contained' | 'contained-bottom' | 'default';
    }
    /**
     * @name Tag
     * @description Use tags to label, categorize, or organize items using keywords that describe them.
     * @category Data Display
     * @tag controls
     * @example <zane-tag class="color-red">Important</zane-tag>
     */
    interface ZaneTag {
        /**
          * Tag color. Possible values are: 'gray', 'blue', 'green', 'red', 'yellow', 'primary', 'success', 'info', 'warning', 'error'.
          * @default 'gray'
         */
        "color"?: | 'blue'
    | 'error'
    | 'gray'
    | 'green'
    | 'info'
    | 'primary'
    | 'red'
    | 'success'
    | 'warning'
    | 'yellow';
        /**
          * If true, the tag will have a close icon.
          * @default false
         */
        "dismissible"?: boolean;
        /**
          * Image source.
         */
        "imageSrc"?: string;
        /**
          * Emitted when the tag is clicked.
         */
        "onZane-tag--click"?: (event: ZaneTagCustomEvent<any>) => void;
        /**
          * Emitted when the close icon is clicked.
         */
        "onZane-tag--dismiss"?: (event: ZaneTagCustomEvent<any>) => void;
        /**
          * If true, the tag will be selected.
          * @default false
         */
        "selected"?: boolean;
        /**
          * Text size.
          * @default 'md'
         */
        "size"?: 'md' | 'sm';
        /**
          * Tag value.
          * @default ''
         */
        "value"?: string;
    }
    /**
     * @name Text
     * @description Typography are used for rendering headlines, paragraphs and captions.
     * @category General
     * @example <zane-text type="heading" level="1">Heading</zane-typography>
     */
    interface ZaneText {
        /**
          * @default 'primary'
         */
        "color"?: | 'error'
    | 'helper'
    | 'inverse'
    | 'on-color'
    | 'primary'
    | 'secondary'
    | 'tertiary';
        /**
          * @default {}
         */
        "configAria"?: any;
        /**
          * @default false
         */
        "expressive"?: boolean;
        "headingLevel"?: 1 | 2 | 3 | 4 | 5 | 6;
        "headingSize"?: 1 | 2 | 3 | 4 | 5 | 6 | 7;
        /**
          * @default false
         */
        "inline"?: boolean;
        /**
          * @default 'body'
         */
        "type"?: | 'body'
    | 'body-compact'
    | 'code'
    | 'fluid-heading'
    | 'heading'
    | 'heading-compact'
    | 'helper-text'
    | 'label'
    | 'legal';
    }
    /**
     * @name Textarea
     * @description Enables native inputs to be used within a Form field.
     * @category Form Inputs
     * @tags input, form
     * @example <zane-textarea placeholder="Enter some description over here"></zane-textarea>
     */
    interface ZaneTextarea {
        /**
          * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.
          * @default false
         */
        "clearable"?: boolean;
        /**
          * @default {}
         */
        "configAria"?: any;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `zane:change` event after each keystroke.
          * @default 300
         */
        "debounce"?: number;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled"?: boolean;
        "helperText"?: string;
        /**
          * @default false
         */
        "inline"?: boolean;
        /**
          * @default false
         */
        "invalid"?: boolean;
        "invalidText"?: string;
        "label"?: string;
        /**
          * The input field name.
          * @default `zane-input-${this.gid}`
         */
        "name"?: string;
        /**
          * Emitted when the action button is clicked.
         */
        "onZane-textarea--action-click"?: (event: ZaneTextareaCustomEvent<any>) => void;
        /**
          * Emitted when the input loses focus.
         */
        "onZane-textarea--blur"?: (event: ZaneTextareaCustomEvent<any>) => void;
        /**
          * Emitted when the value has changed..
         */
        "onZane-textarea--change"?: (event: ZaneTextareaCustomEvent<any>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onZane-textarea--focus"?: (event: ZaneTextareaCustomEvent<any>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onZane-textarea--input"?: (event: ZaneTextareaCustomEvent<any>) => void;
        /**
          * The input field placeholder.
         */
        "placeholder"?: string;
        /**
          * If true, the user read the value cannot modify it. Defaults to `false`.
          * @default false
         */
        "readonly"?: boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
          * @default false
         */
        "required"?: boolean;
        /**
          * The input field size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
          * @default 'md'
         */
        "size"?: 'lg' | 'md' | 'sm';
        /**
          * @default false
         */
        "skeleton"?: boolean;
        /**
          * The input state. Possible values are: `"success"`, `"error"`, `"warning"`, 'default'. Defaults to `"default"`.
          * @default 'default'
         */
        "state"?: 'default' | 'error' | 'success' | 'warning';
        /**
          * The input field value.
         */
        "value"?: string;
        /**
          * @default false
         */
        "warn"?: boolean;
        "warnText"?: string;
    }
    /**
     * @name Time Picker
     * @description Captures time input.
     * @category Form Inputs
     * @tags input, form
     * @example <zane-time-picker value='true'></zane-time-picker>
     */
    interface ZaneTimePicker {
        /**
          * @default {}
         */
        "configAria"?: any;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default false
         */
        "inline"?: boolean;
        /**
          * The input field name.
          * @default `zane-input-${this.gid}`
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onZane-time-picker--blur"?: (event: ZaneTimePickerCustomEvent<any>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onZane-time-picker--change"?: (event: ZaneTimePickerCustomEvent<any>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onZane-time-picker--focus"?: (event: ZaneTimePickerCustomEvent<any>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onZane-time-picker--input"?: (event: ZaneTimePickerCustomEvent<any>) => void;
        /**
          * The input field placeholder.
         */
        "placeholder"?: string;
        /**
          * If true, the user read the value cannot modify it. Defaults to `false`.
          * @default false
         */
        "readonly"?: boolean;
        /**
          * The input field size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
          * @default 'md'
         */
        "size"?: 'lg' | 'md' | 'sm';
        /**
          * The input field value.
          * @default ''
         */
        "value"?: null | number | string;
    }
    /**
     * @name Toggle
     * @description Captures boolean input with an optional indeterminate mode.
     * @category Form Inputs
     * @tags input, form
     * @example <zane-toggle value='true'>Want ice cream?</zane-toggle>
     */
    interface ZaneToggle {
        /**
          * @default {}
         */
        "configAria"?: any;
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * The checkbox label.
         */
        "label"?: string;
        /**
          * The input field name.
          * @default `zane-input-${this.gid}`
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onZane-toggle--blur"?: (event: ZaneToggleCustomEvent<any>) => void;
        /**
          * On change of input a CustomEvent 'zane-change' will be triggered. Event details contains parent event, oldValue, newValue of input.
         */
        "onZane-toggle--change"?: (event: ZaneToggleCustomEvent<any>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onZane-toggle--focus"?: (event: ZaneToggleCustomEvent<any>) => void;
        /**
          * @default false
         */
        "readonly"?: boolean;
        /**
          * If true, required icon is show. Defaults to `false`.
          * @default false
         */
        "required"?: boolean;
        /**
          * @default true
         */
        "rounded"?: boolean;
        /**
          * The button size. Possible values are: `"sm"`, `"md"`, `"lg"`. Defaults to `"md"`.
          * @default 'md'
         */
        "size"?: 'lg' | 'md';
        /**
          * The input field value.
          * @default false
         */
        "value"?: boolean;
    }
    /**
     * @name Tooltip
     * @description The Tooltip component is used to display additional information on hover.
     * @category Informational
     * @tag content
     * @img /assets/img/tooltip.webp
     * @imgDark /assets/img/tooltip-dark.webp
     */
    interface ZaneTooltip {
        /**
          * The content of the tooltip.
          * @default ''
         */
        "content"?: string;
        /**
          * The placement of the popover relative to the trigger element. Possible values are: - `"top"`: The popover is placed above the trigger element. - `"right"`: The popover is placed to the right of the trigger element. - `"bottom"`: The popover is placed below the trigger element. - `"left"`: The popover is placed to the left of the trigger element.
          * @default 'top,bottom,right,left'
         */
        "placements"?: string;
        /**
          * If true, the tooltip will be managed by the parent component.
          * @default 'hover'
         */
        "trigger"?: 'hover' | 'manual';
    }
    /**
     * @name Tree
     * @description A tree view is a hierarchical structure that provides nested levels of navigation.
     * @category Navigation
     * @subcategory Tree View
     * @img /assets/img/tree-view.webp
     * @imgDark /assets/img/tree-view-dark.webp
     */
    interface ZaneTree {
        /**
          * @default false
         */
        "empty"?: boolean;
        /**
          * @default `{     "headline": "No items",     "description": "There are no items to display"   }`
         */
        "emptyState"?: string;
        "selectedNode"?: string;
    }
    /**
     * @name TreeNode
     * @description A tree node is a hierarchical structure that provides nested levels of navigation.
     * @category Navigation
     * @subcategory Tree View
     * @childComponent true
     * @img /assets/img/tree-view.webp
     * @imgDark /assets/img/tree-view-dark.webp
     */
    interface ZaneTreeNode {
        /**
          * If true, the user cannot interact with the button. Defaults to `false`.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default true
         */
        "expanded"?: boolean;
        /**
          * Hyperlink to navigate to on click.
         */
        "href"?: string;
        /**
          * Icon which will displayed on button. Possible values are icon names.
         */
        "icon"?: string;
        /**
          * @default ''
         */
        "label"?: string;
        /**
          * @default 0
         */
        "level"?: number;
        /**
          * Emitted when the menu item is clicked.
         */
        "onZane-tree-node--click"?: (event: ZaneTreeNodeCustomEvent<any>) => void;
        /**
          * Menu item selection state.
         */
        "selectedNode"?: string;
        /**
          * Sets or retrieves the window or frame at which to target content.
          * @default '_self'
         */
        "target"?: string;
        /**
          * The menu item value.
         */
        "value"?: null | number | string;
    }
    interface IntrinsicElements {
        "zane-accordion": ZaneAccordion;
        "zane-accordion-item": ZaneAccordionItem;
        "zane-avatar": ZaneAvatar;
        "zane-badge": ZaneBadge;
        "zane-breadcrumb": ZaneBreadcrumb;
        "zane-breadcrumb-item": ZaneBreadcrumbItem;
        "zane-button": ZaneButton;
        "zane-button-group": ZaneButtonGroup;
        "zane-card": ZaneCard;
        "zane-checkbox": ZaneCheckbox;
        "zane-code-editor": ZaneCodeEditor;
        "zane-code-highlighter": ZaneCodeHighlighter;
        "zane-container": ZaneContainer;
        "zane-current-time": ZaneCurrentTime;
        "zane-date-picker": ZaneDatePicker;
        "zane-divider": ZaneDivider;
        "zane-dropdown": ZaneDropdown;
        "zane-dropdown-menu": ZaneDropdownMenu;
        "zane-empty-state": ZaneEmptyState;
        "zane-footer": ZaneFooter;
        "zane-footer-copyright": ZaneFooterCopyright;
        "zane-footer-links": ZaneFooterLinks;
        "zane-form-control": ZaneFormControl;
        "zane-header": ZaneHeader;
        "zane-header-action": ZaneHeaderAction;
        "zane-header-brand": ZaneHeaderBrand;
        "zane-html-editor": ZaneHtmlEditor;
        "zane-icon": ZaneIcon;
        "zane-image": ZaneImage;
        "zane-input": ZaneInput;
        "zane-input-url": ZaneInputUrl;
        "zane-link": ZaneLink;
        "zane-menu": ZaneMenu;
        "zane-menu-divider": ZaneMenuDivider;
        "zane-menu-item": ZaneMenuItem;
        "zane-modal": ZaneModal;
        "zane-modal-content": ZaneModalContent;
        "zane-notification": ZaneNotification;
        "zane-notification-manager": ZaneNotificationManager;
        "zane-number": ZaneNumber;
        "zane-popover": ZanePopover;
        "zane-popover-content": ZanePopoverContent;
        "zane-progress": ZaneProgress;
        "zane-select": ZaneSelect;
        "zane-sidenav": ZaneSidenav;
        "zane-sidenav-menu": ZaneSidenavMenu;
        "zane-sidenav-menu-item": ZaneSidenavMenuItem;
        "zane-slider": ZaneSlider;
        "zane-spinner": ZaneSpinner;
        "zane-svg": ZaneSvg;
        "zane-tab": ZaneTab;
        "zane-tab-panel": ZaneTabPanel;
        "zane-table": ZaneTable;
        "zane-tabs": ZaneTabs;
        "zane-tabs-list": ZaneTabsList;
        "zane-tag": ZaneTag;
        "zane-text": ZaneText;
        "zane-textarea": ZaneTextarea;
        "zane-time-picker": ZaneTimePicker;
        "zane-toggle": ZaneToggle;
        "zane-tooltip": ZaneTooltip;
        "zane-tree": ZaneTree;
        "zane-tree-node": ZaneTreeNode;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * @name Accordion
             * @description An accordion is a vertically stacked list of headers that reveal or hide associated sections of content.
             * @overview  <p>The accordion component delivers large amounts of content in a small space through progressive disclosure. The header title give the user a high level overview of the content allowing the user to decide which sections to read.</p>
             *  <p>Accordions can make information processing and discovering more effective. However, it does hide content from users and it’s important to account for a user not noticing or reading all of the included content. If a user is likely to read all of the content then don’t use an accordion as it adds the burden of an extra click; instead use a full scrolling page with normal headers.</p>
             * @category Data Display
             * @subcategory Accordion
             * @tags display
             * @img /assets/img/accordion.webp
             * @imgDark /assets/img/accordion-dark.webp
             */
            "zane-accordion": LocalJSX.ZaneAccordion & JSXBase.HTMLAttributes<HTMLZaneAccordionElement>;
            /**
             * @name Accordion Item
             * @description An accordion item is single item in an accordion list. It contains a header and a content section that can be expanded or collapsed by the user.
             * @overview  <p>The accordion item component is a single item in an accordion list. It contains a header and a content section that can be expanded or collapsed by the user. The accordion item can be used in conjunction with the accordion component to create a list of expandable items.</p>
             * @category Data Display
             * @subcategory Accordion
             * @childComponent true
             */
            "zane-accordion-item": LocalJSX.ZaneAccordionItem & JSXBase.HTMLAttributes<HTMLZaneAccordionItemElement>;
            /**
             * @name Avatar
             * @description The Avatar component is used to represent user, and displays the profile picture, initials or fallback icon.
             * @category Data Display
             * @tags display
             * @example <zane-avatar size="5rem" name="Shivaji Varma" src="/assets/img/avatar.webp"></zane-avatar>
             */
            "zane-avatar": LocalJSX.ZaneAvatar & JSXBase.HTMLAttributes<HTMLZaneAvatarElement>;
            /**
             * @name Badge
             * @description The badge component is used to display a small amount of information to the user.
             * @category Informational
             * @tag content
             * @example <zane-badge content="5"> <zane-icon name="notification" size="2rem"></zane-icon></zane-badge>
             */
            "zane-badge": LocalJSX.ZaneBadge & JSXBase.HTMLAttributes<HTMLZaneBadgeElement>;
            /**
             * @name Breadcrumb
             * @description A breadcrumb is a secondary navigation scheme that reveals the user's location in a website or web application.
             * @category Navigation
             * @tags navigation
             * @example <zane-breadcrumb><zane-breadcrumb-item href="#">Home</zane-breadcrumb-item><zane-breadcrumb-item href="#" active>Page</zane-breadcrumb-item></zane-breadcrumb>
             */
            "zane-breadcrumb": LocalJSX.ZaneBreadcrumb & JSXBase.HTMLAttributes<HTMLZaneBreadcrumbElement>;
            "zane-breadcrumb-item": LocalJSX.ZaneBreadcrumbItem & JSXBase.HTMLAttributes<HTMLZaneBreadcrumbItemElement>;
            /**
             * @name Button
             * @description Buttons are used to initialize an action. Button labels express what action will occur when the user interacts with it.
             * @overview  <p>Buttons are clickable elements that are used to trigger actions. They communicate calls to action to the user and allow users to interact with pages in a variety of ways. Button labels express what action will occur when the user interacts with it.</p>
             * @category General
             * @tags controls
             * @example <zane-button>
             * Button CTA
             * </zane-button>
             */
            "zane-button": LocalJSX.ZaneButton & JSXBase.HTMLAttributes<HTMLZaneButtonElement>;
            /**
             * @name Button Group
             * @description Group a series of buttons together on a single line with the button group, and super-power.
             * @category General
             * @tags controls
             * @example <zane-button-group>
             * <zane-button block icon="home"></zane-button>
             * <zane-button block icon="alarm"></zane-button>
             * </zane-button-group>
             */
            "zane-button-group": LocalJSX.ZaneButtonGroup & JSXBase.HTMLAttributes<HTMLZaneButtonGroupElement>;
            "zane-card": LocalJSX.ZaneCard & JSXBase.HTMLAttributes<HTMLZaneCardElement>;
            /**
             * @name Checkbox
             * @description Captures boolean input with an optional indeterminate mode.
             * @category Form Inputs
             * @tags input, form
             * @example <zane-checkbox value='true'>Want ice cream?</zane-checkbox>
             */
            "zane-checkbox": LocalJSX.ZaneCheckbox & JSXBase.HTMLAttributes<HTMLZaneCheckboxElement>;
            /**
             * @name Code Editor
             * @description A browser based code editor.
             * @category Form Inputs
             * @tags input, form
             * @img /assets/img/code-editor.webp
             * @imgDark /assets/img/code-editor-dark.webp
             */
            "zane-code-editor": LocalJSX.ZaneCodeEditor & JSXBase.HTMLAttributes<HTMLZaneCodeEditorElement>;
            /**
             * @name Code Highlighter
             * @description A browser based code highlighter.
             * @category Data Display
             * @tag display, code
             * @img /assets/img/code-highlighter.webp
             * @imgDark /assets/img/code-highlighter-dark.webp
             */
            "zane-code-highlighter": LocalJSX.ZaneCodeHighlighter & JSXBase.HTMLAttributes<HTMLZaneCodeHighlighterElement>;
            "zane-container": LocalJSX.ZaneContainer & JSXBase.HTMLAttributes<HTMLZaneContainerElement>;
            /**
             * @name Current Time
             * @description Displays the current time in a given timezone.
             * @category Others
             * @example <zane-current-time></zane-current-time>
             */
            "zane-current-time": LocalJSX.ZaneCurrentTime & JSXBase.HTMLAttributes<HTMLZaneCurrentTimeElement>;
            /**
             * @name Date Picker
             * @category Form Inputs
             * @description Captures date input.
             * @example <zane-date-picker value='true'></zane-date-picker>
             */
            "zane-date-picker": LocalJSX.ZaneDatePicker & JSXBase.HTMLAttributes<HTMLZaneDatePickerElement>;
            /**
             * @name Divider
             * @description A divider can be used to segment content vertically or horizontally.
             * @category Layout
             * @example <zane-divider style="width: 12rem;">or</zane-divider>
             */
            "zane-divider": LocalJSX.ZaneDivider & JSXBase.HTMLAttributes<HTMLZaneDividerElement>;
            /**
             * @name Dropdown
             * @description Enables native inputs to be used within a Form field.
             * @category Navigation
             * @subcategory Dropdown
             * @img /assets/img/dropdown.webp
             * @imgDark /assets/img/dropdown-dark.webp
             */
            "zane-dropdown": LocalJSX.ZaneDropdown & JSXBase.HTMLAttributes<HTMLZaneDropdownElement>;
            /**
             * @name Dropdown Menu
             * @description The Dropdown Menu component is used to display a list of options.
             * @category Navigation
             * @subcategory Dropdown
             * @childComponent true
             */
            "zane-dropdown-menu": LocalJSX.ZaneDropdownMenu & JSXBase.HTMLAttributes<HTMLZaneDropdownMenuElement>;
            /**
             * @name Empty State
             * @description A message that displays when there is no information to display.
             * @category Data Display
             * @img /assets/img/empty-state.webp
             * @imgDark /assets/img/empty-state-dark.webp
             */
            "zane-empty-state": LocalJSX.ZaneEmptyState & JSXBase.HTMLAttributes<HTMLZaneEmptyStateElement>;
            /**
             * @name Footer
             * @description The footer component provides a container for displaying additional navigation information about a site.
             * @overview <p>The footer is one of the most underestimated sections of a website being located at the very bottom of every page, however, it can be used as a way to try to convince users to stay on your website if they haven’t found the information they’ve been looking for inside the main content area.</p>
             * @category Navigation
             * @img /assets/img/footer.webp
             * @imgDark /assets/img/footer-dark.webp
             */
            "zane-footer": LocalJSX.ZaneFooter & JSXBase.HTMLAttributes<HTMLZaneFooterElement>;
            "zane-footer-copyright": LocalJSX.ZaneFooterCopyright & JSXBase.HTMLAttributes<HTMLZaneFooterCopyrightElement>;
            "zane-footer-links": LocalJSX.ZaneFooterLinks & JSXBase.HTMLAttributes<HTMLZaneFooterLinksElement>;
            /**
             * @name Form Control
             * @description The Form Control component adds a label and caption for its child control.
             * @category Form Inputs
             * @tags form
             * @example <zane-form-control label='Full Name' required>
             * <zane-input type='text'></zane-input>
             * </zane-form-control>
             */
            "zane-form-control": LocalJSX.ZaneFormControl & JSXBase.HTMLAttributes<HTMLZaneFormControlElement>;
            /**
             * @name Header
             * @description Header component is used to display a header with a brand, navigation, and actions.
             * @category Navigation
             * @img /assets/img/header.webp
             * @imgDark /assets/img/header-dark.webp
             */
            "zane-header": LocalJSX.ZaneHeader & JSXBase.HTMLAttributes<HTMLZaneHeaderElement>;
            "zane-header-action": LocalJSX.ZaneHeaderAction & JSXBase.HTMLAttributes<HTMLZaneHeaderActionElement>;
            "zane-header-brand": LocalJSX.ZaneHeaderBrand & JSXBase.HTMLAttributes<HTMLZaneHeaderBrandElement>;
            /**
             * @name HTML Editor
             * @description HTML Editor component is a WYSIWYG editor that allows users to edit HTML content.
             * @category Up coming
             * @tags input, form
             * @img /assets/img/html-editor.webp
             * @imgDark /assets/img/html-editor-dark.webp
             */
            "zane-html-editor": LocalJSX.ZaneHtmlEditor & JSXBase.HTMLAttributes<HTMLZaneHtmlEditorElement>;
            /**
             * @name Icon
             * @description Icons are visual symbols used to represent ideas, objects, or actions.
             * @overview Icons are visual symbols used to represent ideas, objects, or actions. They communicate messages at a glance, afford interactivity, and draw attention to important information.
             * @category General
             * @example <zane-icon name="home" size="2rem"></zane-icon>
             */
            "zane-icon": LocalJSX.ZaneIcon & JSXBase.HTMLAttributes<HTMLZaneIconElement>;
            "zane-image": LocalJSX.ZaneImage & JSXBase.HTMLAttributes<HTMLZaneImageElement>;
            /**
             * @name Input
             * @description Enables native inputs to be used within a Form field.
             * @category Form Inputs
             * @tags input, form
             * @example <zane-input placeholder="Enter your name"></zane-input>
             */
            "zane-input": LocalJSX.ZaneInput & JSXBase.HTMLAttributes<HTMLZaneInputElement>;
            /**
             * @name Input URL
             * @description A specialized input field for URL validation.
             * @category Up coming
             * @tags input, form, url
             * @example <zane-input-url value="https://shivajivarma.com"></zane-input-url>
             */
            "zane-input-url": LocalJSX.ZaneInputUrl & JSXBase.HTMLAttributes<HTMLZaneInputUrlElement>;
            /**
             * @name Link
             * @description Links allow users to click their way from page to page.
             * @category Navigation
             * @example <zane-link href="#">Link</zane-link>
             */
            "zane-link": LocalJSX.ZaneLink & JSXBase.HTMLAttributes<HTMLZaneLinkElement>;
            /**
             * @name Menu
             * @description Menus display a list of choices on temporary surfaces.
             * @category Navigation
             * @subcategory Menu
             * @img /assets/img/menu.webp
             * @imgDark /assets/img/menu-dark.webp
             */
            "zane-menu": LocalJSX.ZaneMenu & JSXBase.HTMLAttributes<HTMLZaneMenuElement>;
            /**
             * @name MenuDivider
             * @description A divider to separate menu items.
             * @category Layout
             * @subcategory Menu
             * @childComponents true
             * @example <zane-divider style="width: 12rem;">or</zane-divider>
             */
            "zane-menu-divider": LocalJSX.ZaneMenuDivider & JSXBase.HTMLAttributes<HTMLZaneMenuDividerElement>;
            /**
             * @name Menu Item
             * @description Menu items display a list of choices on temporary surfaces.
             * @category Navigation
             * @subcategory Menu
             * @childComponent true
             */
            "zane-menu-item": LocalJSX.ZaneMenuItem & JSXBase.HTMLAttributes<HTMLZaneMenuItemElement>;
            /**
             * @name Modal
             * @description Modals are used to display content in a layer above the app.
             * @category Informational
             * @subcategory Modal
             * @tags controls
             * @img /assets/img/modal.webp
             * @imgDark /assets/img/modal-dark.webp
             */
            "zane-modal": LocalJSX.ZaneModal & JSXBase.HTMLAttributes<HTMLZaneModalElement>;
            /**
             * @name Modal Content
             * @description The Modal Content component is used to display the content within a modal.
             * @category Informational
             * @subcategory Modal
             * @childComponent true
             */
            "zane-modal-content": LocalJSX.ZaneModalContent & JSXBase.HTMLAttributes<HTMLZaneModalContentElement>;
            /**
             * @name Notification
             * @description Notifications are messages that communicate information to the user.
             * @category Informational
             * @tags notification
             * @example <zane-notification state="success">
             *      <div slot='title'>Successful saved the record</div>
             *    </zane-notification>
             */
            "zane-notification": LocalJSX.ZaneNotification & JSXBase.HTMLAttributes<HTMLZaneNotificationElement>;
            /**
             * @name Notification Manager
             * @description The Notification Manager handles the organization and display of notifications within the application.
             * @category Informational
             * @tags notification
             * @img /assets/img/notification-manager.webp
             * @imgDark /assets/img/notification-manager-dark.webp
             */
            "zane-notification-manager": LocalJSX.ZaneNotificationManager & JSXBase.HTMLAttributes<HTMLZaneNotificationManagerElement>;
            /**
             * @name Number
             * @description Number input lets users enter a numeric value and incrementally increase or decrease the value with a two-segment control.
             * @category Form Inputs
             * @tags input, form
             * @example <zane-number value="100"></zane-input>
             */
            "zane-number": LocalJSX.ZaneNumber & JSXBase.HTMLAttributes<HTMLZaneNumberElement>;
            /**
             * @name Popover
             * @description The Popover component is used to display additional information.
             * @category Informational
             * @subcategory Popover
             * @img /assets/img/dropdown.webp
             * @imgDark /assets/img/dropdown-dark.webp
             */
            "zane-popover": LocalJSX.ZanePopover & JSXBase.HTMLAttributes<HTMLZanePopoverElement>;
            /**
             * @name Popover Content
             * @description The PopoverContent component is used to display additional information.
             * @category Informational
             * @subcategory Popover
             * @childComponent true
             */
            "zane-popover-content": LocalJSX.ZanePopoverContent & JSXBase.HTMLAttributes<HTMLZanePopoverContentElement>;
            /**
             * @name Progress
             * @description Progress indicators express an unspecified wait time or display the length of a process.
             * @category Informational
             * @tags feedback, loading, progress, spinner
             * @example <zane-progress value="40" label="Progress" width="100%" helper-text="Optional helper text goes here..."></zane-progress>
             */
            "zane-progress": LocalJSX.ZaneProgress & JSXBase.HTMLAttributes<HTMLZaneProgressElement>;
            /**
             * @name Select
             * @description Allows the user to select one or more options using a dropdown.
             * @category Form Inputs
             * @tags input, form
             * @img /assets/img/select.webp
             * @imgDark /assets/img/select-dark.webp
             */
            "zane-select": LocalJSX.ZaneSelect & JSXBase.HTMLAttributes<HTMLZaneSelectElement>;
            /**
             * @name1 Side Navigation
             * @description1 The side navigation component provides an easy way to navigate through your website / application.
             * @img1 /assets/img/sidenav.webp
             */
            "zane-sidenav": LocalJSX.ZaneSidenav & JSXBase.HTMLAttributes<HTMLZaneSidenavElement>;
            "zane-sidenav-menu": LocalJSX.ZaneSidenavMenu & JSXBase.HTMLAttributes<HTMLZaneSidenavMenuElement>;
            "zane-sidenav-menu-item": LocalJSX.ZaneSidenavMenuItem & JSXBase.HTMLAttributes<HTMLZaneSidenavMenuItemElement>;
            /**
             * @name Slider
             * @description Sliders allow users to make selections from a range of values.
             * @category Form Inputs
             * @tags input, form
             * @img /assets/img/slider.webp
             * @imgDark /assets/img/slider-dark.webp
             */
            "zane-slider": LocalJSX.ZaneSlider & JSXBase.HTMLAttributes<HTMLZaneSliderElement>;
            /**
             * @name Spinner
             * @description Spinners provide a visual cue that an action is processing awaiting a course of change or a result.
             * @category Informational
             * @tags feedback, loading, progress, spinner
             * @example <zane-spinner class="rainbow" size="2rem"></zane-spinner>
             */
            "zane-spinner": LocalJSX.ZaneSpinner & JSXBase.HTMLAttributes<HTMLZaneSpinnerElement>;
            /**
             * @name SVG
             * @description Render SVG content from an external source.
             * @category Data Display
             * @example <zane-svg src="https://icons.getbootstrap.com/assets/icons/bug.svg" size="2rem"></zane-svg>
             */
            "zane-svg": LocalJSX.ZaneSvg & JSXBase.HTMLAttributes<HTMLZaneSvgElement>;
            "zane-tab": LocalJSX.ZaneTab & JSXBase.HTMLAttributes<HTMLZaneTabElement>;
            "zane-tab-panel": LocalJSX.ZaneTabPanel & JSXBase.HTMLAttributes<HTMLZaneTabPanelElement>;
            /**
             * @name Table
             * @description A configurable component for displaying tabular data.
             * @category Data Display
             * @img /assets/img/table.webp
             * @imgDark /assets/img/table-dark.webp
             */
            "zane-table": LocalJSX.ZaneTable & JSXBase.HTMLAttributes<HTMLZaneTableElement>;
            /**
             * @name Tabs
             * @description The tabs component is used to display multiple panels of content in a container.
             * @category Navigation
             * @tags navigation
             * @example <zane-tabs>
             * <zane-tabs-list>
             * <zane-tab selected >Tab 1</zane-tab>
             * <zane-tab>Tab 2</zane-tab>
             * </zane-tabs-list>
             * </zane-tabs>
             */
            "zane-tabs": LocalJSX.ZaneTabs & JSXBase.HTMLAttributes<HTMLZaneTabsElement>;
            "zane-tabs-list": LocalJSX.ZaneTabsList & JSXBase.HTMLAttributes<HTMLZaneTabsListElement>;
            /**
             * @name Tag
             * @description Use tags to label, categorize, or organize items using keywords that describe them.
             * @category Data Display
             * @tag controls
             * @example <zane-tag class="color-red">Important</zane-tag>
             */
            "zane-tag": LocalJSX.ZaneTag & JSXBase.HTMLAttributes<HTMLZaneTagElement>;
            /**
             * @name Text
             * @description Typography are used for rendering headlines, paragraphs and captions.
             * @category General
             * @example <zane-text type="heading" level="1">Heading</zane-typography>
             */
            "zane-text": LocalJSX.ZaneText & JSXBase.HTMLAttributes<HTMLZaneTextElement>;
            /**
             * @name Textarea
             * @description Enables native inputs to be used within a Form field.
             * @category Form Inputs
             * @tags input, form
             * @example <zane-textarea placeholder="Enter some description over here"></zane-textarea>
             */
            "zane-textarea": LocalJSX.ZaneTextarea & JSXBase.HTMLAttributes<HTMLZaneTextareaElement>;
            /**
             * @name Time Picker
             * @description Captures time input.
             * @category Form Inputs
             * @tags input, form
             * @example <zane-time-picker value='true'></zane-time-picker>
             */
            "zane-time-picker": LocalJSX.ZaneTimePicker & JSXBase.HTMLAttributes<HTMLZaneTimePickerElement>;
            /**
             * @name Toggle
             * @description Captures boolean input with an optional indeterminate mode.
             * @category Form Inputs
             * @tags input, form
             * @example <zane-toggle value='true'>Want ice cream?</zane-toggle>
             */
            "zane-toggle": LocalJSX.ZaneToggle & JSXBase.HTMLAttributes<HTMLZaneToggleElement>;
            /**
             * @name Tooltip
             * @description The Tooltip component is used to display additional information on hover.
             * @category Informational
             * @tag content
             * @img /assets/img/tooltip.webp
             * @imgDark /assets/img/tooltip-dark.webp
             */
            "zane-tooltip": LocalJSX.ZaneTooltip & JSXBase.HTMLAttributes<HTMLZaneTooltipElement>;
            /**
             * @name Tree
             * @description A tree view is a hierarchical structure that provides nested levels of navigation.
             * @category Navigation
             * @subcategory Tree View
             * @img /assets/img/tree-view.webp
             * @imgDark /assets/img/tree-view-dark.webp
             */
            "zane-tree": LocalJSX.ZaneTree & JSXBase.HTMLAttributes<HTMLZaneTreeElement>;
            /**
             * @name TreeNode
             * @description A tree node is a hierarchical structure that provides nested levels of navigation.
             * @category Navigation
             * @subcategory Tree View
             * @childComponent true
             * @img /assets/img/tree-view.webp
             * @imgDark /assets/img/tree-view-dark.webp
             */
            "zane-tree-node": LocalJSX.ZaneTreeNode & JSXBase.HTMLAttributes<HTMLZaneTreeNodeElement>;
        }
    }
}
