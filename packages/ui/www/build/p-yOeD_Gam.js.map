{"version":3,"file":"p-yOeD_Gam.js","sources":["src/utils/hasSlot.ts"],"sourcesContent":["/**\n * 检查目标元素是否包含指定的插槽内容\n * @param el 要检查的父级 DOM 元素\n * @param name 可选参数，指定要查找的具名插槽\n * @returns\n *   - 当指定 name 时：返回布尔值，表示是否存在对应的具名插槽元素\n *   - 当未指定 name 时：返回布尔值，表示是否存在有效的默认插槽内容\n *          (文本节点：非空白文本 / 元素节点：未指定 slot 属性的元素)\n */\nexport const hasSlot = (el: HTMLElement, name?: string): boolean => {\n  // 情况1：查找具名插槽\n  if (name) {\n    // 使用 :scope 伪类限定在当前元素范围内查找\n    // 检查是否存在直接子元素且具有 [slot=\"指定名称\"] 属性的元素\n    return el.querySelector(`:scope > [slot=\"${name}\"]`) !== null;\n  }\n\n  // 情况2：查找默认插槽内容\n  // 将元素的子节点列表转换为数组以便使用数组方法\n  // eslint-disable-next-line unicorn/prefer-spread\n  const childNodes = Array.from(el.childNodes);\n\n  // 使用 some() 方法检查是否存在符合条件的子节点\n  return childNodes.some((node) => {\n    // 检查文本节点：非空文本内容\n    if (node.nodeType === Node.TEXT_NODE) {\n      // 去除空白字符后检查内容是否非空\n      return node.textContent?.trim() !== '';\n    }\n\n    // 检查元素节点\n    if (node.nodeType === Node.ELEMENT_NODE) {\n      const element = node as HTMLElement;\n      // 如果元素没有 slot 属性，则视为默认插槽内容\n      return !element.hasAttribute('slot');\n    }\n\n    // 其他类型节点（如注释节点）不视为有效内容\n    return false;\n  });\n};\n"],"names":[],"mappings":"AAAA;;;;;;;;AAQG;MACU,OAAO,GAAG,CAAC,EAAe,EAAE,IAAa,KAAa;;IAEjE,IAAI,IAAI,EAAE;;;QAGR,OAAO,EAAE,CAAC,aAAa,CAAC,CAAA,gBAAA,EAAmB,IAAI,CAAI,EAAA,CAAA,CAAC,KAAK,IAAI;;;;;IAM/D,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC;;AAG5C,IAAA,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,KAAI;;;QAE9B,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,SAAS,EAAE;;YAEpC,OAAO,CAAA,CAAA,EAAA,GAAA,IAAI,CAAC,WAAW,0CAAE,IAAI,EAAE,MAAK,EAAE;;;QAIxC,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,YAAY,EAAE;YACvC,MAAM,OAAO,GAAG,IAAmB;;AAEnC,YAAA,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC;;;AAItC,QAAA,OAAO,KAAK;AACd,KAAC,CAAC;AACJ;;;;"}