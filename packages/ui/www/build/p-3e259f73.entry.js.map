{"version":3,"names":["textareaCss","Textarea","constructor","hostRef","this","clearable","configAria","debounce","disabled","endSlotHasContent","gid","getComponentIndex","hasFocus","inline","invalid","name","readonly","required","size","skeleton","state","warn","blurHandler","ev","zaneBlur","emit","clearInput","evt","nativeElement","value","inputHandler","focusHandler","zaneFocus","input","target","zaneInput","zaneChange","keyDownHandler","key","componentWillLoad","elm","hasAttribute","tabindex","getAttribute","undefined","removeAttribute","getAttributeNames","forEach","includes","querySelector","connectedCallback","debounceChanged","getComponentId","getLabel","h","class","label","render","Host","hasValue","renderInput","renderHelper","invalidText","warnText","helperText","textarea","Object","assign","onBlur","onFocus","onInput","onKeyDown","placeholder","ref","rows","color","icon","onClick","variant","setBlur","blur","setFocus","focus","debounceEvent","getValue","toString","length"],"sources":["src/components/textarea/textarea.scss?tag=zane-textarea&encapsulation=shadow","src/components/textarea/textarea.tsx"],"sourcesContent":["@use \"../../global/styles/common-input\";\n\n:host {\n  --zane-textarea-height: 2.5rem;\n}\n\n.textarea {\n  height: 100%;\n  position: relative;\n  align-items: flex-start;\n\n  .input-native {\n    height: 100%;\n    min-height: var(--zane-textarea-height);\n    resize: vertical;\n    padding:v(--spacing-05);\n  }\n}\n\n.actions-container {\n  position: absolute;\n  right: 1rem;\n  top: 0.5rem;\n\n  zane-button {\n    --zane-button-height: 2rem;\n  }\n}\n\n:host([size=md]) .input-container {\n  height: 100%;\n  min-height: var(--zane-textarea-height);\n}\n\n","import type { InputComponentInterface } from '../../interfaces';\n\nimport {\n  Component,\n  ComponentInterface,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\n\nimport { debounceEvent, getComponentIndex } from '../../utils';\n\n/**\n * @name Textarea\n * @description Enables native inputs to be used within a Form field.\n * @category Form Inputs\n * @tags input, form\n * @example <zane-textarea placeholder=\"Enter some description over here\"></zane-textarea>\n */\n@Component({\n  shadow: true,\n  styleUrl: './textarea.scss',\n  tag: 'zane-textarea',\n})\nexport class Textarea implements ComponentInterface, InputComponentInterface {\n  /**\n   * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.\n   */\n  @Prop() clearable = false;\n\n  @Prop({ mutable: true, reflect: true }) configAria: any = {};\n\n  /**\n   * Set the amount of time, in milliseconds, to wait to trigger the `zane:change` event after each keystroke.\n   */\n  @Prop() debounce = 300;\n\n  /**\n   * If true, the user cannot interact with the button. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  @Element() elm!: HTMLElement;\n\n  @State() endSlotHasContent = false;\n\n  gid: string = getComponentIndex();\n\n  @State() hasFocus = false;\n\n  @Prop() helperText: string;\n\n  @Prop({ reflect: true }) inline: boolean = false;\n\n  @Prop() invalid: boolean = false;\n\n  @Prop() invalidText: string;\n\n  @Prop() label: string;\n\n  /**\n   * The input field name.\n   */\n  @Prop() name: string = `zane-input-${this.gid}`;\n\n  /**\n   * The input field placeholder.\n   */\n  @Prop() placeholder: string;\n\n  /**\n   * If true, the user read the value cannot modify it. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) readonly: boolean = false;\n\n  /**\n   * If true, required icon is show. Defaults to `false`.\n   */\n  @Prop() required: boolean = false;\n\n  /**\n   * The input field size.\n   * Possible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.\n   */\n  @Prop({ reflect: true }) size: 'lg' | 'md' | 'sm' = 'md';\n\n  @Prop() skeleton: boolean = false;\n\n  /**\n   * The input state.\n   * Possible values are: `\"success\"`, `\"error\"`, `\"warning\"`, 'default'. Defaults to `\"default\"`.\n   */\n  @Prop({ reflect: true }) state: 'default' | 'error' | 'success' | 'warning' =\n    'default';\n\n  /**\n   * The input field value.\n   */\n  @Prop({ mutable: true }) value: string;\n\n  @Prop() warn: boolean = false;\n\n  @Prop() warnText: string;\n\n  /**\n   * Emitted when the action button is clicked.\n   */\n  @Event({ eventName: 'zane-textarea--action-click' })\n  zaneActionClick: EventEmitter;\n\n  /**\n   * Emitted when the input loses focus.\n   */\n  @Event({ eventName: 'zane-textarea--blur' }) zaneBlur: EventEmitter;\n\n  /**\n   * Emitted when the value has changed..\n   */\n  @Event({ eventName: 'zane-textarea--change' }) zaneChange: EventEmitter;\n\n  /**\n   * Emitted when the input has focus.\n   */\n  @Event({ eventName: 'zane-textarea--focus' }) zaneFocus: EventEmitter;\n\n  /**\n   * Emitted when a keyboard input occurred.\n   */\n  @Event({ eventName: 'zane-textarea--input' }) zaneInput: EventEmitter;\n\n  private nativeElement?: HTMLTextAreaElement;\n\n  private tabindex?: number | string;\n  componentWillLoad() {\n    // If the ion-input has a tabindex attribute we get the value\n    // and pass it down to the native input, then remove it from the\n    // ion-input to avoid causing tabbing twice on the same element\n    if (this.elm.hasAttribute('tabindex')) {\n      const tabindex = this.elm.getAttribute('tabindex');\n      this.tabindex = tabindex === null ? undefined : tabindex;\n      this.elm.removeAttribute('tabindex');\n    }\n    this.elm.getAttributeNames().forEach((name: string) => {\n      if (name.includes('aria-')) {\n        this.configAria[name] = this.elm.getAttribute(name);\n        this.elm.removeAttribute(name);\n      }\n    });\n    this.endSlotHasContent = !!this.elm.querySelector('[slot=\"end\"]');\n  }\n  connectedCallback() {\n    this.debounceChanged();\n  }\n  @Method()\n  async getComponentId() {\n    return this.gid;\n  }\n  getLabel() {\n    return this.skeleton ? (\n      <div class=\"label skeleton\" />\n    ) : (\n      <label class=\"label\">\n        {this.required && <span class=\"required\">*</span>}\n        {this.label}\n      </label>\n    );\n  }\n\n  render() {\n    return (\n      <Host\n        has-focus={this.hasFocus}\n        has-value={this.hasValue()}\n        invalid={this.invalid}\n        warn={this.warn}\n      >\n        <div class={{ 'form-control': true, inline: this.inline }}>\n          {this.label && this.getLabel()}\n          <div class=\"field\">\n            {this.skeleton ? (\n              <div class=\"input-container-skeleton\" />\n            ) : (\n              this.renderInput()\n            )}\n          </div>\n          {this.renderHelper()}\n        </div>\n      </Host>\n    );\n  }\n\n  renderHelper() {\n    if (this.invalid)\n      return <div class=\"helper invalid\">{this.invalidText}</div>;\n    else if (this.warn) return <div class=\"helper warn\">{this.warnText}</div>;\n    else if (this.helperText || this.helperText === '')\n      return <div class=\"helper text\">{this.helperText}</div>;\n  }\n\n  renderInput() {\n    return (\n      <div\n        class={{\n          disabled: this.disabled,\n          'end-slot-has-content': this.endSlotHasContent,\n          'has-focus': this.hasFocus,\n          'input-container': true,\n          readonly: this.readonly,\n          textarea: true,\n        }}\n      >\n        <textarea\n          class=\"input input-native\"\n          disabled={this.disabled}\n          name={this.name}\n          onBlur={this.blurHandler}\n          onFocus={this.focusHandler}\n          onInput={this.inputHandler}\n          onKeyDown={this.keyDownHandler}\n          placeholder={this.placeholder}\n          readonly={this.readonly}\n          ref={(input) => (this.nativeElement = input)}\n          required={this.required}\n          rows={4}\n          tabindex={this.tabindex}\n          value={this.value}\n          {...this.configAria}\n        />\n\n        <div class={'actions-container'}>\n          {this.clearable && this.hasValue() && (\n            <zane-button\n              class=\"clear clear-action\"\n              color={'secondary'}\n              icon=\"close\"\n              onClick={this.clearInput}\n              size={this.size}\n              variant=\"ghost\"\n            />\n          )}\n        </div>\n\n        <div class=\"slot-container end\">\n          <slot name=\"end\" />\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Sets blur on the native `textarea` in `zane-textarea`. Use this method instead of the global\n   * `textarea.blur()`.\n   */\n  @Method()\n  async setBlur() {\n    if (this.nativeElement) {\n      this.nativeElement.blur();\n      this.hasFocus = false;\n    }\n  }\n\n  /**\n   * Sets focus on the native `textarea` in `zane-textarea`. Use this method instead of the global\n   * `textarea.focus()`.\n   */\n  @Method()\n  async setFocus() {\n    if (this.nativeElement) {\n      this.nativeElement.focus();\n      this.hasFocus = true;\n    }\n  }\n\n  @Watch('debounce')\n  protected debounceChanged() {\n    this.zaneChange = debounceEvent(this.zaneChange, this.debounce);\n  }\n\n  private blurHandler = (ev: FocusEvent) => {\n    this.hasFocus = false;\n    this.zaneBlur.emit(ev);\n  };\n\n  private clearInput = (evt: Event) => {\n    this.nativeElement.value = '';\n    this.inputHandler(evt);\n  };\n\n  private focusHandler = (ev: FocusEvent) => {\n    this.hasFocus = true;\n    this.zaneFocus.emit(ev);\n  };\n\n  private getValue(): string {\n    return (this.value || '').toString();\n  }\n\n  private hasValue(): boolean {\n    return this.getValue().length > 0;\n  }\n\n  private inputHandler = (ev: Event) => {\n    const input = ev.target as HTMLInputElement | null;\n    if (input) {\n      this.value = input.value || '';\n    }\n    this.zaneInput.emit(ev as KeyboardEvent);\n    this.zaneChange.emit(ev as KeyboardEvent);\n  };\n\n  private keyDownHandler = (ev: KeyboardEvent) => {\n    if (ev.key === 'Escape' && this.clearable) {\n      this.clearInput(ev);\n    }\n  };\n}\n"],"mappings":"wLAAA,MAAMA,EAAc,yhQ,MC8BPC,EAAQ,MALrB,WAAAC,CAAAC,G,6PASUC,KAASC,UAAG,MAEoBD,KAAUE,WAAQ,GAKlDF,KAAQG,SAAG,IAKMH,KAAQI,SAAY,MAIpCJ,KAAiBK,kBAAG,MAE7BL,KAAGM,IAAWC,IAELP,KAAQQ,SAAG,MAIKR,KAAMS,OAAY,MAEnCT,KAAOU,QAAY,MASnBV,KAAAW,KAAe,cAAcX,KAAKM,MAUjBN,KAAQY,SAAY,MAKrCZ,KAAQa,SAAY,MAMHb,KAAIc,KAAuB,KAE5Cd,KAAQe,SAAY,MAMHf,KAAKgB,MAC5B,UAOMhB,KAAIiB,KAAY,MAkLhBjB,KAAAkB,YAAeC,IACrBnB,KAAKQ,SAAW,MAChBR,KAAKoB,SAASC,KAAKF,EAAG,EAGhBnB,KAAAsB,WAAcC,IACpBvB,KAAKwB,cAAcC,MAAQ,GAC3BzB,KAAK0B,aAAaH,EAAI,EAGhBvB,KAAA2B,aAAgBR,IACtBnB,KAAKQ,SAAW,KAChBR,KAAK4B,UAAUP,KAAKF,EAAG,EAWjBnB,KAAA0B,aAAgBP,IACtB,MAAMU,EAAQV,EAAGW,OACjB,GAAID,EAAO,CACT7B,KAAKyB,MAAQI,EAAMJ,OAAS,E,CAE9BzB,KAAK+B,UAAUV,KAAKF,GACpBnB,KAAKgC,WAAWX,KAAKF,EAAoB,EAGnCnB,KAAAiC,eAAkBd,IACxB,GAAIA,EAAGe,MAAQ,UAAYlC,KAAKC,UAAW,CACzCD,KAAKsB,WAAWH,E,EAGrB,CAtLC,iBAAAgB,GAIE,GAAInC,KAAKoC,IAAIC,aAAa,YAAa,CACrC,MAAMC,EAAWtC,KAAKoC,IAAIG,aAAa,YACvCvC,KAAKsC,SAAWA,IAAa,KAAOE,UAAYF,EAChDtC,KAAKoC,IAAIK,gBAAgB,W,CAE3BzC,KAAKoC,IAAIM,oBAAoBC,SAAShC,IACpC,GAAIA,EAAKiC,SAAS,SAAU,CAC1B5C,KAAKE,WAAWS,GAAQX,KAAKoC,IAAIG,aAAa5B,GAC9CX,KAAKoC,IAAIK,gBAAgB9B,E,KAG7BX,KAAKK,oBAAsBL,KAAKoC,IAAIS,cAAc,e,CAEpD,iBAAAC,GACE9C,KAAK+C,iB,CAGP,oBAAMC,GACJ,OAAOhD,KAAKM,G,CAEd,QAAA2C,GACE,OAAOjD,KAAKe,SACVmC,EAAA,OAAKC,MAAM,mBAEXD,EAAO,SAAAC,MAAM,SACVnD,KAAKa,UAAYqC,EAAA,QAAMC,MAAM,YAAmB,KAChDnD,KAAKoD,M,CAKZ,MAAAC,GACE,OACEH,EAACI,EAAI,CAAApB,IAAA,uDACQlC,KAAKQ,SACL,YAAAR,KAAKuD,WAChB7C,QAASV,KAAKU,QACdO,KAAMjB,KAAKiB,MAEXiC,EAAA,OAAAhB,IAAA,2CAAKiB,MAAO,CAAE,eAAgB,KAAM1C,OAAQT,KAAKS,SAC9CT,KAAKoD,OAASpD,KAAKiD,WACpBC,EAAK,OAAAhB,IAAA,2CAAAiB,MAAM,SACRnD,KAAKe,SACJmC,EAAK,OAAAC,MAAM,6BAEXnD,KAAKwD,eAGRxD,KAAKyD,gB,CAMd,YAAAA,GACE,GAAIzD,KAAKU,QACP,OAAOwC,EAAA,OAAKC,MAAM,kBAAkBnD,KAAK0D,kBACtC,GAAI1D,KAAKiB,KAAM,OAAOiC,EAAA,OAAKC,MAAM,eAAenD,KAAK2D,eACrD,GAAI3D,KAAK4D,YAAc5D,KAAK4D,aAAe,GAC9C,OAAOV,EAAA,OAAKC,MAAM,eAAenD,KAAK4D,W,CAG1C,WAAAJ,GACE,OACEN,EACE,OAAAC,MAAO,CACL/C,SAAUJ,KAAKI,SACf,uBAAwBJ,KAAKK,kBAC7B,YAAaL,KAAKQ,SAClB,kBAAmB,KACnBI,SAAUZ,KAAKY,SACfiD,SAAU,OAGZX,EACE,WAAAY,OAAAC,OAAA,CAAAZ,MAAM,qBACN/C,SAAUJ,KAAKI,SACfO,KAAMX,KAAKW,KACXqD,OAAQhE,KAAKkB,YACb+C,QAASjE,KAAK2B,aACduC,QAASlE,KAAK0B,aACdyC,UAAWnE,KAAKiC,eAChBmC,YAAapE,KAAKoE,YAClBxD,SAAUZ,KAAKY,SACfyD,IAAMxC,GAAW7B,KAAKwB,cAAgBK,EACtChB,SAAUb,KAAKa,SACfyD,KAAM,EACNhC,SAAUtC,KAAKsC,SACfb,MAAOzB,KAAKyB,OACRzB,KAAKE,aAGXgD,EAAK,OAAAC,MAAO,qBACTnD,KAAKC,WAAaD,KAAKuD,YACtBL,EACE,eAAAC,MAAM,qBACNoB,MAAO,YACPC,KAAK,QACLC,QAASzE,KAAKsB,WACdR,KAAMd,KAAKc,KACX4D,QAAQ,WAKdxB,EAAK,OAAAC,MAAM,sBACTD,EAAA,QAAMvC,KAAK,S,CAWnB,aAAMgE,GACJ,GAAI3E,KAAKwB,cAAe,CACtBxB,KAAKwB,cAAcoD,OACnB5E,KAAKQ,SAAW,K,EASpB,cAAMqE,GACJ,GAAI7E,KAAKwB,cAAe,CACtBxB,KAAKwB,cAAcsD,QACnB9E,KAAKQ,SAAW,I,EAKV,eAAAuC,GACR/C,KAAKgC,WAAa+C,EAAc/E,KAAKgC,WAAYhC,KAAKG,S,CAkBhD,QAAA6E,GACN,OAAQhF,KAAKyB,OAAS,IAAIwD,U,CAGpB,QAAA1B,GACN,OAAOvD,KAAKgF,WAAWE,OAAS,C","ignoreList":[]}