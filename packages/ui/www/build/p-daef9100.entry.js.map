{"version":3,"names":["popoverCss","Popover","constructor","hostRef","this","dismissTimeout","gid","getComponentIndex","offset","open","openTimeout","tip","trigger","hidePopover","closeEvent","emit","showPopover","setTimeout","openEvent","componentDidLoad","contentRef","host","querySelector","Error","arrowRef","shadowRoot","popoverController","PopoverController","placements","triggerRef","slotRef","assignedElements","nodeName","length","registerTarget","setTriggerRef","triggerObserver","IntersectionObserver","entries","isIntersecting","computePositionThrottle","disconnect","threshold","observe","componentDidUpdate","setOpen","componentWillLoad","disconnectedCallback","destroy","hide","render","h","Host","key","class","popover","ref","el","resizeHandler","show","target","windowClickHandler","evt","popoverContentCss","PopoverContent","tooltipCss","Tooltip","content","elm","popoverElm","name","windowMouseOver","path","composedPath","hasAttribute","getAttribute","targetElm"],"sources":["src/components/popover/popover/popover.scss?tag=zane-popover&encapsulation=shadow","src/components/popover/popover/popover.tsx","src/components/popover/popover-content/popover-content.scss?tag=zane-popover-content&encapsulation=shadow","src/components/popover/popover-content/popover-content.tsx","src/components/tooltip/tooltip.scss?tag=zane-tooltip&encapsulation=shadow","src/components/tooltip/tooltip.tsx"],"sourcesContent":["@use '../../../global/styles/commons';\n\n:host {\n  --zane-popover-tiptab-padding: 0.5rem;\n  --zane-popover-height: inherit;\n\n  display: inline-block;\n  height: var(--zane-popover-height);\n}\n\n.popover {\n  height: var(--zane-popover-height);\n\n  &.tip-tab {\n    padding: var(--zane-popover-tiptab-padding);\n    line-height: 0;\n    transition: background 0.1s ease-out 0s;\n\n    &.open {\n      background: var(--layer);\n    }\n  }\n}\n","import {\n  Component,\n  ComponentInterface,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n} from '@stencil/core';\n\nimport { getComponentIndex } from '../../../utils';\nimport PopoverController from './popover-controller';\n\n/**\n * 弹出框组件（Popover）\n *\n * @component zane-popover\n * @shadow true\n *\n * @description\n * `zane-popover` 是一个灵活的弹出框组件，可以在目标元素周围显示内容。它支持多种触发方式（点击、悬停、手动控制）、多种箭头样式以及自定义位置。\n *\n * 使用此组件时，需要在组件内部放置一个 `zane-popover-content` 组件作为弹出内容，以及一个触发元素（例如按钮）。\n *\n * @example\n * <zane-popover trigger=\"click\">\n *   <button>点击我</button>\n *   <zane-popover-content>\n *     这里是弹出内容\n *   </zane-popover-content>\n * </zane-popover>\n */\n@Component({\n  shadow: true,\n  styleUrl: 'popover.scss',\n  tag: 'zane-popover',\n})\nexport class Popover implements ComponentInterface {\n\n  /**\n   * 当弹出框关闭时发出的事件\n   *\n   * @event zane-popover--close\n   */\n  @Event({ eventName: 'zane-popover--close' }) closeEvent: EventEmitter;\n\n  /**\n   * 弹出框关闭的动画时间（毫秒）\n   *\n   * @prop {number} [dismissTimeout=300]\n   */\n  @Prop() dismissTimeout: number = 300;\n\n  /** 组件实例的唯一标识符 */\n  gid: string = getComponentIndex();\n\n  /** 宿主元素引用 */\n  @Element() host!: HTMLElement;\n\n  /**\n   * 弹出框与目标元素之间的偏移量（像素）\n   *\n   * @prop {number} [offset=4]\n   */\n  @Prop() offset: number = 4;\n\n  /**\n   * 控制弹出框的打开状态\n   *\n   * @prop {boolean} [open=false]\n   * @mutable\n   * @reflect\n   */\n  @Prop({ mutable: true, reflect: true }) open: boolean = false;\n\n  /**\n   * 当弹出框打开时发出的事件\n   *\n   * @event zane-popover--open\n   */\n  @Event({ eventName: 'zane-popover--open' }) openEvent: EventEmitter;\n\n  /**\n   * 弹出框打开的动画时间（毫秒）\n   *\n   * @prop {number} [openTimeout=200]\n   */\n  @Prop() openTimeout: number = 200;\n\n  /**\n   * 弹出框的位置偏好设置，使用逗号分隔的字符串，例如：\"top,bottom\"\n   *\n   * 当 `tip` 属性为 'tab' 时，默认设置为 'bottom-end,bottom-start,top-end,top-start'\n   *\n   * @prop {string} [placements]\n   * @mutable\n   */\n  @Prop({ mutable: true }) placements: string;\n\n  /** 弹出框控制器实例 */\n  popoverController: PopoverController;\n\n  /** 插槽元素的引用，用于获取触发元素 */\n  slotRef: HTMLSlotElement;\n\n  /**\n   * 弹出框的箭头样式\n   *\n   * @prop {'caret' | 'none' | 'tab'} [tip='caret']\n   *\n   * - 'caret': 使用一个三角形的箭头（默认）。\n   * - 'none': 没有箭头。\n   * - 'tab': 使用一个类似标签页的箭头，通常用于下拉菜单。\n   *\n   * @default 'caret'\n   * @reflect\n   */\n  @Prop({ reflect: true }) tip: 'caret' | 'none' | 'tab' = 'caret';\n\n  /**\n   * 触发弹出框的方式\n   *\n   * @prop {'click' | 'hover' | 'manual'} [trigger='hover']\n   *\n   * - 'click': 点击触发元素时打开/关闭弹出框。\n   * - 'hover': 鼠标悬停在触发元素上时打开，移开时关闭。\n   * - 'manual': 手动控制，通过调用组件的 `show()` 和 `hide()` 方法控制。\n   *\n   * @default 'hover'\n   */\n  @Prop() trigger: 'click' | 'hover' | 'manual' = 'hover';\n\n  /**\n   * 组件加载完成生命周期方法\n   *\n   * 在此方法中初始化弹出框控制器，并设置触发元素。\n   */\n  async componentDidLoad() {\n    const contentRef = this.host.querySelector('zane-popover-content');\n\n    if (!contentRef) {\n      throw new Error(\n        'The zane-popover component requires a zane-popover-content component to be present.',\n      );\n    }\n\n    const arrowRef = contentRef.shadowRoot.querySelector(\n      '.arrow',\n    ) as HTMLElement;\n\n    this.popoverController = new PopoverController(\n      this.host,\n      this.trigger,\n      this.open,\n      contentRef as HTMLElement,\n      this.tip === 'tab' ? 0 : this.offset,\n      this.tip === 'tab' ? 8 : 0,\n      this.showPopover,\n      this.hidePopover,\n      this.placements,\n      this.openTimeout,\n      this.dismissTimeout,\n      this.tip === 'caret' ? arrowRef : null,\n    );\n\n    let triggerRef = this.slotRef.assignedElements()[0] as HTMLElement;\n    if (triggerRef.nodeName === 'SLOT') {\n      const assignedElements = (\n        triggerRef as HTMLSlotElement\n      ).assignedElements();\n      if (\n        assignedElements.length > 0 &&\n        assignedElements[0].nodeName !== 'ZANE-POPOVER-CONTENT'\n      ) {\n        triggerRef = assignedElements[0] as HTMLSlotElement;\n      }\n    }\n\n    if (triggerRef) {\n      this.popoverController.registerTarget(triggerRef);\n      this.popoverController.setTriggerRef(triggerRef);\n    }\n\n    if (this.open) {\n      const triggerObserver = new IntersectionObserver(\n        (entries) => {\n          if (entries[0].isIntersecting) {\n            this.popoverController.computePositionThrottle('onLoad');\n            triggerObserver.disconnect();\n          }\n        },\n        {\n          threshold: [0, 1],\n        },\n      );\n      triggerObserver.observe(triggerRef);\n    }\n  }\n\n  /**\n   * 组件更新生命周期方法\n   *\n   * 当组件的状态或属性发生变化时，更新弹出框控制器的状态，并在需要时重新计算位置。\n   */\n  componentDidUpdate() {\n    this.popoverController.setOpen(this.open);\n    if (this.open) {\n      this.popoverController.computePositionThrottle('onUpdate');\n    }\n  }\n\n  /**\n   * 组件将要加载生命周期方法\n   *\n   * 在组件加载前，根据 `tip` 属性设置默认的弹出位置（如果未提供 `placements` 且 `tip` 为 'tab'）。\n   */\n  componentWillLoad() {\n    if (this.tip === 'tab' && !this.placements) {\n      this.placements = 'bottom-end,bottom-start,top-end,top-start';\n    }\n  }\n\n  /**\n   * 组件卸载生命周期方法\n   *\n   * 清理弹出框控制器的资源，移除事件监听器等。\n   */\n  disconnectedCallback() {\n    this.popoverController.destroy();\n  }\n\n  /**\n   * 隐藏弹出框的公共方法\n   *\n   * @method hide\n   * @async\n   */\n  @Method()\n  async hide() {\n    this.open = false;\n  }\n\n  /**\n   * 内部使用的隐藏弹出框函数\n   *\n   * 将 `open` 状态设置为 false，并发出关闭事件。\n   */\n  hidePopover = () => {\n    this.open = false;\n    this.closeEvent.emit();\n  };\n\n  /**\n   * 渲染组件\n   *\n   * @returns {JSX.Element} 组件的虚拟DOM表示\n   */\n  render() {\n    return (\n      <Host gid={this.gid}>\n        <div\n          class={{\n            [`tip-${this.tip}`]: true,\n            open: this.open,\n            popover: true,\n          }}\n        >\n          <slot ref={(el) => (this.slotRef = el as HTMLSlotElement)} />\n        </div>\n      </Host>\n    );\n  }\n\n  /**\n   * 监听窗口的 resize 事件\n   *\n   * 当窗口大小改变时，重新计算弹出框的位置（使用节流）。\n   *\n   * @listens window:resize\n   */\n  @Listen('resize', { target: 'window' })\n  resizeHandler() {\n    this.popoverController.computePositionThrottle('resize');\n  }\n\n  /**\n   * 显示弹出框的公共方法\n   *\n   * @method show\n   * @async\n   * @param {HTMLElement} [target] - 可选的触发元素。如果提供，将使用此元素作为触发元素。\n   */\n  @Method()\n  async show(target?: HTMLElement) {\n    if (target) {\n      this.popoverController.registerTarget(target);\n      this.popoverController.setTriggerRef(target);\n    }\n    this.showPopover();\n  }\n\n  /**\n   * 内部使用的显示弹出框函数\n   *\n   * 将 `open` 状态设置为 true，并在短暂的延迟后发出打开事件（以确保动画效果）。\n   */\n  showPopover = () => {\n    this.open = true;\n    setTimeout(() => this.openEvent.emit());\n  };\n\n  /**\n   * 监听窗口的点击事件\n   *\n   * 用于实现点击外部关闭弹出框的功能（当触发方式为 'click' 时）。\n   *\n   * @listens window:click\n   * @param {MouseEvent} evt - 点击事件对象\n   */\n  @Listen('click', { target: 'window' })\n  windowClickHandler(evt) {\n    this.popoverController.windowClickHandler(evt);\n  }\n}\n","@use '../../../global/styles/commons';\n\n:host {\n  /**\n   * @prop --popover-content-background: Background color of the popover content\n   */\n  --popover-content-background: var(--layer);\n\n  /**\n   * @prop --popover-padding: Padding of the popover content\n   */\n  --popover-content-padding: #{commons.v(--spacing-05)};\n\n  /**\n   * @prop --popover-content-border-radius: Border radius of the popover content\n   */\n  --popover-content-border-radius: 2px;\n\n  /**\n    * @prop --zane-menu-shadow: Shadow of popover content\n   */\n  --popover-content-shadow: none;\n  --popover-content-caret-size: 0.75rem;\n\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: commons.v(--z-index-popover);\n  display: inline-block;\n  pointer-events: none;\n  transform: scale(0);\n  transition: transform 0.1s ease-out 0s;\n}\n\n:host-context(zane-popover[open]) {\n  pointer-events: auto;\n  transform: scale(1);\n}\n\n:host-context(zane-popover[tip='caret']) {\n  .arrow {\n    transform: rotate(45deg) scale(1);\n  }\n}\n\n.popover-content {\n  position: relative;\n  padding: var(--popover-content-padding);\n  background: var(--popover-content-background);\n  border-radius: var(--popover-content-border-radius);\n  filter: var(--popover-content-shadow, none);\n\n  .arrow {\n    position: absolute;\n    z-index: -1;\n    width: var(--popover-content-caret-size);\n    height: var(--popover-content-caret-size);\n    background: var(--popover-content-background);\n    transform: rotate(45deg) scale(0);\n  }\n}\n","import { Component, ComponentInterface, Element, h, Host } from '@stencil/core';\n\nimport { getComponentIndex } from '../../../utils';\n\n/**\n * 弹出框内容容器组件 (zane-popover-content)\n *\n * @component zane-popover-content\n * @shadow true\n *\n * @description\n * 弹出框系统的核心内容承载容器，提供以下核心功能：\n * 1. 结构化内容容器：为弹出内容提供标准化的布局结构\n * 2. 动态箭头指示器：根据父组件配置自动调整箭头样式和位置\n * 3. 无障碍支持：内置ARIA角色属性增强可访问性\n * 4. 主题适配：通过CSS变量支持深度主题定制\n *\n * @dependency\n * 必须作为`<zane-popover>`组件的直接子元素使用\n *\n * @slot - 默认插槽用于承载弹出内容（文本/图片/表单等任意HTML内容）\n *\n * @example\n * <!-- 基础用法 -->\n * <zane-popover-content>\n *   <h3>标题</h3>\n *   <p>详细说明内容...</p>\n *   <button>确认</button>\n * </zane-popover-content>\n *\n * <!-- 带样式定制 -->\n * <zane-popover-content style=\"--background: #2c3e50; --color: white\">\n *   ...\n * </zane-popover-content>\n */\n@Component({\n  shadow: true,\n  styleUrl: 'popover-content.scss',\n  tag: 'zane-popover-content',\n})\nexport class PopoverContent implements ComponentInterface {\n  /**\n   * 组件实例唯一标识符\n   *\n   * @designNote\n   * - 通过工具函数生成全局唯一ID\n   * - 用于DOM查询和调试跟踪\n   */\n  gid: string = getComponentIndex();\n\n  @Element() host!: HTMLElement;\n\n  render() {\n    return (\n      <Host>\n        <div class=\"popover-content\">\n          <slot />\n\n          <div class=\"arrow\"></div>\n        </div>\n      </Host>\n    );\n  }\n}\n","@use '../../global/styles/commons';\n\n:host {\n  --zane-tooltip-height: inherit;\n\n  display: inline-block;\n  height: var(--zane-tooltip-height);\n}\n\n.popover {\n  --zane-popover-height: var(--zane-tooltip-height);\n}\n\n.tooltip-content {\n  --popover-content-background: var(--background-inverse);\n  --popover-content-padding: var(--spacing-03) var(--spacing-05);\n  --popover-content-border-radius: 0;\n  --popover-content-caret-size: 0.5rem;\n\n  max-width: 18rem;\n  color: var(--text-inverse);\n\n  @include commons.font-style(label-01);\n}\n","import { Component, Element, h, Host, Listen, Prop } from '@stencil/core';\n\n/**\n * 工具提示组件 (zane-tooltip)\n *\n * 该组件实现了一个灵活的工具提示系统，可通过悬停或手动触发显示上下文信息。\n * 支持四种定位方向，可动态绑定目标元素，并适配无障碍规范。\n *\n */\n@Component({\n  shadow: true,\n  styleUrl: 'tooltip.scss',\n  tag: 'zane-tooltip',\n})\nexport class Tooltip {\n\n  /**\n   * 工具提示内容\n   * @prop {string} content - 显示在提示框内的文本内容\n   * @mutable 允许动态更新内容\n   * @default ''\n   */\n  @Prop({ mutable: true }) content: string = '';\n\n  // 获取宿主元素引用\n  @Element() elm!: HTMLElement;\n\n  /**\n   * 提示框定位方向\n   * @prop {string} placements - 逗号分隔的可用定位方向列表\n   * @description\n   *   支持的定位值：\n   *   - 'top'     : 上方定位\n   *   - 'bottom'  : 下方定位\n   *   - 'right'   : 右侧定位\n   *   - 'left'    : 左侧定位\n   * @default 'top,bottom,right,left' (支持所有方向)\n   */\n  @Prop() placements: string = 'top,bottom,right,left';\n\n  // 引用内部的zane-popover组件实例\n  popoverElm: any;\n\n  // 当前关联的目标元素（触发提示显示的元素）\n  targetElm: HTMLElement;\n\n  /**\n   * 触发方式\n   * @prop {'hover' | 'manual'} trigger - 控制提示显示触发的模式\n   *   - 'hover' : 鼠标悬停在目标元素时自动触发（默认）\n   *   - 'manual': 需要通过编程方式触发（如调用show()方法）\n   * @default 'hover'\n   * @reflect 同步到DOM属性\n   */\n  @Prop({ reflect: true }) trigger: 'hover' | 'manual' = 'hover';\n\n  render() {\n    return (\n      <Host>\n        <zane-popover\n          class=\"popover\"\n          placements={this.placements}\n          ref={(elm) => (this.popoverElm = elm)}\n          tip=\"caret\"\n          trigger={this.trigger}\n        >\n          <slot />\n\n          <zane-popover-content class=\"tooltip-content\">\n            {this.content}\n            <slot name=\"content\"></slot>\n          </zane-popover-content>\n        </zane-popover>\n      </Host>\n    );\n  }\n\n  /**\n   * 全局鼠标悬停事件监听\n   * @listen window:mouseover\n   * @param {MouseEvent} evt - 鼠标事件对象\n   * @description\n   *   实现动态目标绑定机制：\n   *   1. 检测事件路径中的元素\n   *   2. 查找带有[tooltip-target]属性的元素\n   *   3. 当匹配当前组件ID时更新目标元素\n   *   4. 从目标元素获取提示内容\n   *   5. 通过popover组件显示提示\n   */\n  @Listen('mouseover', { target: 'window' })\n  windowMouseOver(evt) {\n    const path = evt.path || evt.composedPath();\n    for (const elm of path) {\n      if (elm === this.elm) return;\n    }\n    let target: HTMLElement;\n    for (const elm of path) {\n      if (\n        elm.hasAttribute &&\n        elm.hasAttribute('tooltip-target') &&\n        elm.getAttribute('tooltip-target') === this.elm.getAttribute('id')\n      )\n        target = elm;\n    }\n\n    if (target && this.targetElm !== target) {\n      this.targetElm = target;\n      if (target.hasAttribute('tooltip-content'))\n        this.content = target.getAttribute('tooltip-content');\n      this.popoverElm.show(target);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}