{"version":3,"names":["inputCss","Input","constructor","hostRef","this","autocomplete","configAria","debounce","disabled","endSlotHasContent","gid","getComponentIndex","hasFocus","inline","invalid","name","passwordVisible","readonly","required","size","skeleton","startSlotHasContent","type","warn","blurHandler","ev","zaneBlur","emit","focusHandler","zaneFocus","inputHandler","input","target","oldValue","value","zaneInput","zaneChange","componentWillLoad","elm","hasAttribute","tabindex","getAttribute","undefined","removeAttribute","getAttributeNames","forEach","includes","querySelector","connectedCallback","debounceChanged","getComponentId","getLabel","h","class","label","render","Host","key","hasValue","renderInput","renderHelper","invalidText","warnText","helperText","Object","assign","autoComplete","onBlur","onFocus","onInput","evt","placeholder","readOnly","ref","nativeElement","tabIndex","content","color","icon","variant","setBlur","blur","setFocus","focus","debounceEvent","getValue","toString","length"],"sources":["src/components/input/input.scss?tag=zane-input&encapsulation=shadow","src/components/input/input.tsx"],"sourcesContent":["@use '../../global/styles/common-input';\n","import type { InputComponentInterface } from '../../interfaces';\n\nimport {\n  Component,\n  ComponentInterface,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\n\nimport { debounceEvent, getComponentIndex } from '../../utils';\n\n/**\n * @name Input\n * @description Enables native inputs to be used within a Form field.\n * @category Form Inputs\n * @tags input, form\n * @example <zane-input placeholder=\"Enter your name\"></zane-input>\n */\n@Component({\n  shadow: true,\n  styleUrl: './input.scss',\n  tag: 'zane-input',\n})\nexport class Input implements ComponentInterface, InputComponentInterface {\n  /**\n   * Indicates whether the value of the control can be automatically completed by the browser.\n   */\n  @Prop() autocomplete: 'off' | 'on' = 'off';\n\n  @Prop({ mutable: true, reflect: true }) configAria: any = {};\n\n  /**\n   * Set the amount of time, in milliseconds, to wait to trigger the `zaneChange` event after each keystroke.\n   */\n  @Prop() debounce = 300;\n\n  /**\n   * If true, the user cannot interact with the button. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  @Element() elm!: HTMLElement;\n\n  @State() endSlotHasContent = false;\n\n  gid: string = getComponentIndex();\n\n  @State() hasFocus = false;\n\n  @Prop() helperText: string;\n\n  @Prop({ reflect: true }) inline: boolean = false;\n\n  @Prop() invalid: boolean = false;\n\n  @Prop() invalidText: string;\n\n  @Prop() label: string;\n\n  /**\n   * The input field name.\n   */\n  @Prop() name: string = `zane-input-${this.gid}`;\n\n  @State() passwordVisible = false;\n\n  /**\n   * The input field placeholder.\n   */\n  @Prop() placeholder: string;\n\n  /**\n   * If true, the user read the value cannot modify it. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) readonly: boolean = false;\n\n  /**\n   * If true, required icon is show. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /**\n   * The input field size.\n   * Possible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.\n   */\n  @Prop({ reflect: true }) size: 'lg' | 'md' | 'sm' = 'md';\n\n  @Prop() skeleton: boolean = false;\n\n  @State() startSlotHasContent = false;\n\n  /**\n   * The type of control to display.\n   * Possible values are: `\"text\"`, `\"password\"`, `\"email\"`, `\"tel\"`. Defaults to `\"text\"`.\n   */\n  @Prop() type: 'email' | 'password' | 'tel' | 'text' = 'text';\n\n  /**\n   * The input field value.\n   */\n  @Prop({ mutable: true }) value: string;\n\n  @Prop() warn: boolean = false;\n\n  @Prop() warnText: string;\n  /**\n   * Emitted when the input loses focus.\n   */\n  @Event({ eventName: 'zane-input--blur' }) zaneBlur: EventEmitter;\n  /**\n   * Emitted when the value has changed.\n   */\n  @Event({ eventName: 'zane-input--change' }) zaneChange: EventEmitter;\n\n  /**\n   * Emitted when the input has focus.\n   */\n  @Event({ eventName: 'zane-input--focus' }) zaneFocus: EventEmitter;\n  /**\n   * Emitted when a keyboard input occurred.\n   */\n  @Event({ eventName: 'zane-input--input' }) zaneInput: EventEmitter;\n  private nativeElement?: HTMLInputElement;\n  private tabindex?: number | string;\n\n  componentWillLoad() {\n    // If the ion-input has a tabindex attribute we get the value\n    // and pass it down to the native input, then remove it from the\n    // zane-input to avoid causing tabbing twice on the same element\n    if (this.elm.hasAttribute('tabindex')) {\n      const tabindex = this.elm.getAttribute('tabindex');\n      this.tabindex = tabindex === null ? undefined : tabindex;\n      this.elm.removeAttribute('tabindex');\n    }\n    this.elm.getAttributeNames().forEach((name: string) => {\n      if (name.includes('aria-')) {\n        this.configAria[name] = this.elm.getAttribute(name);\n        this.elm.removeAttribute(name);\n      }\n    });\n    this.startSlotHasContent = !!this.elm.querySelector('[slot=\"start\"]');\n    this.endSlotHasContent = !!this.elm.querySelector('[slot=\"end\"]');\n  }\n\n  connectedCallback() {\n    this.debounceChanged();\n  }\n\n  @Method()\n  async getComponentId() {\n    return this.gid;\n  }\n\n  getLabel() {\n    return this.skeleton ? (\n      <div class=\"label skeleton\" />\n    ) : (\n      <label class=\"label\">\n        {this.required && <span class=\"required\">*</span>}\n        {this.label}\n      </label>\n    );\n  }\n\n  render() {\n    return (\n      <Host\n        has-focus={this.hasFocus}\n        has-value={this.hasValue()}\n        invalid={this.invalid}\n        warn={this.warn}\n      >\n        <div class={{ 'form-control': true, inline: this.inline }}>\n          {this.label && this.getLabel()}\n          <div class=\"field\">\n            {this.skeleton ? (\n              <div class=\"input-container-skeleton skeleton\" />\n            ) : (\n              this.renderInput()\n            )}\n          </div>\n          {this.renderHelper()}\n        </div>\n      </Host>\n    );\n  }\n\n  renderHelper() {\n    if (this.invalid)\n      return <div class=\"helper invalid\">{this.invalidText}</div>;\n    else if (this.warn) return <div class=\"helper warn\">{this.warnText}</div>;\n    else if (this.helperText || this.helperText === '')\n      return <div class=\"helper text\">{this.helperText}</div>;\n  }\n\n  renderInput() {\n    const type =\n      this.type === 'password' && this.passwordVisible ? 'text' : this.type;\n\n    return (\n      <div\n        class={{\n          disabled: this.disabled,\n          'end-slot-has-content': this.endSlotHasContent,\n          'has-focus': this.hasFocus,\n          'input-container': true,\n          'start-slot-has-content': this.startSlotHasContent,\n        }}\n      >\n        <div class=\"slot-container start\">\n          <slot name=\"start\" />\n        </div>\n\n        <input\n          autoComplete={this.autocomplete}\n          class=\"input input-native\"\n          disabled={this.disabled}\n          name={this.name}\n          onBlur={this.blurHandler}\n          onFocus={this.focusHandler}\n          onInput={(evt) => this.inputHandler(evt)}\n          placeholder={this.placeholder}\n          readOnly={this.readonly}\n          ref={(input) => (this.nativeElement = input)}\n          required={this.required}\n          tabIndex={this.tabindex}\n          type={type}\n          value={this.value}\n          {...this.configAria}\n        />\n\n        {this.type === 'password' && (\n          <zane-tooltip\n            content={this.passwordVisible ? 'Show password' : 'Hide password'}\n          >\n            <zane-button\n              color={'secondary'}\n              icon={this.passwordVisible ? 'view--off' : 'view'}\n              onGoat-button--click={() => {\n                this.passwordVisible = !this.passwordVisible;\n              }}\n              size={this.size}\n              variant=\"ghost.simple\"\n            ></zane-button>\n          </zane-tooltip>\n        )}\n\n        <div class=\"slot-container end\">\n          <slot name=\"end\" />\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Sets blur on the native `input` in `zane-input`. Use this method instead of the global\n   * `input.blur()`.\n   */\n  @Method()\n  async setBlur() {\n    if (this.nativeElement) {\n      this.nativeElement.blur();\n      this.hasFocus = false;\n    }\n  }\n\n  /**\n   * Sets focus on the native `input` in `zane-input`. Use this method instead of the global\n   * `input.focus()`.\n   */\n  @Method()\n  async setFocus() {\n    if (this.nativeElement) {\n      this.nativeElement.focus();\n      this.hasFocus = true;\n    }\n  }\n\n  @Watch('debounce')\n  protected debounceChanged() {\n    this.zaneChange = debounceEvent(this.zaneChange, this.debounce);\n  }\n\n  private blurHandler = (ev: FocusEvent) => {\n    this.hasFocus = false;\n    this.zaneBlur.emit(ev);\n  };\n\n  private focusHandler = (ev: FocusEvent) => {\n    this.hasFocus = true;\n    this.zaneFocus.emit(ev);\n  };\n\n  private getValue(): string {\n    return (this.value || '').toString();\n  }\n\n  private hasValue(): boolean {\n    return this.getValue().length > 0;\n  }\n\n  private inputHandler = (ev: Event) => {\n    const input = ev.target as HTMLInputElement | null;\n    const oldValue = this.value;\n    if (input) {\n      this.value = input.value;\n    }\n    this.zaneInput.emit(ev as KeyboardEvent);\n    if (oldValue !== this.value) {\n      this.zaneChange.emit(ev as KeyboardEvent);\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]}