{"version":3,"names":["dividerCss","Divider","constructor","hostRef","this","slotHasContent","vertical","componentWillLoad","elm","hasChildNodes","render","h","Host","key","class","divider"],"sources":["src/components/divider/divider.scss?tag=zane-divider&encapsulation=shadow","src/components/divider/divider.tsx"],"sourcesContent":["@use '../../global/styles/commons';\n\n:host {\n  /**\n   * @prop --zane-divider-color: Color of the divider\n   */\n  --zane-divider-color: #{commons.v(--border-strong-01)};\n\n  /**\n   * @prop --zane-divider-padding: Padding of the divider\n   */\n  --zane-divider-padding: #{commons.v(--spacing-05)};\n\n  display: block;\n  color: var(--text-secondary);\n}\n\n.divider {\n  display: flex;\n  margin: 0;\n\n  @include commons.font-style(body-compact-01);\n\n  &:not(.vertical) {\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    padding: var(--zane-divider-padding) 0;\n\n    .line {\n      width: 100%;\n      border-top: 1px solid var(--zane-divider-color);\n    }\n\n    &.has-content .slot-container {\n      padding: 0 var(--spacing-04);\n    }\n  }\n\n  &.vertical {\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n    padding: 0 var(--zane-divider-padding);\n\n    .line {\n      height: 100%;\n      border-right: 1px solid var(--zane-divider-color);\n    }\n\n    &.has-content .slot-container {\n      padding: var(--spacing-03) 0;\n    }\n  }\n}\n\n:host(:not([vertical])) {\n  width: auto;\n}\n\n:host([vertical]) {\n  height: auto;\n}\n","import {\n  Component,\n  ComponentInterface,\n  Element,\n  h,\n  Host,\n  Prop,\n  State,\n} from '@stencil/core';\n\n/**\n * 分割线组件\n * @Component 装饰器定义组件元数据\n * @shadow 启用Shadow DOM封装\n * @styleUrl 组件样式表路径\n * @tag 组件自定义标签名称\n */\n@Component({\n  shadow: true,\n  styleUrl: 'divider.scss',\n  tag: 'zane-divider',\n})\nexport class Divider implements ComponentInterface {\n  /**\n   * 宿主元素引用\n   * @Element 装饰器获取宿主元素\n   */\n  @Element() elm!: HTMLElement;\n\n  /**\n   * 插槽是否有内容\n   * 用于判断是否显示中间内容区域\n   * @State 装饰器表示这是组件内部状态\n   */\n  @State() slotHasContent = false;\n\n  /**\n   * 是否为垂直方向\n   * @Prop 装饰器，reflect表示会反映到DOM属性上\n   * 默认值为false(水平方向)\n   */\n  @Prop({ reflect: true }) vertical: boolean = false;\n\n  /**\n   * 组件即将加载生命周期钩子\n   * 检查插槽是否有内容\n   */\n  componentWillLoad() {\n    this.slotHasContent = this.elm.hasChildNodes();\n  }\n\n  /**\n   * 渲染组件\n   * @returns 组件虚拟DOM\n   */\n  render() {\n    return (\n      <Host>\n        <div\n          class={{\n            divider: true,\n            'has-content': this.slotHasContent,\n            vertical: this.vertical,\n          }}\n        >\n          <div class=\"line\" />\n          <div class=\"slot-container\">\n            <slot />\n          </div>\n          <div class=\"line\" />\n        </div>\n      </Host>\n    );\n  }\n}\n"],"mappings":"yDAAA,MAAMA,EAAa,w7H,MCsBNC,EAAO,MALpB,WAAAC,CAAAC,G,UAiBWC,KAAcC,eAAG,MAODD,KAAQE,SAAY,KAiC9C,CA3BC,iBAAAC,GACEH,KAAKC,eAAiBD,KAAKI,IAAIC,e,CAOjC,MAAAC,GACE,OACEC,EAACC,EAAI,CAAAC,IAAA,4CACHF,EAAA,OAAAE,IAAA,2CACEC,MAAO,CACLC,QAAS,KACT,cAAeX,KAAKC,eACpBC,SAAUF,KAAKE,WAGjBK,EAAK,OAAAE,IAAA,2CAAAC,MAAM,SACXH,EAAK,OAAAE,IAAA,2CAAAC,MAAM,kBACTH,EAAA,QAAAE,IAAA,8CAEFF,EAAA,OAAAE,IAAA,2CAAKC,MAAM,U","ignoreList":[]}