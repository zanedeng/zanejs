{"version":3,"names":["inputUrlCss","InputUrl","constructor","hostRef","this","debounce","disabled","editing","endSlotHasContent","gid","getComponentIndex","hasFocus","isValid","name","size","startSlotHasContent","blurHandler","__classPrivateFieldGet","_InputUrl_instances","_InputUrl_closeEditing","call","focusHandler","inputHandler","ev","input","target","oldValue","value","valueChange","emit","componentDidLoad","elm","querySelector","componentWillLoad","debounceChanged","getComponentId","render","h","Host","key","invalid","class","renderInput","renderHelper","href","icon","_InputUrl_startEditing","variant","onBlur","onFocus","onInput","evt","placeholder","ref","nativeElement","type","setBlur","blur","setFocus","focus","debounceEvent","validateUrl","url","URL","_a","inputInvalid","setTimeout"],"sources":["src/components/input-url/input-url.scss?tag=zane-input-url&encapsulation=shadow","src/components/input-url/input-url.tsx"],"sourcesContent":["@use \"../../global/styles/common-input\";\n\n:host {\n  display: block;\n}\n\n/* URL-specific styles */\n.input-container.invalid {\n  border-color: var(--support-error);\n}\n\n.input-container.has-focus.invalid {\n  box-shadow: 0 0 0 0.125rem var(--support-error);\n}\n\n.helper.invalid {\n  color: var(--support-error-inverse);\n}\n\n.input-container {\n  display: none;\n}\n\n.url-container {\n  display: flex;\n\n  zane-link {\n    flex: 1;\n  }\n}\n\n.editing {\n  .url-container {\n    display: none;\n  }\n  .input-container {\n    display: flex;\n  }\n}\n","import type { InputComponentInterface } from '../../interfaces';\n\nimport {\n  Component,\n  ComponentInterface,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\n\nimport { debounceEvent, getComponentIndex } from '../../utils';\n\n/**\n * @name Input URL\n * @description A specialized input field for URL validation.\n * @category Up coming\n * @tags input, form, url\n * @example <zane-input-url value=\"https://shivajivarma.com\"></zane-input-url>\n */\n@Component({\n  shadow: true,\n  styleUrl: 'input-url.scss',\n  tag: 'zane-input-url',\n})\nexport class InputUrl implements ComponentInterface, InputComponentInterface {\n  /**\n   * Set the amount of time, in milliseconds, to wait to trigger the `valueChange` event after each keystroke.\n   */\n  @Prop() debounce = 300;\n\n  /**\n   * If true, the user cannot interact with the input. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  @Prop({ mutable: true, reflect: true }) editing: boolean = false;\n\n  @Element() elm!: HTMLElement;\n\n  @State() endSlotHasContent = false;\n\n  gid: string = getComponentIndex();\n\n  @State() hasFocus = false;\n\n  /**\n   * Emitted when the URL input is invalid.\n   */\n  @Event() inputInvalid: EventEmitter<boolean>;\n\n  @State() isValid = true;\n\n  /**\n   * The input field name.\n   */\n  @Prop() name: string = `zane-input-url-${this.gid}`;\n\n  /**\n   * The input field placeholder.\n   */\n  @Prop() placeholder: string;\n  /**\n   * The input field size.\n   * Possible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.\n   */\n  @Prop({ reflect: true }) size: 'lg' | 'md' | 'sm' = 'md';\n\n  @State() startSlotHasContent = false;\n  /**\n   * The input field value.\n   */\n  @Prop({ mutable: true }) value: string;\n  /**\n   * Emitted when a keyboard input occurred.\n   */\n  @Event() valueChange: EventEmitter<string>;\n  private nativeElement?: HTMLInputElement;\n\n  componentDidLoad() {\n    this.startSlotHasContent =\n      this.elm.querySelector('[slot=\"start\"]') !== null;\n    this.endSlotHasContent = this.elm.querySelector('[slot=\"end\"]') !== null;\n  }\n\n  componentWillLoad() {\n    this.debounceChanged();\n  }\n\n  /**\n   * Get the component's unique ID\n   */\n  @Method()\n  async getComponentId() {\n    return this.gid;\n  }\n\n  render() {\n    return (\n      <Host has-focus={this.hasFocus} invalid={!this.isValid}>\n        <div class=\"form-control\">\n          <div class=\"field\">{this.renderInput()}</div>\n          {this.renderHelper()}\n        </div>\n      </Host>\n    );\n  }\n\n  renderHelper() {\n    if (!this.isValid) {\n      return <div class=\"helper invalid\">Please enter a valid URL</div>;\n    }\n    return null;\n  }\n\n  renderInput() {\n    return (\n      <div class={{ editing: this.editing, 'url-input': true }}>\n        <div class={{ 'url-container': true }}>\n          <zane-link href={this.value} target=\"_blank\">\n            {this.value}\n          </zane-link>\n          <zane-button\n            icon=\"edit\"\n            onZane-button--click={() => {\n              this.#startEditing();\n            }}\n            size=\"sm\"\n            variant=\"ghost\"\n          ></zane-button>\n        </div>\n\n        <div\n          class={{\n            disabled: this.disabled,\n            'end-slot-has-content': this.endSlotHasContent,\n            'has-focus': this.hasFocus,\n            'input-container': true,\n            invalid: !this.isValid,\n            'start-slot-has-content': this.startSlotHasContent,\n          }}\n        >\n          <input\n            class=\"input input-native\"\n            disabled={this.disabled}\n            name={this.name}\n            onBlur={this.blurHandler}\n            onFocus={this.focusHandler}\n            onInput={(evt) => this.inputHandler(evt)}\n            placeholder={this.placeholder}\n            ref={(input) => (this.nativeElement = input)}\n            type=\"url\"\n            value={this.value}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Sets blur on the native `input`. Use this method instead of the global\n   * `input.blur()`.\n   */\n  @Method()\n  async setBlur() {\n    if (this.nativeElement) {\n      this.nativeElement.blur();\n      this.hasFocus = false;\n    }\n  }\n\n  /**\n   * Sets focus on the native `input`. Use this method instead of the global\n   * `input.focus()`.\n   */\n  @Method()\n  async setFocus() {\n    if (this.nativeElement) {\n      this.nativeElement.focus();\n      this.hasFocus = true;\n    }\n  }\n\n  @Watch('debounce')\n  protected debounceChanged() {\n    this.valueChange = debounceEvent(this.valueChange, this.debounce);\n  }\n\n  #closeEditing() {\n    this.isValid = this.validateUrl(this.value);\n    this.inputInvalid.emit(!this.isValid);\n\n    if (this.isValid) this.editing = false;\n  }\n\n  #startEditing() {\n    this.editing = true;\n    setTimeout(() => this.setFocus(), 80);\n  }\n\n  private blurHandler = () => {\n    this.hasFocus = false;\n\n    // Validate on blur for better user experience\n    this.#closeEditing();\n  };\n\n  private focusHandler = () => {\n    this.hasFocus = true;\n  };\n\n  private inputHandler = (ev: Event) => {\n    const input = ev.target as HTMLInputElement | null;\n    const oldValue = this.value;\n\n    if (input) {\n      this.value = input.value;\n    }\n\n    if (oldValue !== this.value) {\n      this.valueChange.emit(this.value);\n    }\n  };\n\n  /**\n   * Validate if the given string is a valid URL\n   */\n  private validateUrl(url: string): boolean {\n    if (!url) return true; // Empty value is considered valid (not invalid)\n\n    try {\n      // Use built-in URL constructor for validation\n      // eslint-disable-next-line no-new\n      new URL(url);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}