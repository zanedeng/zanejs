{"version":3,"file":"zane-accordion.entry.esm.js","sources":["src/components/accordion/accordion/accordion.scss?tag=zane-accordion&encapsulation=shadow","src/components/accordion/accordion/accordion.tsx"],"sourcesContent":["@use '../../../global/styles/commons';\n\n:host {\n  display: block;\n}\n\nslot::slotted(zane-accordion-item) {\n  border-top: 1px solid var(--border-subtle);\n}\n\nslot::slotted(zane-accordion-item:last-child) {\n  border-bottom: 1px solid var(--border-subtle);\n}\n","import { Component, Element, h, Host, Listen, Prop } from '@stencil/core';\n\n/**\n * 可折叠面板(Accordion)容器组件\n *\n * 提供可折叠内容区域的容器组件，管理多个折叠项的状态和交互。\n * 支持单开/多开模式、多种尺寸和图标位置配置。\n * @slot default - 默认插槽\n */\n@Component({\n  shadow: true,\n  styleUrl: 'accordion.scss',\n  tag: 'zane-accordion',\n})\nexport class Accordion {\n\n  /**\n   * 控制折叠指示图标的位置\n   *\n   * 1. `end`: 图标显示在面板标题的末尾(右侧)(默认值)\n   * 2. `start`: 图标显示在面板标题的开头(左侧)\n   *\n   * @type {'end' | 'start'}\n   * @default 'end'\n   * @reflectToAttr 属性值会同步到DOM元素上\n   * @example <zane-accordion align=\"start\"></zane-accordion>\n   */\n  @Prop({ reflect: true }) align: 'end' | 'start' = 'end';\n\n  /**\n   * 组件宿主元素的引用\n   *\n   * 用于直接访问组件DOM元素，主要用于查询子元素\n   *\n   * @type {HTMLElement}\n   * @readonly\n   */\n  @Element() elm!: HTMLElement;\n\n  /**\n   * 是否允许多个面板同时展开\n   *\n   * - true: 允许多个面板同时保持展开状态\n   * - false: 同一时间只能展开一个面板(默认值)\n   *\n   * @type {boolean}\n   * @default false\n   * @example <zane-accordion multiple></zane-accordion>\n   */\n  @Prop() multiple: boolean = false;\n\n  /**\n   * 控制折叠面板的尺寸变体\n   *\n   * - 'lg': 大尺寸，适合需要突出显示的内容\n   * - 'md': 中等尺寸(默认值)，通用尺寸\n   * - 'sm': 小尺寸，适合紧凑布局\n   *\n   * @type {'lg' | 'md' | 'sm'}\n   * @default 'md'\n   * @reflectToAttr 属性值会同步到DOM元素上\n   * @example <zane-accordion size=\"lg\"></zane-accordion>\n   */\n  @Prop({ reflect: true }) size: 'lg' | 'md' | 'sm' = 'md';\n\n  /**\n   * 处理折叠项点击事件\n   *\n   * 当子项触发'zane-accordion-item--click'事件时，\n   * 如果multiple为false，会自动关闭其他展开的面板\n   *\n   * @param {CustomEvent} evt 自定义事件对象\n   * @param {HTMLElement} evt.detail.element 触发事件的折叠项元素\n   * @listens zane-accordion-item--click\n   * @private\n   */\n  @Listen('zane-accordion-item--click')\n  accordionItemClick(evt: CustomEvent<any>) {\n    if (!this.multiple) {\n      const accordionItems = this.elm.querySelectorAll('zane-accordion-item');\n      accordionItems.forEach((item) => {\n        if (item !== evt.detail.element) {\n          (item as any).open = false;\n        }\n      });\n    }\n  }\n\n  /**\n   * 渲染组件\n   *\n   * 使用Host元素包裹默认插槽，所有样式和属性将应用到Host元素\n   *\n   * @returns {JSX.Element} 组件JSX结构\n   */\n  render() {\n    return (\n      <Host>\n        <slot />\n      </Host>\n    );\n  }\n}\n"],"names":[],"mappings":";;AAAA,MAAM,YAAY,GAAG,g6FAAg6F;;MCcx6F,SAAS,GAAA,MAAA;AALtB,IAAA,WAAA,CAAA,OAAA,EAAA;;AAOE;;;;;;;;;;AAUG;AACsB,QAAA,IAAK,CAAA,KAAA,GAAoB,KAAK;AAYvD;;;;;;;;;AASG;AACK,QAAA,IAAQ,CAAA,QAAA,GAAY,KAAK;AAEjC;;;;;;;;;;;AAWG;AACsB,QAAA,IAAI,CAAA,IAAA,GAAuB,IAAI;AAuCzD;AArCC;;;;;;;;;;AAUG;AAEH,IAAA,kBAAkB,CAAC,GAAqB,EAAA;AACtC,QAAA,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,MAAM,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,qBAAqB,CAAC;AACvE,YAAA,cAAc,CAAC,OAAO,CAAC,CAAC,IAAI,KAAI;gBAC9B,IAAI,IAAI,KAAK,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE;AAC9B,oBAAA,IAAY,CAAC,IAAI,GAAG,KAAK;;AAE9B,aAAC,CAAC;;;AAIN;;;;;;AAMG;IACH,MAAM,GAAA;QACJ,QACE,EAAC,IAAI,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,EACH,CAAQ,CAAA,MAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,CAAA,CACH;;;;;;;;"}