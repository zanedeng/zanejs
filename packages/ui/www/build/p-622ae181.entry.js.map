{"version":3,"names":["notificationCss","Notification","constructor","hostRef","this","dismissible","hidden","highContrast","inline","isDarkMode","managed","state","componentWillLoad","observeThemeChange","render","h","Host","key","class","notification","role","renderStateIcon","name","__classPrivateFieldGet","_Notification_instances","_Notification_renderActions","call","_Notification_renderCloseButtons","size","action","color","zaneActionClick","emit","variant","evt","preventDefault","stopPropagation","zaneDismiss"],"sources":["src/components/notification/notification.scss?tag=zane-notification&encapsulation=shadow","src/components/notification/notification.tsx"],"sourcesContent":["@use \"../../global/styles/commons\";\n\n\n:host {\n  display: block;\n  margin-bottom: commons.v(--spacing-03);\n}\n\n\n:host(:not([inline])) {\n  width: 18rem;\n}\n\n.notification {\n  border-style: solid;\n  border-color: transparent;\n  display: flex;\n\n  .state-icon {\n    padding: 0.875rem commons.v(--spacing-04);\n    line-height: 0;\n  }\n\n  .content {\n    flex: 1;\n    padding-block: commons.v(--spacing-04);\n\n    .title {\n      @include commons.font-style(heading-compact-01);\n      word-break: break-word;\n    }\n\n    .subtitle {\n      @include commons.font-style(body-compact-01);\n      word-break: break-word;\n    }\n\n    .actions {\n      display: flex;\n      align-items: center;\n      gap: var(--spacing-04);\n      padding-top: 1.5rem;\n\n      .action {\n        --zane-button-border-radius: none;\n      }\n    }\n  }\n\n\n  &.inline .content {\n    display: flex;\n    padding-block: 0;\n\n    .content-text {\n      flex: 1;\n      padding-block: commons.v(--spacing-04);\n\n      .title, .subtitle {\n        display: inline;\n        padding-inline-end: .25rem;\n      }\n\n      .title slot::slotted(*), .subtitle slot::slotted(*) {\n        display: inline;\n      }\n\n\n    }\n\n    .actions {\n      padding-top: 0;\n      padding-inline-end: commons.v(--spacing-03);\n    }\n  }\n\n\n  .close-button {\n    margin: 0;\n    --zane-button-padding: .75rem;\n    --zane-button-height: 3rem;\n    --zane-button-border-radius: none;\n  }\n}\n\n:host(:not([dismissible])) .content {\n  padding-inline-end: commons.v(--spacing-04);\n}\n\n\n@mixin alertState($color, $dark) {\n  @if $dark {\n    .alert {\n      background-color: commons.v(--color-#{$color});\n\n      .content {\n        .message {\n          color: white;\n          --link-color: white;\n        }\n\n        .description {\n          color: commons.v(--text-primary);\n        }\n      }\n    }\n  } @else {\n    .alert {\n      background-color: commons.v(--color-#{$color}-20);\n\n      .content {\n        .message {\n          color: commons.v(--color-#{$color}-70);\n          --link-color: #{commons.v(--color-#{$color}-70)};\n        }\n\n        .description {\n          color: commons.v(--text-secondary);\n        }\n      }\n    }\n  }\n}\n\n@each $state in [info, success, warning, error] {\n\n  .notification.state-#{$state} {\n\n    &.high-contrast {\n      border-left-color: commons.v(--support-#{$state}-inverse);\n      color: commons.v(--text-inverse);\n      background: commons.v(--background-inverse);\n      border-width: 0 0 0 3px;\n\n      .close-button {\n        .icon {\n          color: commons.v(--text-inverse);\n        }\n      }\n\n      .state-icon {\n        color: commons.v(--support-#{$state}-inverse);\n      }\n    }\n\n    &:not(.high-contrast) {\n      color: commons.v(--color-neutral-100);\n      border-color: commons.v(--support-#{$state});\n      background: commons.v(--color-#{$state}-10);\n      border-width: 1px 1px 1px 3px;\n\n      .close-button {\n        .icon {\n          --icon-color: commons.v(--color-neutral-100);\n        }\n      }\n\n      .state-icon {\n        color: commons.v(--support-#{$state});\n      }\n    }\n  }\n\n}\n","import {\n  Component,\n  ComponentInterface,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Prop,\n  State,\n} from '@stencil/core';\n\nimport { isDarkMode, observeThemeChange } from '../../utils';\n\n/**\n * @name Notification\n * @description Notifications are messages that communicate information to the user.\n * @category Informational\n * @tags notification\n * @example <zane-notification state=\"success\">\n *               <div slot='title'>Successful saved the record</div>\n *             </zane-notification>\n */\n@Component({\n  shadow: true,\n  styleUrl: 'notification.scss',\n  tag: 'zane-notification',\n})\nexport class Notification implements ComponentInterface {\n  /**\n   * Action to be displayed on the notification\n   */\n  @Prop() action: string;\n\n  /**\n   * Whether the notification is dismissible\n   */\n  @Prop() dismissible: boolean = false;\n\n  @Element() elm!: HTMLElement;\n\n  @State() hidden: boolean = false;\n\n  /**\n   * Whether to use high contrast mode\n   */\n  @Prop() highContrast: boolean = false;\n\n  /**\n   * Whether the notification should be displayed inline\n   */\n  @Prop({ reflect: true }) inline: boolean = false;\n\n  @State() isDarkMode: boolean = isDarkMode();\n\n  /**\n   * Whether the notification is managed by the notification manager\n   */\n  @Prop() managed: boolean = false;\n\n  /**\n   * The state of the notification.\n   * Possible values are: 'success', 'error', 'info', 'warning'\n   */\n  @Prop({ reflect: true }) state: 'error' | 'info' | 'success' | 'warning' =\n    'info';\n\n  @Event({ eventName: 'zane-notification--action-click' })\n  zaneActionClick: EventEmitter;\n  /**\n   * Emitted when the notification is dismissed\n   */\n  @Event({ eventName: 'zane-notification--dismiss' }) zaneDismiss: EventEmitter;\n\n  componentWillLoad() {\n    observeThemeChange(() => {\n      this.isDarkMode = isDarkMode();\n    });\n  }\n\n  render() {\n    return (\n      <Host hidden={this.hidden}>\n        <div\n          class={{\n            [`state-${this.state}`]: true,\n            'high-contrast': this.highContrast,\n            inline: this.inline,\n            notification: true,\n          }}\n          role=\"alert\"\n        >\n          <div class=\"state-icon\">{this.renderStateIcon()}</div>\n          <div class=\"content\">\n            <div class=\"content-text\">\n              <div class=\"title\">\n                <slot name=\"title\" />\n                <slot />\n              </div>\n              <div class=\"subtitle\">\n                <slot name=\"subtitle\" />\n              </div>\n            </div>\n            {this.#renderActions()}\n          </div>\n\n          {this.#renderCloseButtons()}\n        </div>\n      </Host>\n    );\n  }\n\n  renderStateIcon() {\n    switch (this.state) {\n      case 'error': {\n        return (\n          <zane-icon class=\"inherit\" name=\"error--filled\" size={'1.25rem'} />\n        );\n      }\n      case 'info': {\n        return (\n          <zane-icon\n            class=\"inherit\"\n            name=\"information--filled\"\n            size={'1.25rem'}\n          />\n        );\n      }\n      case 'success': {\n        return (\n          <zane-icon\n            class=\"inherit\"\n            name=\"checkmark--filled\"\n            size={'1.25rem'}\n          />\n        );\n      }\n      case 'warning': {\n        return (\n          <zane-icon class=\"inherit\" name=\"warning--filled\" size={'1.25rem'} />\n        );\n      }\n      // No default\n    }\n  }\n\n  #renderActions() {\n    if (this.action) {\n      return (\n        <div class=\"actions\">\n          <zane-button\n            class=\"action\"\n            color={!this.highContrast || this.isDarkMode ? 'primary' : 'white'}\n            onZane-button--click={() => {\n              this.zaneActionClick.emit();\n            }}\n            size=\"sm\"\n            variant={this.inline ? 'ghost.simple' : 'outline.simple'}\n          >\n            {this.action}\n          </zane-button>\n        </div>\n      );\n    }\n  }\n\n  #renderCloseButtons() {\n    if (this.dismissible) {\n      return (\n        <div class=\"close-button-container\">\n          <zane-button\n            aria-label=\"Close alert\"\n            class=\"close-button\"\n            color=\"black\"\n            onZane-button--click={(evt) => {\n              evt.preventDefault();\n              evt.stopPropagation();\n              if (!this.managed) {\n                this.hidden = true;\n              }\n              this.zaneDismiss.emit(evt);\n            }}\n            variant=\"ghost.simple\"\n          >\n            <zane-icon class=\"icon\" name=\"close\" size=\"1.25rem\" />\n          </zane-button>\n        </div>\n      );\n    }\n  }\n}\n"],"mappings":"sJAAA,MAAMA,EAAkB,wvO,6WC4BXC,EAAY,MALzB,WAAAC,CAAAC,G,2IAcUC,KAAWC,YAAY,MAItBD,KAAME,OAAY,MAKnBF,KAAYG,aAAY,MAKPH,KAAMI,OAAY,MAElCJ,KAAUK,WAAYA,IAKvBL,KAAOM,QAAY,MAMFN,KAAKO,MAC5B,MA6HH,CApHC,iBAAAC,GACEC,GAAmB,KACjBT,KAAKK,WAAaA,GAAY,G,CAIlC,MAAAK,GACE,OACEC,EAACC,EAAI,CAAAC,IAAA,2CAACX,OAAQF,KAAKE,QACjBS,EAAA,OAAAE,IAAA,2CACEC,MAAO,CACL,CAAC,SAASd,KAAKO,SAAU,KACzB,gBAAiBP,KAAKG,aACtBC,OAAQJ,KAAKI,OACbW,aAAc,MAEhBC,KAAK,SAELL,EAAK,OAAAE,IAAA,2CAAAC,MAAM,cAAcd,KAAKiB,mBAC9BN,EAAK,OAAAE,IAAA,2CAAAC,MAAM,WACTH,EAAK,OAAAE,IAAA,2CAAAC,MAAM,gBACTH,EAAK,OAAAE,IAAA,2CAAAC,MAAM,SACTH,EAAM,QAAAE,IAAA,2CAAAK,KAAK,UACXP,EAAA,QAAAE,IAAA,8CAEFF,EAAK,OAAAE,IAAA,2CAAAC,MAAM,YACTH,EAAA,QAAAE,IAAA,2CAAMK,KAAK,eAGdC,EAAAnB,KAAIoB,EAAA,IAAAC,GAAJC,KAAAtB,OAGFmB,EAAAnB,KAAIoB,EAAA,IAAAG,GAAJD,KAAAtB,O,CAMT,eAAAiB,GACE,OAAQjB,KAAKO,OACX,IAAK,QAAS,CACZ,OACEI,EAAA,aAAWG,MAAM,UAAUI,KAAK,gBAAgBM,KAAM,W,CAG1D,IAAK,OAAQ,CACX,OACEb,EAAA,aACEG,MAAM,UACNI,KAAK,sBACLM,KAAM,W,CAIZ,IAAK,UAAW,CACd,OACEb,EAAA,aACEG,MAAM,UACNI,KAAK,oBACLM,KAAM,W,CAIZ,IAAK,UAAW,CACd,OACEb,EAAA,aAAWG,MAAM,UAAUI,KAAK,kBAAkBM,KAAM,W,2DAQ9D,GAAIxB,KAAKyB,OAAQ,CACf,OACEd,EAAA,OAAKG,MAAM,WACTH,EACE,eAAAG,MAAM,SACNY,OAAQ1B,KAAKG,cAAgBH,KAAKK,WAAa,UAAY,QACrC,4BACpBL,KAAK2B,gBAAgBC,MAAM,EAE7BJ,KAAK,KACLK,QAAS7B,KAAKI,OAAS,eAAiB,kBAEvCJ,KAAKyB,Q,CAKhB,EAACF,EAAA,SAAAA,IAGC,GAAIvB,KAAKC,YAAa,CACpB,OACEU,EAAA,OAAKG,MAAM,0BACTH,EAAA,4BACa,cACXG,MAAM,eACNY,MAAM,QAAO,uBACUI,IACrBA,EAAIC,iBACJD,EAAIE,kBACJ,IAAKhC,KAAKM,QAAS,CACjBN,KAAKE,OAAS,I,CAEhBF,KAAKiC,YAAYL,KAAKE,EAAI,EAE5BD,QAAQ,gBAERlB,EAAA,aAAWG,MAAM,OAAOI,KAAK,QAAQM,KAAK,a,CAKpD,E","ignoreList":[]}