{"version":3,"names":["inputUrlCss","InputUrl","constructor","hostRef","this","debounce","disabled","editing","endSlotHasContent","gid","getComponentIndex","hasFocus","isValid","name","size","startSlotHasContent","blurHandler","__classPrivateFieldGet","_InputUrl_instances","_InputUrl_closeEditing","call","focusHandler","inputHandler","ev","input","target","oldValue","value","valueChange","emit","componentDidLoad","elm","querySelector","componentWillLoad","debounceChanged","getComponentId","render","h","Host","key","invalid","class","renderInput","renderHelper","href","icon","_InputUrl_startEditing","variant","onBlur","onFocus","onInput","evt","placeholder","ref","nativeElement","type","setBlur","blur","setFocus","focus","debounceEvent","validateUrl","url","URL","_a","inputInvalid","setTimeout"],"sources":["src/components/input-url/input-url.scss?tag=zane-input-url&encapsulation=shadow","src/components/input-url/input-url.tsx"],"sourcesContent":["@use '../../global/styles/common-input';\n\n:host {\n  display: block;\n}\n\n/* URL-specific styles */\n.input-container.invalid {\n  border-color: var(--support-error);\n}\n\n.input-container.has-focus.invalid {\n  box-shadow: 0 0 0 0.125rem var(--support-error);\n}\n\n.helper.invalid {\n  color: var(--support-error-inverse);\n}\n\n.input-container {\n  display: none;\n}\n\n.url-container {\n  display: flex;\n\n  zane-link {\n    flex: 1;\n  }\n}\n\n.editing {\n  .url-container {\n    display: none;\n  }\n\n  .input-container {\n    display: flex;\n  }\n}\n","import type { InputComponentInterface } from '../../interfaces';\n\nimport {\n  Component,\n  ComponentInterface,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\n\nimport { debounceEvent, getComponentIndex } from '../../utils';\n\n/**\n * 双模式URL输入组件\n *\n * @component zane-input-url\n * @tags form-control, input, url\n * @shadow true\n *\n * @description\n * 提供URL输入与预览双模式交互的输入组件。在展示模式下显示可点击的URL链接，\n * 在编辑模式下提供带验证功能的输入框。支持防抖值变化事件和实时URL验证。\n *\n * @example\n * <!-- 基础用法 -->\n * <zane-input-url\n *   value=\"https://example.com\"\n *   placeholder=\"输入网站地址\"\n * />\n *\n * <!-- 带尺寸控制 -->\n * <zane-input-url size=\"sm\" />\n */\n@Component({\n  shadow: true,\n  styleUrl: 'input-url.scss',\n  tag: 'zane-input-url',\n})\nexport class InputUrl implements ComponentInterface, InputComponentInterface {\n\n  /**\n   * 值变化事件的防抖时间（毫秒）\n   * @type {number}\n   * @default 300\n   *\n   * @description\n   * 控制`valueChange`事件触发前的延迟时间，用于优化频繁输入时的性能表现。\n   * 值越小响应越快，值越大可减少事件触发次数。\n   */\n  @Prop() debounce = 300;\n\n  /**\n   * 禁用状态\n   * @type {boolean}\n   * @default false\n   * @reflect\n   *\n   * @description\n   * 当设置为true时，组件进入禁用状态：\n   * - 输入框不可交互\n   * - 视觉上呈现禁用样式\n   * - 编辑按钮不可点击\n   */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  /**\n   * 编辑模式状态\n   * @type {boolean}\n   * @default false\n   * @mutable\n   * @reflect\n   *\n   * @description\n   * 控制组件当前交互模式：\n   * - `false`: 展示模式（显示URL链接）\n   * - `true`: 编辑模式（显示输入框）\n   *\n   * 该属性支持双向绑定，组件内部状态变化时会自动更新。\n   */\n  @Prop({ mutable: true, reflect: true }) editing: boolean = false;\n\n  /**\n   * 宿主元素引用\n   * @type {HTMLElement}\n   *\n   * @description\n   * Stencil提供的装饰器，自动注入组件宿主DOM元素。\n   * 用于访问组件DOM结构和查询插槽内容。\n   */\n  @Element() elm!: HTMLElement;\n\n  /**\n   * 尾部插槽内容存在状态\n   * @type {boolean}\n   * @state\n   *\n   * @description\n   * 内部状态，标识是否在`end`插槽中提供了内容。\n   * 用于动态调整输入框的样式布局。\n   */\n  @State() endSlotHasContent = false;\n\n  /**\n   * 组件全局唯一标识符\n   * @type {string}\n   *\n   * @description\n   * 自动生成的唯一ID，格式为递增数字字符串。\n   * 用于：\n   * - 生成默认的`name`属性\n   * - 组件实例标识\n   */\n  gid: string = getComponentIndex();\n\n  /**\n   * 输入框聚焦状态\n   * @type {boolean}\n   * @state\n   *\n   * @description\n   * 标识输入框当前是否获得焦点。\n   * 用于：\n   * - 触发聚焦样式\n   * - 辅助功能状态指示\n   */\n  @State() hasFocus = false;\n\n  /**\n   * 输入无效事件\n   * @event inputInvalid\n   * @type {EventEmitter<boolean>}\n   *\n   * @description\n   * 当URL验证状态变化时触发，携带当前是否无效的状态。\n   * 事件数据：\n   * - `true`: 当前值无效\n   * - `false`: 当前值有效\n   *\n   * @example\n   * <zane-input-url onInputInvalid={(e) => console.log(' 无效状态:', e.detail)}  />\n   */\n  @Event() inputInvalid: EventEmitter<boolean>;\n\n  /**\n   * URL验证状态\n   * @type {boolean}\n   * @state\n   *\n   * @description\n   * 标识当前`value`是否为有效的URL格式。\n   * 遵循规则：\n   * - 空值视为有效\n   * - 符合URL格式规范的值有效\n   * - 不符合URL格式的值无效\n   */\n  @State() isValid = true;\n\n  /**\n   * 输入框名称属性\n   * @type {string}\n   * @default `zane-input-url-${gid}`\n   *\n   * @description\n   * 对应原生input元素的`name`属性，用于表单提交。\n   * 默认自动生成格式为`zane-input-url-{唯一ID}`的值。\n   */\n  @Prop() name: string = `zane-input-url-${this.gid}`;\n\n  /**\n   * 输入框占位文本\n   * @type {string}\n   *\n   * @description\n   * 编辑模式下输入框显示的提示文本。\n   * 当输入值为空时显示。\n   */\n  @Prop() placeholder: string;\n\n  /**\n   * 组件尺寸规格\n   * @type {'lg' | 'md' | 'sm'}\n   * @default 'md'\n   * @reflect\n   *\n   * @description\n   * 控制组件的视觉尺寸，可选值：\n   * - `'sm'`: 小尺寸 (适用于紧凑界面)\n   * - `'md'`: 中尺寸 (默认标准尺寸)\n   * - `'lg'`: 大尺寸 (适用于强调场景)\n   *\n   * 该属性会反映到宿主元素的HTML属性上，可通过CSS属性选择器进行样式定制。\n   */\n  @Prop({ reflect: true }) size: 'lg' | 'md' | 'sm' = 'md';\n\n  /**\n   * 起始插槽内容存在状态\n   * @type {boolean}\n   * @state\n   *\n   * @description\n   * 内部状态，标识是否在`start`插槽中提供了内容。\n   * 用于动态调整输入框的样式布局。\n   */\n  @State() startSlotHasContent = false;\n\n  /**\n   * 输入值\n   * @type {string}\n   * @mutable\n   *\n   * @description\n   * 组件的当前URL值，支持双向绑定。\n   * 在展示模式下显示为可点击链接，在编辑模式下作为输入框的值。\n   */\n  @Prop({ mutable: true }) value: string;\n\n  /**\n   * 值变化事件\n   * @event valueChange\n   * @type {EventEmitter<string>}\n   *\n   * @description\n   * 当输入值变化时触发（经过防抖处理）。\n   * 携带当前输入框的最新值。\n   *\n   * @example\n   * <zane-input-url onValueChange={(e) => console.log(' 新值:', e.detail)}  />\n   */\n  @Event() valueChange: EventEmitter<string>;\n\n  /** 原生输入框元素的引用 */\n  private nativeElement?: HTMLInputElement;\n\n  /**\n   * 组件加载完成生命周期\n   *\n   * @description\n   * 检测插槽内容存在状态：\n   * 1. 检查`slot=\"start\"`是否存在内容\n   * 2. 检查`slot=\"end\"`是否存在内容\n   *\n   * 结果用于动态调整输入框的样式布局。\n   */\n  componentDidLoad() {\n    this.startSlotHasContent =\n      this.elm.querySelector('[slot=\"start\"]') !== null;\n    this.endSlotHasContent = this.elm.querySelector('[slot=\"end\"]') !== null;\n  }\n\n  /**\n   * 组件将要加载生命周期\n   *\n   * @description\n   * 初始化防抖事件处理，确保`valueChange`事件使用当前设置的防抖时间。\n   */\n  componentWillLoad() {\n    this.debounceChanged();\n  }\n\n  /**\n   * 获取组件唯一标识符\n   * @method\n   * @returns {Promise<string>} 组件全局唯一ID\n   *\n   * @description\n   * 提供获取组件实例唯一标识符的公共方法。\n   * 可用于表单关联或组件间通信。\n   */\n  @Method()\n  async getComponentId() {\n    return this.gid;\n  }\n\n  /**\n   * 主渲染方法\n   * @returns {JSX.Element} 组件JSX结构\n   */\n  render() {\n    return (\n      <Host has-focus={this.hasFocus} invalid={!this.isValid}>\n        <div class=\"form-control\">\n          <div class=\"field\">{this.renderInput()}</div>\n          {this.renderHelper()}\n        </div>\n      </Host>\n    );\n  }\n\n  /**\n   * 渲染辅助信息\n   * @returns {JSX.Element | null} 验证错误提示或null\n   *\n   * @description\n   * 当URL无效时显示验证错误提示信息。\n   */\n  renderHelper() {\n    if (!this.isValid) {\n      return <div class=\"helper invalid\">Please enter a valid URL</div>;\n    }\n    return null;\n  }\n\n  /**\n   * 渲染输入区域\n   * @returns {JSX.Element} 输入区域JSX结构\n   *\n   * @description\n   * 根据`editing`状态决定渲染：\n   * - 展示模式：URL链接+编辑按钮\n   * - 编辑模式：输入框\n   */\n  renderInput() {\n    return (\n      <div class={{ editing: this.editing, 'url-input': true }}>\n        <div class={{ 'url-container': true }}>\n          <zane-link href={this.value} target=\"_blank\">\n            {this.value}\n          </zane-link>\n          <zane-button\n            icon=\"edit\"\n            onZane-button--click={() => {\n              this.#startEditing();\n            }}\n            size=\"sm\"\n            variant=\"ghost\"\n          ></zane-button>\n        </div>\n\n        <div\n          class={{\n            disabled: this.disabled,\n            'end-slot-has-content': this.endSlotHasContent,\n            'has-focus': this.hasFocus,\n            'input-container': true,\n            invalid: !this.isValid,\n            'start-slot-has-content': this.startSlotHasContent,\n          }}\n        >\n          <input\n            class=\"input input-native\"\n            disabled={this.disabled}\n            name={this.name}\n            onBlur={this.blurHandler}\n            onFocus={this.focusHandler}\n            onInput={(evt) => this.inputHandler(evt)}\n            placeholder={this.placeholder}\n            ref={(input) => (this.nativeElement = input)}\n            type=\"url\"\n            value={this.value}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * 移除输入框焦点\n   * @method\n   *\n   * @description\n   * 公共方法，以编程方式移除输入框焦点：\n   * 1. 调用原生input元素的blur()\n   * 2. 更新hasFocus状态\n   */\n  @Method()\n  async setBlur() {\n    if (this.nativeElement) {\n      this.nativeElement.blur();\n      this.hasFocus = false;\n    }\n  }\n\n  /**\n   * 设置输入框焦点\n   * @method\n   *\n   * @description\n   * 公共方法，以编程方式聚焦输入框：\n   * 1. 调用原生input元素的focus()\n   * 2. 更新hasFocus状态\n   */\n  @Method()\n  async setFocus() {\n    if (this.nativeElement) {\n      this.nativeElement.focus();\n      this.hasFocus = true;\n    }\n  }\n\n  /**\n   * 防抖时间变化监听\n   * @watch debounce\n   *\n   * @description\n   * 当`debounce`属性变化时，重新初始化防抖事件处理函数。\n   */\n  @Watch('debounce')\n  protected debounceChanged() {\n    this.valueChange = debounceEvent(this.valueChange, this.debounce);\n  }\n\n  /**\n   * 关闭编辑模式（私有方法）\n   *\n   * @description\n   * 1. 验证当前URL值\n   * 2. 发射inputInvalid事件\n   * 3. 如果验证通过则退出编辑模式\n   */\n  #closeEditing() {\n    this.isValid = this.validateUrl(this.value);\n    this.inputInvalid.emit(!this.isValid);\n\n    if (this.isValid) this.editing = false;\n  }\n\n  /**\n   * 开启编辑模式（私有方法）\n   *\n   * @description\n   * 1. 设置editing状态为true\n   * 2. 80ms延迟后聚焦输入框（确保DOM更新完成）\n   */\n  #startEditing() {\n    this.editing = true;\n    setTimeout(() => this.setFocus(), 80);\n  }\n\n  /** 输入框失焦处理函数 */\n  private blurHandler = () => {\n    this.hasFocus = false;\n\n    // 失焦时验证并关闭编辑模式\n    this.#closeEditing();\n  };\n\n  /** 输入框聚焦处理函数 */\n  private focusHandler = () => {\n    this.hasFocus = true;\n  };\n\n  /** 输入处理函数 */\n  private inputHandler = (ev: Event) => {\n    const input = ev.target as HTMLInputElement | null;\n    const oldValue = this.value;\n\n    if (input) {\n      this.value = input.value;\n    }\n\n    if (oldValue !== this.value) {\n      this.valueChange.emit(this.value);\n    }\n  };\n\n  /**\n   * URL验证方法\n   * @param {string} url - 待验证的URL字符串\n   * @returns {boolean} 验证结果\n   *\n   * @description\n   * 使用浏览器原生URL构造函数进行验证：\n   * 1. 空值返回true（视为有效）\n   * 2. 有效URL返回true\n   * 3. 无效URL返回false\n   */\n  private validateUrl(url: string): boolean {\n    if (!url) return true; // 空值视为有效\n\n    try {\n      new URL(url); // 使用浏览器原生验证\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}