{"version":3,"file":"zane-textarea.entry.esm.js","sources":["src/components/textarea/textarea.scss?tag=zane-textarea&encapsulation=shadow","src/components/textarea/textarea.tsx"],"sourcesContent":["@use '../../global/styles/common-input';\n\n:host {\n  --zane-textarea-height: 2.5rem;\n}\n\n.textarea {\n  position: relative;\n  align-items: flex-start;\n  height: 100%;\n\n  .input-native {\n    height: 100%;\n    min-height: var(--zane-textarea-height);\n    padding: v(--spacing-05);\n    resize: vertical;\n  }\n}\n\n.actions-container {\n  position: absolute;\n  top: 0.5rem;\n  right: 1rem;\n\n  zane-button {\n    --zane-button-height: 2rem;\n  }\n}\n\n:host([size='md']) .input-container {\n  height: 100%;\n  min-height: var(--zane-textarea-height);\n}\n","import type { InputComponentInterface } from '../../interfaces';\n\nimport {\n  Component,\n  ComponentInterface,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\n\nimport { debounceEvent, getComponentIndex } from '../../utils';\n\n/**\n * 多功能文本区域输入组件\n *\n * 提供完整的表单文本区域解决方案，支持响应式布局、表单验证、辅助文本提示和丰富的交互功能。\n * 集成了 ARIA 可访问性支持和多状态反馈设计，适用于复杂表单场景。\n *\n * @example\n * <!-- 基础用法 -->\n * <zane-textarea label=\"用户反馈\" placeholder=\"请输入您的建议\"></zane-textarea>\n *\n * <!-- 带验证状态 -->\n * <zane-textarea\n *   label=\"密码\"\n *   state=\"error\"\n *   invalid-text=\"密码长度不足8位\"\n * ></zane-textarea>\n */\n@Component({\n  shadow: true,\n  styleUrl: './textarea.scss',\n  tag: 'zane-textarea',\n})\nexport class Textarea implements ComponentInterface, InputComponentInterface {\n\n  /**\n   * 是否显示清除按钮\n   *\n   * 设置为 true 时，在输入框有内容时会显示清除按钮\n   *\n   * @prop clearable\n   * @type {boolean}\n   * @default false\n   */\n  @Prop() clearable = false;\n\n  /**\n   * ARIA 属性配置\n   *\n   * 存储动态收集的 ARIA 属性，用于增强组件可访问性。\n   * 组件加载时会自动收集宿主元素上的 aria-* 属性。\n   *\n   * @prop configAria\n   * @type {any}\n   * @mutable\n   * @reflect\n   */\n  @Prop({ mutable: true, reflect: true }) configAria: any = {};\n\n  /**\n   * 输入事件防抖时间（毫秒）\n   *\n   * 减少频繁输入事件的处理频率，优化性能\n   *\n   * @prop debounce\n   * @type {number}\n   * @default 300\n   */\n  @Prop() debounce = 300;\n\n  /**\n   * 禁用状态\n   *\n   * 设置为 true 时，组件不可交互且样式变灰\n   *\n   * @prop disabled\n   * @type {boolean}\n   * @default false\n   * @reflect\n   */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  /**\n   * 宿主元素引用\n   *\n   * 提供对组件宿主 DOM 元素的访问\n   *\n   * @prop elm\n   * @type {HTMLElement}\n   */\n  @Element() elm!: HTMLElement;\n\n  /**\n   * 尾部插槽内容状态\n   *\n   * 检测是否在 slot[name=\"end\"] 插槽中添加了内容\n   *\n   * @state endSlotHasContent\n   * @type {boolean}\n   */\n  @State() endSlotHasContent = false;\n\n  /**\n   * 组件全局唯一ID\n   *\n   * 用于表单关联和标识\n   *\n   * @type {string}\n   */\n  gid: string = getComponentIndex();\n\n  /**\n   * 焦点状态\n   *\n   * 跟踪文本域是否获得焦点\n   *\n   * @state hasFocus\n   * @type {boolean}\n   */\n  @State() hasFocus = false;\n\n  /**\n   * 辅助提示文本\n   *\n   * 显示在输入区域下方的帮助信息\n   *\n   * @prop helperText\n   * @type {string}\n   */\n  @Prop() helperText: string;\n\n  /**\n   * 行内布局模式\n   *\n   * 设置为 true 时，标签和输入框水平排列\n   *\n   * @prop inline\n   * @type {boolean}\n   * @default false\n   * @reflect\n   */\n  @Prop({ reflect: true }) inline: boolean = false;\n\n  /**\n   * 错误验证状态\n   *\n   * 设置为 true 时显示错误样式和错误文本\n   *\n   * @prop invalid\n   * @type {boolean}\n   * @default false\n   */\n  @Prop() invalid: boolean = false;\n\n  /**\n   * 错误提示文本\n   *\n   * 当 invalid 为 true 时显示的错误信息\n   *\n   * @prop invalidText\n   * @type {string}\n   */\n  @Prop() invalidText: string;\n\n  /**\n   * 输入框标签文本\n   *\n   * 显示在输入区域上方的描述标签\n   *\n   * @prop label\n   * @type {string}\n   */\n  @Prop() label: string;\n\n  /**\n   * 表单字段名称\n   *\n   * 用于表单提交的字段名，默认自动生成唯一值\n   *\n   * @prop name\n   * @type {string}\n   * @default `zane-input-${gid}`\n   */\n  @Prop() name: string = `zane-input-${this.gid}`;\n\n  /**\n   * 占位符文本\n   *\n   * 输入框为空时显示的提示文本\n   *\n   * @prop placeholder\n   * @type {string}\n   */\n  @Prop() placeholder: string;\n\n  /**\n   * 只读状态\n   *\n   * 设置为 true 时，内容不可编辑但可复制\n   *\n   * @prop readonly\n   * @type {boolean}\n   * @default false\n   * @reflect\n   */\n  @Prop({ reflect: true }) readonly: boolean = false;\n\n  /**\n   * 必填状态\n   *\n   * 设置为 true 时，标签旁显示红色星号标记\n   *\n   * @prop required\n   * @type {boolean}\n   * @default false\n   */\n  @Prop() required: boolean = false;\n\n  /**\n   * 尺寸规格\n   *\n   * 控制输入框的整体尺寸：\n   * - `lg`: 大尺寸（48px）\n   * - `md`: 中尺寸（40px，默认）\n   * - `sm`: 小尺寸（32px）\n   *\n   * @prop size\n   * @type {'lg' | 'md' | 'sm'}\n   * @default 'md'\n   * @reflect\n   */\n  @Prop({ reflect: true }) size: 'lg' | 'md' | 'sm' = 'md';\n\n  /**\n   * 骨架屏状态\n   *\n   * 设置为 true 时显示加载占位样式\n   *\n   * @prop skeleton\n   * @type {boolean}\n   * @default false\n   */\n  @Prop() skeleton: boolean = false;\n\n  /**\n   * 输入状态标识\n   *\n   * 控制输入框的视觉状态反馈：\n   * - `default`: 默认状态（无特殊样式）\n   * - `error`: 错误状态（红色边框）\n   * - `success`: 成功状态（绿色边框）\n   * - `warning`: 警告状态（黄色边框）\n   *\n   * @prop state\n   * @type {'default' | 'error' | 'success' | 'warning'}\n   * @default 'default'\n   * @reflect\n   */\n  @Prop({ reflect: true }) state: 'default' | 'error' | 'success' | 'warning' =\n    'default';\n\n  /**\n   * 输入值\n   *\n   * 文本域的当前值，支持双向绑定\n   *\n   * @prop value\n   * @type {string}\n   * @mutable\n   */\n  @Prop({ mutable: true }) value: string;\n\n  /**\n   * 警告状态\n   *\n   * 设置为 true 时显示警告样式和警告文本\n   *\n   * @prop warn\n   * @type {boolean}\n   * @default false\n   */\n  @Prop() warn: boolean = false;\n\n  /**\n   * 警告提示文本\n   *\n   * 当 warn 为 true 时显示的警告信息\n   *\n   * @prop warnText\n   * @type {string}\n   */\n  @Prop() warnText: string;\n\n  /**\n   * 操作按钮点击事件\n   *\n   * 当操作按钮（如清除按钮）被点击时触发\n   *\n   * @event zane-textarea--action-click\n   * @type {EventEmitter}\n   */\n  @Event({ eventName: 'zane-textarea--action-click' })\n  zaneActionClick: EventEmitter;\n\n  /**\n   * 失去焦点事件\n   *\n   * 当文本域失去焦点时触发\n   *\n   * @event zane-textarea--blur\n   * @type {EventEmitter}\n   */\n  @Event({ eventName: 'zane-textarea--blur' }) zaneBlur: EventEmitter;\n\n  /**\n   * 值变更事件（防抖）\n   *\n   * 当文本域值变化且经过防抖处理后触发\n   *\n   * @event zane-textarea--change\n   * @type {EventEmitter}\n   */\n  @Event({ eventName: 'zane-textarea--change' }) zaneChange: EventEmitter;\n\n  /**\n   * 获得焦点事件\n   *\n   * 当文本域获得焦点时触发\n   *\n   * @event zane-textarea--focus\n   * @type {EventEmitter}\n   */\n  @Event({ eventName: 'zane-textarea--focus' }) zaneFocus: EventEmitter;\n\n  /**\n   * 输入事件（实时）\n   *\n   * 当文本域值变化时实时触发\n   *\n   * @event zane-textarea--input\n   * @type {EventEmitter}\n   */\n  @Event({ eventName: 'zane-textarea--input' }) zaneInput: EventEmitter;\n\n  /**\n   * 原生文本域元素引用\n   *\n   * 用于直接操作文本域DOM\n   *\n   * @private\n   * @type {HTMLTextAreaElement}\n   */\n  private nativeElement?: HTMLTextAreaElement;\n\n  /**\n   * 标签索引值\n   *\n   * 存储从宿主元素提取的tabindex值\n   *\n   * @private\n   * @type {number | string}\n   */\n  private tabindex?: number | string;\n\n  /**\n   * 组件加载前生命周期\n   *\n   * 1. 提取宿主元素的 tabindex 属性\n   * 2. 收集所有 aria-* 属性\n   * 3. 检测 end 插槽内容\n   */\n  componentWillLoad() {\n    // If the ion-input has a tabindex attribute we get the value\n    // and pass it down to the native input, then remove it from the\n    // ion-input to avoid causing tabbing twice on the same element\n    if (this.elm.hasAttribute('tabindex')) {\n      const tabindex = this.elm.getAttribute('tabindex');\n      this.tabindex = tabindex === null ? undefined : tabindex;\n      this.elm.removeAttribute('tabindex');\n    }\n    this.elm.getAttributeNames().forEach((name: string) => {\n      if (name.includes('aria-')) {\n        this.configAria[name] = this.elm.getAttribute(name);\n        this.elm.removeAttribute(name);\n      }\n    });\n    this.endSlotHasContent = !!this.elm.querySelector('[slot=\"end\"]');\n  }\n\n  /**\n   * 组件连接后生命周期\n   *\n   * 初始化事件防抖设置\n   */\n  connectedCallback() {\n    this.debounceChanged();\n  }\n\n  /**\n   * 获取组件ID\n   *\n   * 公开方法，获取组件全局唯一ID\n   *\n   * @method getComponentId\n   * @returns {Promise<string>}\n   */\n  @Method()\n  async getComponentId() {\n    return this.gid;\n  }\n\n  /**\n   * 渲染标签\n   *\n   * 根据骨架屏状态渲染标签或占位符\n   *\n   * @private\n   * @returns {JSX.Element}\n   */\n  getLabel() {\n    return this.skeleton ? (\n      <div class=\"label skeleton\" />\n    ) : (\n      <label class=\"label\">\n        {this.required && <span class=\"required\">*</span>}\n        {this.label}\n      </label>\n    );\n  }\n\n  /**\n   * 主渲染方法\n   *\n   * 组织组件整体结构：\n   * 1. 标签区域\n   * 2. 输入区域\n   * 3. 辅助信息区域\n   *\n   * @returns {JSX.Element}\n   */\n  render() {\n    return (\n      <Host\n        has-focus={this.hasFocus}\n        has-value={this.hasValue()}\n        invalid={this.invalid}\n        warn={this.warn}\n      >\n        <div class={{ 'form-control': true, inline: this.inline }}>\n          {this.label && this.getLabel()}\n          <div class=\"field\">\n            {this.skeleton ? (\n              <div class=\"input-container-skeleton\" />\n            ) : (\n              this.renderInput()\n            )}\n          </div>\n          {this.renderHelper()}\n        </div>\n      </Host>\n    );\n  }\n\n  /**\n   * 渲染辅助信息\n   *\n   * 根据状态渲染不同类型的辅助文本：\n   * 1. 错误状态 → 红色文本\n   * 2. 警告状态 → 黄色文本\n   * 3. 普通状态 → 灰色辅助文本\n   *\n   * @private\n   * @returns {JSX.Element | null}\n   */\n  renderHelper() {\n    if (this.invalid)\n      return <div class=\"helper invalid\">{this.invalidText}</div>;\n    else if (this.warn) return <div class=\"helper warn\">{this.warnText}</div>;\n    else if (this.helperText || this.helperText === '')\n      return <div class=\"helper text\">{this.helperText}</div>;\n  }\n\n  /**\n   * 渲染输入区域\n   *\n   * 包含文本域、操作按钮和尾部插槽\n   *\n   * @private\n   * @returns {JSX.Element}\n   */\n  renderInput() {\n    return (\n      <div\n        class={{\n          disabled: this.disabled,\n          'end-slot-has-content': this.endSlotHasContent,\n          'has-focus': this.hasFocus,\n          'input-container': true,\n          readonly: this.readonly,\n          textarea: true,\n        }}\n      >\n        <textarea\n          class=\"input input-native\"\n          disabled={this.disabled}\n          name={this.name}\n          onBlur={this.blurHandler}\n          onFocus={this.focusHandler}\n          onInput={this.inputHandler}\n          onKeyDown={this.keyDownHandler}\n          placeholder={this.placeholder}\n          readonly={this.readonly}\n          ref={(input) => (this.nativeElement = input)}\n          required={this.required}\n          rows={4}\n          tabindex={this.tabindex}\n          value={this.value}\n          {...this.configAria}\n        />\n\n        <div class={'actions-container'}>\n          {this.clearable && this.hasValue() && (\n            <zane-button\n              class=\"clear clear-action\"\n              color={'secondary'}\n              icon=\"close\"\n              onClick={this.clearInput}\n              size={this.size}\n              variant=\"ghost\"\n            />\n          )}\n        </div>\n\n        <div class=\"slot-container end\">\n          <slot name=\"end\" />\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * 移除焦点\n   *\n   * 公开方法，使文本域失去焦点\n   *\n   * @method setBlur\n   * @returns {Promise<void>}\n   */\n  @Method()\n  async setBlur() {\n    if (this.nativeElement) {\n      this.nativeElement.blur();\n      this.hasFocus = false;\n    }\n  }\n\n  /**\n   * 设置焦点\n   *\n   * 公开方法，使文本域获得焦点\n   *\n   * @method setFocus\n   * @returns {Promise<void>}\n   */\n  @Method()\n  async setFocus() {\n    if (this.nativeElement) {\n      this.nativeElement.focus();\n      this.hasFocus = true;\n    }\n  }\n\n  /**\n   * 防抖时间变更监听\n   *\n   * 当 debounce 属性变化时更新防抖设置\n   *\n   * @watch debounce\n   */\n  @Watch('debounce')\n  protected debounceChanged() {\n    this.zaneChange = debounceEvent(this.zaneChange, this.debounce);\n  }\n\n  /**\n   * 失去焦点处理\n   *\n   * 更新焦点状态并触发 zaneBlur 事件\n   *\n   * @private\n   * @param {FocusEvent} ev\n   */\n  private blurHandler = (ev: FocusEvent) => {\n    this.hasFocus = false;\n    this.zaneBlur.emit(ev);\n  };\n\n  /**\n   * 清除输入内容\n   *\n   * 清空文本域值并触发输入事件\n   *\n   * @private\n   * @param {Event} evt\n   */\n  private clearInput = (evt: Event) => {\n    this.nativeElement.value = '';\n    this.inputHandler(evt);\n  };\n\n  /**\n   * 获得焦点处理\n   *\n   * 更新焦点状态并触发 zaneFocus 事件\n   *\n   * @private\n   * @param {FocusEvent} ev\n   */\n  private focusHandler = (ev: FocusEvent) => {\n    this.hasFocus = true;\n    this.zaneFocus.emit(ev);\n  };\n\n  /**\n   * 获取当前值\n   *\n   * 返回文本域的当前字符串值\n   *\n   * @private\n   * @returns {string}\n   */\n  private getValue(): string {\n    return (this.value || '').toString();\n  }\n\n  /**\n   * 获取当前值\n   *\n   * 返回文本域的当前字符串值\n   *\n   * @private\n   * @returns {string}\n   */\n  private hasValue(): boolean {\n    return this.getValue().length > 0;\n  }\n\n  /**\n   * 输入处理\n   *\n   * 1. 更新 value 属性\n   * 2. 触发实时输入事件\n   * 3. 触发防抖后的变更事件\n   *\n   * @private\n   * @param {Event} ev\n   */\n  private inputHandler = (ev: Event) => {\n    const input = ev.target as HTMLInputElement | null;\n    if (input) {\n      this.value = input.value || '';\n    }\n    this.zaneInput.emit(ev as KeyboardEvent);\n    this.zaneChange.emit(ev as KeyboardEvent);\n  };\n\n  /**\n   * 按键处理\n   *\n   * 监听 ESC 键触发清除操作\n   *\n   * @private\n   * @param {KeyboardEvent} ev\n   */\n  private keyDownHandler = (ev: KeyboardEvent) => {\n    if (ev.key === 'Escape' && this.clearable) {\n      this.clearInput(ev);\n    }\n  };\n}\n"],"names":[],"mappings":"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"}