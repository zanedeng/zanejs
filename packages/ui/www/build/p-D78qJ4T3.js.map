{"version":3,"file":"p-D78qJ4T3.js","sources":["src/utils/createCacheFetch.ts"],"sourcesContent":["interface CacheFetchOptions {\n  /**\n   * 是否启用缓存\n   * @default true\n   */\n  cacheEnabled?: boolean;\n  /**\n   * 凭据模式\n   * @default 'same-origin'\n   */\n  credentials?: RequestCredentials;\n  /**\n   * 请求模式\n   * @default 'cors'\n   */\n  mode?: RequestMode;\n  /**\n   * 缓存策略\n   * @default 'stale-while-revalidate'\n   */\n  strategy?: 'cache-first' | 'network-first' | 'stale-while-revalidate';\n}\n\n/**\n * 创建带缓存的Fetch函数\n * @param cacheName - 缓存名称\n * @param options - 配置选项\n * @returns 返回带缓存的Fetch函数\n *\n * @example\n * const cachedFetch = await createCacheFetch('my-app-cache');\n * const data = await cachedFetch('https://api.example.com/data');\n */\nexport async function createCacheFetch(\n  cacheName: string,\n  options: CacheFetchOptions = {},\n): Promise<(url: string) => Promise<string>> {\n  let cache: Cache | undefined;\n  const {\n    cacheEnabled = true,\n    credentials = 'same-origin',\n    mode = 'cors',\n    strategy = 'stale-while-revalidate',\n  } = options;\n\n  // 尝试打开缓存\n  if (cacheEnabled && 'caches' in window) {\n    try {\n      cache = await caches.open(cacheName);\n    } catch (error) {\n      console.warn(`Failed to open cache '${cacheName}':`, error);\n    }\n  }\n\n  return async function cachedFetch(url: string): Promise<string> {\n    const request = new Request(url);\n    let response: Response | undefined;\n    let shouldUpdateCache = false;\n\n    // 尝试从缓存获取\n    if (cache && strategy !== 'network-first') {\n      response = await cache.match(request);\n      if (response && strategy === 'stale-while-revalidate') {\n        shouldUpdateCache = true; // 后台更新缓存\n      }\n    }\n\n    // 需要网络请求的情况\n    if (!response || shouldUpdateCache) {\n      try {\n        const networkResponse = await fetch(request.url, {\n          credentials:\n            new URL(request.url).origin === window.location.origin\n              ? 'same-origin'\n              : credentials,\n          method: 'GET',\n          mode:\n            new URL(request.url).origin === window.location.origin\n              ? 'same-origin'\n              : mode,\n        });\n\n        if (networkResponse.ok) {\n          const responseClone = networkResponse.clone();\n          const text = await networkResponse.text();\n\n          // 更新缓存\n          if (\n            cache &&\n            cacheEnabled &&\n            // eslint-disable-next-line n/prefer-global/process\n            process.env.THIRD_PARTY_ASSETS === 'REMOTE'\n          ) {\n            if (shouldUpdateCache) {\n              // 后台更新\n              cache.put(request, responseClone).catch((error) => {\n                console.warn('Failed to update cache:', error);\n              });\n            } else {\n              // 立即更新\n              await cache.put(request, responseClone);\n            }\n          }\n\n          if (!shouldUpdateCache) {\n            return text;\n          }\n        } else if (!response) {\n          throw new Error(\n            `Network request failed with status ${networkResponse.status}`,\n          );\n        }\n      } catch (error) {\n        if (!response) {\n          throw new Error(\n            `Fetch failed: ${error instanceof Error ? error.message : String(error)}`,\n          );\n        }\n        console.warn('Network request failed, using cached response:', error);\n      }\n    }\n\n    if (!response) {\n      throw new Error('No response available from cache or network');\n    }\n\n    return response.text();\n  };\n}\n\n/**\n * 清除指定缓存\n * @param cacheName - 缓存名称\n */\nexport async function clearCache(cacheName: string): Promise<void> {\n  try {\n    await caches.delete(cacheName);\n  } catch (error) {\n    console.warn(`Failed to delete cache '${cacheName}':`, error);\n  }\n}\n"],"names":[],"mappings":"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"}