async function e(e,t={}){let a;const{cacheEnabled:r=true,credentials:i="same-origin",mode:o="cors",strategy:n="stale-while-revalidate"}=t;if(r&&"caches"in window){try{a=await caches.open(e)}catch(t){console.warn(`Failed to open cache '${e}':`,t)}}return async function e(t){const c=new Request(t);let s;let w=false;if(a&&n!=="network-first"){s=await a.match(c);if(s&&n==="stale-while-revalidate"){w=true}}if(!s||w){try{const e=await fetch(c.url,{credentials:new URL(c.url).origin===window.location.origin?"same-origin":i,method:"GET",mode:new URL(c.url).origin===window.location.origin?"same-origin":o});if(e.ok){const t=e.clone();const i=await e.text();if(a&&r&&"REMOTE"==="REMOTE"){if(w){a.put(c,t).catch((e=>{console.warn("Failed to update cache:",e)}))}else{await a.put(c,t)}}if(!w){return i}}else if(!s){throw new Error(`Network request failed with status ${e.status}`)}}catch(e){if(!s){throw new Error(`Fetch failed: ${e instanceof Error?e.message:String(e)}`)}console.warn("Network request failed, using cached response:",e)}}if(!s){throw new Error("No response available from cache or network")}return s.text()}}export{e as c};
//# sourceMappingURL=p-D78qJ4T3.js.map