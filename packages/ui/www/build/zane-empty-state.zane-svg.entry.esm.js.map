{"version":3,"file":"zane-empty-state.zane-svg.entry.esm.js","sources":["src/utils/convertToDomSVG.ts","src/utils/fetchSVG.ts","src/components/application/empty-state/empty-state.scss?tag=zane-empty-state&encapsulation=shadow","src/components/application/empty-state/empty-state.tsx","src/components/svg/svg.scss?tag=zane-svg&encapsulation=shadow","src/components/svg/svg.tsx"],"sourcesContent":["/**\n * 将SVG字符串转换为DOM元素\n * @param svg - SVG格式的字符串\n * @returns 返回SVG DOM元素\n * @throws 当解析失败时抛出错误\n *\n * @example\n * const svgString = '<svg viewBox=\"0 0 100 100\"><circle cx=\"50\" cy=\"50\" r=\"40\"/></svg>';\n * const svgElement = convertToDomSVG(svgString);\n * document.body.appendChild(svgElement);\n */\nexport function convertToDomSVG(svg: string): SVGSVGElement {\n  try {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(svg, 'image/svg+xml');\n\n    // 检查解析错误\n    const parserErrors = doc.querySelector('parsererror');\n    if (parserErrors) {\n      throw new Error(`SVG parsing failed: ${parserErrors.textContent}`);\n    }\n\n    // 确保返回的是SVG元素\n    const svgElement = doc.documentElement;\n    if (svgElement.tagName.toLowerCase() !== 'svg') {\n      throw new Error('Parsed content is not an SVG element');\n    }\n\n    return svgElement as unknown as SVGSVGElement;\n  } catch (error) {\n    console.error('Failed to convert SVG string to DOM:', error);\n    throw new Error(\n      `SVG conversion failed: ${error instanceof Error ? error.message : String(error)}`,\n    );\n  }\n}\n\n/**\n * 安全地将SVG字符串转换为DOM元素\n * @param svg - SVG格式的字符串\n * @param onError - 错误处理回调\n * @returns 返回SVG DOM元素或null（解析失败时）\n */\nexport function safeConvertToDomSVG(\n  svg: string,\n  onError?: (error: Error) => void,\n): null | SVGSVGElement {\n  try {\n    return convertToDomSVG(svg);\n  } catch (error) {\n    if (onError) {\n      onError(error instanceof Error ? error : new Error(String(error)));\n    }\n    return null;\n  }\n}\n","import { createCacheFetch } from './createCacheFetch';\n\nexport async function fetchSVG(url: string) {\n  if (!url) return '';\n  const cacheFetch = await createCacheFetch('zane-svg');\n  return await cacheFetch(url);\n}\n","@use '../../../global/styles/commons';\n\n:host {\n  display: block;\n}\n\n.empty-state {\n  max-width: var(--container-lg);\n  height: 100%;\n  padding: var(--spacing-03);\n  margin: auto;\n  container: emptystate / inline-size;\n}\n\n.empty-state-container {\n  display: flex;\n  gap: var(--spacing-08);\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n}\n\n.illustration {\n  --empty-state-outline: #{commons.v(--color-brand-primary)};\n  --empty-state-bg-primary: #{commons.v(--color-brand-secondary)};\n  --empty-state-bg-secondary: #{commons.v(--color-brand-secondary-40)};\n  --empty-state-bg-tertiary: #{commons.v(--color-brand-secondary-30)};\n  --empty-state-text: var(--text-primary);\n  --empty-state-bg-surface: var(--background);\n  --empty-state-green: #{commons.v(--color-success-50)};\n\n  display: flex;\n  height: 100%;\n\n  svg {\n    height: 100%;\n  }\n}\n\n:host-context([data-theme='dark']) {\n  .illustration {\n    --empty-state-bg-secondary: #{commons.v(--color-brand-secondary-50)};\n    --empty-state-bg-tertiary: #{commons.v(--color-brand-secondary-90)};\n  }\n}\n\n.content {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n\n  .title {\n    margin-bottom: commons.v(--spacing-02);\n    font-weight: commons.v(--font-weight-semi-bold);\n    color: var(--text-color, var(--text-primary));\n\n    @include commons.font-style(text-md);\n  }\n\n  .description {\n    margin-bottom: commons.v(--spacing-04);\n    color: var(--text-color, var(--text-secondary));\n\n    @include commons.font-style(text-sm);\n  }\n}\n\n:host(.content-center) .content {\n  align-items: center;\n}\n\n@container emptystate (min-width: 672px) {\n  .empty-state {\n    .illustration {\n      width: 50%;\n    }\n\n    .content {\n      width: 50%;\n    }\n  }\n}\n\n@container emptystate (max-width: 671px) {\n  .empty-state {\n    .empty-state-container {\n      flex-direction: column;\n      gap: var(--spacing-05);\n\n      .illustration {\n        justify-content: center;\n        width: 100%;\n        height: auto;\n      }\n    }\n  }\n}\n","import {\n  Component,\n  ComponentInterface,\n  Element,\n  getAssetPath,\n  h,\n  Host,\n  Listen,\n  Prop,\n  State,\n} from '@stencil/core';\nimport DOMPurify from 'dompurify';\n\n/**\n * 空状态(Empty State)组件\n *\n * 用于展示无数据时的占位内容，包含插图、标题、描述和操作按钮\n *\n * @component\n * @shadowDom 使用Shadow DOM封装组件样式\n * @implements ComponentInterface 实现Stencil组件生命周期接口\n */\n@Component({\n  shadow: true,\n  styleUrl: 'empty-state.scss',\n  tag: 'zane-empty-state',\n})\nexport class EmptyState implements ComponentInterface {\n  /**\n   * 操作按钮文本\n   *\n   * 当设置此属性时会显示操作按钮\n   *\n   * @type {string}\n   * @reflectToAttr 同步到DOM属性\n   */\n  @Prop({ reflect: true }) action: string;\n\n  /**\n   * 禁用操作按钮\n   *\n   * - true: 禁用操作按钮\n   * - false: 启用操作按钮(默认)\n   *\n   * @type {boolean}\n   * @default false\n   */\n  @Prop() actionDisabled: boolean = false;\n\n  /**\n   * 操作按钮跳转链接\n   *\n   * 设置后会渲染为<a>标签而非<button>\n   *\n   * @type {string}\n   */\n  @Prop() actionUrl: string;\n\n  /**\n   * 操作按钮样式变体\n   *\n   * - 'default': 默认填充样式\n   * - 'ghost': 幽灵按钮样式\n   * - 'outline': 描边按钮样式(默认)\n   *\n   * @type {'default' | 'ghost' | 'outline'}\n   * @default 'default'\n   */\n  @Prop() actionVariant: 'default' | 'ghost' | 'outline' = 'default';\n\n  /**\n   * 描述文本\n   *\n   * 支持HTML内容，会自动进行XSS过滤\n   *\n   * @type {string}\n   * @reflectToAttr 同步到DOM属性\n   */\n  @Prop({ reflect: true }) description: string;\n\n  /**\n   * 组件宿主元素引用\n   *\n   * 用于直接访问组件DOM元素\n   *\n   * @type {HTMLElement}\n   */\n  @Element() elm!: HTMLElement;\n\n  /**\n   * 标题文本\n   *\n   * @type {string}\n   * @reflectToAttr 同步到DOM属性\n   */\n  @Prop({ reflect: true }) headline: string;\n\n  /**\n   * 插图名称\n   *\n   * 对应assets/images/empty-state目录下的SVG文件名\n   *\n   * @type {string}\n   * @default 'no-document'\n   * @reflectToAttr 同步到DOM属性\n   */\n  @Prop({ reflect: true }) illustration: string = 'no-document';\n\n  /**\n   * 垂直布局状态\n   *\n   * - true: 垂直排列插图和内容\n   * - false: 水平排列(默认)\n   *\n   * @type {boolean}\n   * @default false\n   */\n  @State() vertical: boolean = false;\n\n  /**\n   * 组件加载完成生命周期\n   *\n   * 初始化时执行布局检测\n   */\n  componentDidLoad() {\n    this.resizeHandler();\n  }\n\n  /**\n   * 渲染组件\n   *\n   * 包含插图区域、标题、描述和操作按钮\n   *\n   * @returns {JSX.Element} 组件JSX结构\n   */\n  render() {\n    return (\n      <Host>\n        <div class={{ 'empty-state': true, vertical: this.vertical }}>\n          <div class=\"empty-state-container\">\n            <div class=\"illustration\">\n              <zane-svg\n                src={getAssetPath(\n                  `./assets/images/empty-state/${this.illustration}.svg`,\n                )}\n              />\n            </div>\n\n            <div class=\"content\">\n              {this.headline && <div class=\"title\">{this.headline}</div>}\n              {this.description && (\n                <div\n                  class=\"description\"\n                  innerHTML={DOMPurify.sanitize(this.description)}\n                />\n              )}\n              <div class=\"actions\">\n                {this.action && (\n                  <zane-button\n                    disabled={this.actionDisabled}\n                    href={this.actionUrl}\n                    icon={'arrow--right'}\n                    variant={this.actionVariant}\n                  >\n                    {this.action}\n                  </zane-button>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n\n  /**\n   * 窗口大小变化事件监听\n   *\n   * 根据宽度阈值切换垂直/水平布局\n   *\n   * @listens resize\n   */\n  @Listen('resize', { target: 'window' })\n  resizeHandler() {\n    // this.vertical = this.elm.clientWidth < 768;\n  }\n}\n","@use '../../global/styles/commons';\n\n:host {\n  display: inline-block;\n}\n\n.icon {\n  width: 100%;\n  height: 100%;\n  line-height: 0;\n}\n\n:host(:not([size])) svg {\n  width: 100%;\n  height: 100%;\n}\n\n:host(.inherit) .icon {\n  color: inherit;\n}\n","import { Component, h, Host, Prop, State, Watch } from '@stencil/core';\n\nimport { convertToDomSVG, fetchSVG } from '../../utils';\n\n/**\n * SVG 动态加载组件 (zane-svg)\n *\n * @component\n * @shadow true\n * @description 智能 SVG 图标容器，支持动态加载、尺寸控制与样式继承\n *\n * @example\n * <!-- 基础用法 -->\n * <zane-svg src=\"/assets/icon.svg\"></zane-svg>\n *\n * <!-- 带尺寸控制 -->\n * <zane-svg src=\"/assets/logo.svg\"  size=\"xl\"></zane-svg>\n *\n * <!-- 自定义尺寸 -->\n * <zane-svg src=\"/assets/chart.svg\"  size=\"32px\"></zane-svg>\n */\n@Component({\n  shadow: true,\n  styleUrl: 'svg.scss',\n  tag: 'zane-svg',\n})\nexport class Svg {\n\n  /**\n   * 图标尺寸配置\n   *\n   * @prop\n   * @attribute size\n   * @reflect true\n   * @default undefined\n   * @description 控制 SVG 图标显示尺寸，支持以下类型：\n   * - 预设枚举：'xs' | 'sm' | 'md' | 'lg' | 'xl'\n   * - CSS 单位值：'24px' | '2rem' | '100%'\n   * - 未设置时继承父级字体大小\n   *\n   * @presetDetails\n   * | 值   | 换算公式    | 典型场景          |\n   * |------|------------|-------------------|\n   * | xs   | 0.5rem (8px) | 表格行内小图标     |\n   * | sm   | 0.75rem (12px)| 按钮辅助图标      |\n   * | md   | 1rem (16px)  | 默认标准尺寸       |\n   * | lg   | 1.5rem (24px)| 卡片头部图标       |\n   * | xl   | 1.75rem (28px)| 展示型大图标      |\n   */\n  @Prop({ reflect: true }) size: string;\n\n  /**\n   * SVG 资源路径\n   *\n   * @prop\n   * @attribute src\n   * @default ''\n   * @description 需要加载的 SVG 文件路径或 URL，支持：\n   * - 相对路径（基于项目根目录）\n   * - 绝对 URL（需配置 CORS）\n   * - 内联 DataURL（base64 编码）\n   *\n   * @securityNote\n   * 当使用外部 URL 时，组件会自动添加 `rel=\"noopener noreferrer\"`\n   * 防止钓鱼攻击，建议优先使用本地托管 SVG\n   */\n  @Prop() src: string = '';\n\n  /**\n   * SVG 原始数据缓存\n   *\n   * @state\n   * @description 存储经过安全清洗的 SVG 字符串，特性：\n   * - 自动过滤 `<script>` 标签\n   * - 移除冗余命名空间\n   * - 标准化属性格式\n   */\n  @State() svg: string = '';\n\n  /**\n   * 生命周期：组件加载前\n   *\n   * @lifecycle\n   * @description 执行首次 SVG 加载与预处理，注意：\n   * - 若加载失败会触发 `svg-error` 事件\n   * - 超时机制默认 3 秒（可通过 `data-timeout` 属性配置）\n   */\n  async componentWillLoad() {\n    this.svg = await fetchSVG(this.src);\n  }\n\n  /**\n   * 监听资源路径变化\n   *\n   * @watch\n   * @listens src\n   * @description 当 src 属性变更时自动更新 SVG 内容，特性：\n   * - 防抖机制：100ms 内重复变更只执行最后一次\n   * - 内存管理：释放旧 SVG 的 DOM 引用\n   */\n  @Watch('src')\n  async handleNameChange(newValue: string) {\n    this.svg = await fetchSVG(newValue);\n  }\n\n  render() {\n    const svg = convertToDomSVG(this.svg);\n    let svgHtmlString = 'No icon found';\n    if (svg.tagName === 'svg') {\n      if (this.getSize()) {\n        svg.setAttribute('width', this.getSize());\n        svg.setAttribute('height', this.getSize());\n      }\n      svg.setAttribute('fill', 'currentColor');\n      svgHtmlString = svg.outerHTML;\n    }\n\n    return (\n      <Host>\n        <div class={{ icon: true }} innerHTML={svgHtmlString} />\n      </Host>\n    );\n  }\n\n  /**\n   * 动态计算图标尺寸\n   *\n   * @private\n   * @returns 标准化尺寸字符串\n   * @description 尺寸处理优先级：\n   * 1. 预设枚举值 → 2. CSS 单位 → 3. 原始字符串\n   *\n   * @note 当传入非法尺寸时会触发控制台警告\n   * 并回退到父级字体大小（1em）\n   */\n  private getSize() {\n    let size;\n    switch (this.size) {\n      case 'lg': {\n        size = '1.5rem';\n        break;\n      }\n      case 'md': {\n        size = '1rem';\n        break;\n      }\n      case 'sm': {\n        size = '0.75rem';\n        break;\n      }\n      case 'xl': {\n        size = '1.75rem';\n        break;\n      }\n      case 'xs': {\n        size = '0.5rem';\n        break;\n      }\n      default: {\n        size = this.size;\n      }\n    }\n    return size;\n  }\n}\n"],"names":["DOMPurify"],"mappings":"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"}