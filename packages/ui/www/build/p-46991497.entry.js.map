{"version":3,"names":["timePickerCss","TimePicker","constructor","hostRef","this","configAria","disabled","gid","getComponentIndex","hasFocus","inline","name","readonly","size","value","blurHandler","ev","zaneBlur","emit","clearInput","evt","nativeElement","inputHandler","focusHandler","zaneFocus","input","target","oldValue","zaneInput","zaneChange","keyDownHandler","key","componentWillLoad","elm","hasAttribute","tabindex","getAttribute","undefined","removeAttribute","getAttributeNames","forEach","includes","getComponentId","render","h","Host","hasValue","class","onBlur","onFocus","onInput","onKeyDown","readOnly","ref","type","color","icon","setTimeout","showPicker","variant","setBlur","blur","setFocus","focus","getValue","toString","length"],"sources":["src/components/time-picker/time-picker.scss?tag=zane-time-picker&encapsulation=shadow","src/components/time-picker/time-picker.tsx"],"sourcesContent":["@use '../../global/styles/common-input';\n\ninput[type='time']::-webkit-inner-spin-button,\ninput[type='time']::-webkit-calendar-picker-indicator {\n  display: none;\n  appearance: none;\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n} from '@stencil/core';\n\nimport { getComponentIndex } from '../../utils';\n\n/**\n * 时间选择器组件\n */\n@Component({\n  shadow: true,\n  styleUrl: 'time-picker.scss',\n  tag: 'zane-time-picker',\n})\nexport class TimePicker {\n  /**\n   * 动态收集的ARIA属性配置对象\n   * @remarks\n   * 在组件加载时会自动收集宿主元素上所有以\"aria-\"开头的属性，\n   * 存储到该对象后从宿主元素移除，避免重复渲染问题\n   */\n  @Prop({ mutable: true, reflect: true }) configAria: any = {};\n\n  /** 禁用状态标志（会反映到DOM属性） */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  /** 宿主元素引用 */\n  @Element() elm!: HTMLElement;\n\n  /** 组件实例唯一标识符 */\n  gid: string = getComponentIndex();\n\n  @State() hasFocus = false;\n\n  @Prop({ reflect: true }) inline: boolean = false;\n\n  /**\n   * 自动生成的表单字段名称\n   * @example\n   * 当gid为\"123\"时，name值为\"zane-input-123\"\n   */\n  @Prop() name: string = `zane-input-${this.gid}`;\n\n  @Prop() placeholder: string;\n\n  @Prop({ reflect: true }) readonly: boolean = false;\n\n  @Prop({ reflect: true }) size: 'lg' | 'md' | 'sm' = 'md';\n\n  /**\n   * 时间值绑定\n   * @remarks\n   * 支持三种格式：\n   * - null: 未选择状态\n   * - number: Unix时间戳（毫秒级）\n   * - string: ISO格式时间字符串\n   */\n  @Prop({ mutable: true }) value?: null | number | string = '';\n\n  /**\n   * 当时间选择器失去焦点时触发\n   * @event zane-time-picker--blur\n   * @type {EventEmitter<FocusEvent>}\n   */\n  @Event({ eventName: 'zane-time-picker--blur' }) zaneBlur: EventEmitter;\n\n  /**\n   * 当时间选择器的值发生改变时触发（仅当值实际变化）\n   * @event zane-time-picker--change\n   * @type {EventEmitter<KeyboardEvent>}\n   */\n  @Event({ eventName: 'zane-time-picker--change' }) zaneChange: EventEmitter;\n\n  /**\n   * 当时间选择器获得焦点时触发\n   * @event zane-time-picker--focus\n   * @type {EventEmitter<FocusEvent>}\n   */\n  @Event({ eventName: 'zane-time-picker--focus' }) zaneFocus: EventEmitter;\n\n  /**\n   * 当时间选择器输入时触发（每次输入都会触发）\n   * @event zane-time-picker--input\n   * @type {EventEmitter<KeyboardEvent>}\n   */\n  @Event({ eventName: 'zane-time-picker--input' }) zaneInput: EventEmitter;\n\n  /** 内部使用的原生输入元素引用 */\n  private nativeElement?: HTMLInputElement;\n\n  /** 从宿主元素传递下来的tabindex值 */\n  private tabindex?: number | string;\n\n  /**\n   * 组件即将加载的生命周期钩子\n   * @remarks\n   * 在此阶段，组件会处理宿主元素上的`tabindex`属性和所有`aria-*`属性：\n   * 1. 提取`tabindex`值并存储，然后从宿主元素移除，避免重复响应\n   * 2. 收集所有`aria-*`属性到`configAria`对象，然后从宿主元素移除\n   */\n  componentWillLoad() {\n    // If the ion-input has a tabindex attribute we get the value\n    // and pass it down to the native input, then remove it from the\n    // zane-input to avoid causing tabbing twice on the same element\n    if (this.elm.hasAttribute('tabindex')) {\n      const tabindex = this.elm.getAttribute('tabindex');\n      this.tabindex = tabindex === null ? undefined : tabindex;\n      this.elm.removeAttribute('tabindex');\n    }\n    this.elm.getAttributeNames().forEach((name: string) => {\n      if (name.includes('aria-')) {\n        this.configAria[name] = this.elm.getAttribute(name);\n        this.elm.removeAttribute(name);\n      }\n    });\n  }\n\n  /**\n   * 获取组件实例的唯一标识符\n   * @method\n   * @async\n   * @returns {Promise<string>} 组件实例ID\n   */\n  @Method()\n  async getComponentId() {\n    return this.gid;\n  }\n\n  /**\n   * 渲染组件\n   * @returns 组件虚拟DOM树\n   */\n  render() {\n    return (\n      <Host has-focus={this.hasFocus} has-value={this.hasValue()}>\n        <div\n          class={{\n            disabled: this.disabled,\n            'has-focus': this.hasFocus,\n            'input-container': true,\n          }}\n        >\n          <input\n            class=\"input input-native\"\n            disabled={this.disabled}\n            onBlur={this.blurHandler}\n            onFocus={this.focusHandler}\n            onInput={this.inputHandler}\n            onKeyDown={this.keyDownHandler}\n            readOnly={this.readonly}\n            ref={(input) => (this.nativeElement = input)}\n            tabindex={this.tabindex}\n            type=\"time\"\n          />\n\n          <zane-button\n            class=\"input-action\"\n            color={'secondary'}\n            disabled={this.disabled}\n            icon={'time'}\n            onZane-button--click={() => {\n              setTimeout(() => {\n                this.nativeElement.showPicker();\n              });\n            }}\n            size={this.size}\n            variant=\"ghost.simple\"\n          ></zane-button>\n        </div>\n      </Host>\n    );\n  }\n\n  /**\n   * 主动使时间选择器失去焦点\n   * @method\n   * @async\n   */\n  @Method()\n  async setBlur() {\n    if (this.nativeElement) {\n      this.nativeElement.blur();\n      this.hasFocus = false;\n    }\n  }\n\n  /**\n   * 主动使时间选择器获得焦点\n   * @method\n   * @async\n   */\n  @Method()\n  async setFocus() {\n    if (this.nativeElement) {\n      this.nativeElement.focus();\n      this.hasFocus = true;\n    }\n  }\n\n  /** 处理失去焦点事件 */\n  private blurHandler = (ev: FocusEvent) => {\n    this.hasFocus = false;\n    this.zaneBlur.emit(ev);\n  };\n\n  /**\n   * 清空当前输入值\n   * @param {Event} evt - 触发事件\n   */\n  private clearInput = (evt: Event) => {\n    this.nativeElement.value = '';\n    this.inputHandler(evt);\n  };\n\n  /** 处理获得焦点事件 */\n  private focusHandler = (ev: FocusEvent) => {\n    this.hasFocus = true;\n    this.zaneFocus.emit(ev);\n  };\n\n  /**\n   * 获取当前值的字符串表示\n   * @private\n   * @returns {string} 当前值的字符串形式\n   */\n  private getValue(): string {\n    return (this.value || '').toString();\n  }\n\n  /**\n   * 判断当前是否有值（非空）\n   * @private\n   * @returns {boolean} 是否有值\n   */\n  private hasValue(): boolean {\n    return this.getValue().length > 0;\n  }\n\n  /**\n   * 处理输入事件\n   * @param {Event} ev - 输入事件对象\n   */\n  private inputHandler = (ev: Event) => {\n    const input = ev.target as HTMLInputElement | null;\n    const oldValue = this.value;\n    if (input) {\n      this.value = input.value;\n    }\n    this.zaneInput.emit(ev as KeyboardEvent);\n    if (oldValue !== this.value) {\n      this.zaneChange.emit(ev as KeyboardEvent);\n    }\n  };\n\n  /**\n   * 处理键盘按下事件\n   * @param {KeyboardEvent} ev - 键盘事件对象\n   * @remarks\n   * 当前仅处理ESC键：按下ESC键时清空输入\n   */\n  private keyDownHandler = (ev: KeyboardEvent) => {\n    if (ev.key === 'Escape') {\n      this.clearInput(ev);\n    }\n  };\n}\n"],"mappings":"oJAAA,MAAMA,EAAgB,s6Q,MCsBTC,EAAU,MALvB,WAAAC,CAAAC,G,8MAY0CC,KAAUC,WAAQ,GAGjCD,KAAQE,SAAY,MAM7CF,KAAGG,IAAWC,IAELJ,KAAQK,SAAG,MAEKL,KAAMM,OAAY,MAOnCN,KAAAO,KAAe,cAAcP,KAAKG,MAIjBH,KAAQQ,SAAY,MAEpBR,KAAIS,KAAuB,KAU3BT,KAAKU,MAA4B,GA+IlDV,KAAAW,YAAeC,IACrBZ,KAAKK,SAAW,MAChBL,KAAKa,SAASC,KAAKF,EAAG,EAOhBZ,KAAAe,WAAcC,IACpBhB,KAAKiB,cAAcP,MAAQ,GAC3BV,KAAKkB,aAAaF,EAAI,EAIhBhB,KAAAmB,aAAgBP,IACtBZ,KAAKK,SAAW,KAChBL,KAAKoB,UAAUN,KAAKF,EAAG,EAyBjBZ,KAAAkB,aAAgBN,IACtB,MAAMS,EAAQT,EAAGU,OACjB,MAAMC,EAAWvB,KAAKU,MACtB,GAAIW,EAAO,CACTrB,KAAKU,MAAQW,EAAMX,K,CAErBV,KAAKwB,UAAUV,KAAKF,GACpB,GAAIW,IAAavB,KAAKU,MAAO,CAC3BV,KAAKyB,WAAWX,KAAKF,E,GAUjBZ,KAAA0B,eAAkBd,IACxB,GAAIA,EAAGe,MAAQ,SAAU,CACvB3B,KAAKe,WAAWH,E,EAGrB,CArKC,iBAAAgB,GAIE,GAAI5B,KAAK6B,IAAIC,aAAa,YAAa,CACrC,MAAMC,EAAW/B,KAAK6B,IAAIG,aAAa,YACvChC,KAAK+B,SAAWA,IAAa,KAAOE,UAAYF,EAChD/B,KAAK6B,IAAIK,gBAAgB,W,CAE3BlC,KAAK6B,IAAIM,oBAAoBC,SAAS7B,IACpC,GAAIA,EAAK8B,SAAS,SAAU,CAC1BrC,KAAKC,WAAWM,GAAQP,KAAK6B,IAAIG,aAAazB,GAC9CP,KAAK6B,IAAIK,gBAAgB3B,E,KAY/B,oBAAM+B,GACJ,OAAOtC,KAAKG,G,CAOd,MAAAoC,GACE,OACEC,EAACC,EAAgB,CAAAd,IAAA,uDAAA3B,KAAKK,SAAqB,YAAAL,KAAK0C,YAC9CF,EAAA,OAAAb,IAAA,2CACEgB,MAAO,CACLzC,SAAUF,KAAKE,SACf,YAAaF,KAAKK,SAClB,kBAAmB,OAGrBmC,EAAA,SAAAb,IAAA,2CACEgB,MAAM,qBACNzC,SAAUF,KAAKE,SACf0C,OAAQ5C,KAAKW,YACbkC,QAAS7C,KAAKmB,aACd2B,QAAS9C,KAAKkB,aACd6B,UAAW/C,KAAK0B,eAChBsB,SAAUhD,KAAKQ,SACfyC,IAAM5B,GAAWrB,KAAKiB,cAAgBI,EACtCU,SAAU/B,KAAK+B,SACfmB,KAAK,SAGPV,EAAA,eAAAb,IAAA,2CACEgB,MAAM,eACNQ,MAAO,YACPjD,SAAUF,KAAKE,SACfkD,KAAM,OAAM,uBACU,KACpBC,YAAW,KACTrD,KAAKiB,cAAcqC,YAAY,GAC/B,EAEJ7C,KAAMT,KAAKS,KACX8C,QAAQ,kB,CAalB,aAAMC,GACJ,GAAIxD,KAAKiB,cAAe,CACtBjB,KAAKiB,cAAcwC,OACnBzD,KAAKK,SAAW,K,EAUpB,cAAMqD,GACJ,GAAI1D,KAAKiB,cAAe,CACtBjB,KAAKiB,cAAc0C,QACnB3D,KAAKK,SAAW,I,EA8BZ,QAAAuD,GACN,OAAQ5D,KAAKU,OAAS,IAAImD,U,CAQpB,QAAAnB,GACN,OAAO1C,KAAK4D,WAAWE,OAAS,C","ignoreList":[]}