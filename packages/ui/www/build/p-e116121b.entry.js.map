{"version":3,"names":["convertToDomSVG","svg","parser","DOMParser","doc","parseFromString","parserErrors","querySelector","Error","textContent","svgElement","documentElement","tagName","toLowerCase","error","console","message","String","async","fetchSVG","url","cacheFetch","createCacheFetch","emptyStateCss","EmptyState","constructor","hostRef","this","actionDisabled","actionVariant","illustration","vertical","componentDidLoad","resizeHandler","render","h","Host","key","class","src","getAssetPath","headline","description","innerHTML","DOMPurify.sanitize","action","disabled","href","actionUrl","icon","variant","svgCss","Svg","componentWillLoad","handleNameChange","newValue","svgHtmlString","getSize","setAttribute","outerHTML","size"],"sources":["src/utils/convertToDomSVG.ts","src/utils/fetchSVG.ts","src/components/application/empty-state/empty-state.scss?tag=zane-empty-state&encapsulation=shadow","src/components/application/empty-state/empty-state.tsx","src/components/svg/svg.scss?tag=zane-svg&encapsulation=shadow","src/components/svg/svg.tsx"],"sourcesContent":["/**\n * 将SVG字符串转换为DOM元素\n * @param svg - SVG格式的字符串\n * @returns 返回SVG DOM元素\n * @throws 当解析失败时抛出错误\n *\n * @example\n * const svgString = '<svg viewBox=\"0 0 100 100\"><circle cx=\"50\" cy=\"50\" r=\"40\"/></svg>';\n * const svgElement = convertToDomSVG(svgString);\n * document.body.appendChild(svgElement);\n */\nexport function convertToDomSVG(svg: string): SVGSVGElement {\n  try {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(svg, 'image/svg+xml');\n\n    // 检查解析错误\n    const parserErrors = doc.querySelector('parsererror');\n    if (parserErrors) {\n      throw new Error(`SVG parsing failed: ${parserErrors.textContent}`);\n    }\n\n    // 确保返回的是SVG元素\n    const svgElement = doc.documentElement;\n    if (svgElement.tagName.toLowerCase() !== 'svg') {\n      throw new Error('Parsed content is not an SVG element');\n    }\n\n    return svgElement as unknown as SVGSVGElement;\n  } catch (error) {\n    console.error('Failed to convert SVG string to DOM:', error);\n    throw new Error(\n      `SVG conversion failed: ${error instanceof Error ? error.message : String(error)}`,\n    );\n  }\n}\n\n/**\n * 安全地将SVG字符串转换为DOM元素\n * @param svg - SVG格式的字符串\n * @param onError - 错误处理回调\n * @returns 返回SVG DOM元素或null（解析失败时）\n */\nexport function safeConvertToDomSVG(\n  svg: string,\n  onError?: (error: Error) => void,\n): null | SVGSVGElement {\n  try {\n    return convertToDomSVG(svg);\n  } catch (error) {\n    if (onError) {\n      onError(error instanceof Error ? error : new Error(String(error)));\n    }\n    return null;\n  }\n}\n","import { createCacheFetch } from './createCacheFetch';\n\nexport async function fetchSVG(url: string) {\n  if (!url) return '';\n  const cacheFetch = await createCacheFetch('zane-svg');\n  return await cacheFetch(url);\n}\n","@use '../../../global/styles/commons';\n\n:host {\n  display: block;\n}\n\n.empty-state {\n  max-width: var(--container-lg);\n  height: 100%;\n  padding: var(--spacing-03);\n  margin: auto;\n  container: emptystate / inline-size;\n}\n\n.empty-state-container {\n  display: flex;\n  gap: var(--spacing-08);\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n}\n\n.illustration {\n  --empty-state-outline: #{commons.v(--color-brand-primary)};\n  --empty-state-bg-primary: #{commons.v(--color-brand-secondary)};\n  --empty-state-bg-secondary: #{commons.v(--color-brand-secondary-40)};\n  --empty-state-bg-tertiary: #{commons.v(--color-brand-secondary-30)};\n  --empty-state-text: var(--text-primary);\n  --empty-state-bg-surface: var(--background);\n  --empty-state-green: #{commons.v(--color-success-50)};\n\n  display: flex;\n  height: 100%;\n\n  svg {\n    height: 100%;\n  }\n}\n\n:host-context([data-theme='dark']) {\n  .illustration {\n    --empty-state-bg-secondary: #{commons.v(--color-brand-secondary-50)};\n    --empty-state-bg-tertiary: #{commons.v(--color-brand-secondary-90)};\n  }\n}\n\n.content {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n\n  .title {\n    margin-bottom: commons.v(--spacing-02);\n    font-weight: commons.v(--font-weight-semi-bold);\n    color: var(--text-color, var(--text-primary));\n\n    @include commons.font-style(text-md);\n  }\n\n  .description {\n    margin-bottom: commons.v(--spacing-04);\n    color: var(--text-color, var(--text-secondary));\n\n    @include commons.font-style(text-sm);\n  }\n}\n\n:host(.content-center) .content {\n  align-items: center;\n}\n\n@container emptystate (min-width: 672px) {\n  .empty-state {\n    .illustration {\n      width: 50%;\n    }\n\n    .content {\n      width: 50%;\n    }\n  }\n}\n\n@container emptystate (max-width: 671px) {\n  .empty-state {\n    .empty-state-container {\n      flex-direction: column;\n      gap: var(--spacing-05);\n\n      .illustration {\n        justify-content: center;\n        width: 100%;\n        height: auto;\n      }\n    }\n  }\n}\n","import {\n  Component,\n  ComponentInterface,\n  Element,\n  getAssetPath,\n  h,\n  Host,\n  Listen,\n  Prop,\n  State,\n} from '@stencil/core';\nimport * as DOMPurify from 'dompurify';\n\n/**\n * @name Empty State\n * @description A message that displays when there is no information to display.\n * @category Data Display\n * @img /assets/img/empty-state.webp\n * @imgDark /assets/img/empty-state-dark.webp\n */\n@Component({\n  shadow: true,\n  styleUrl: 'empty-state.scss',\n  tag: 'zane-empty-state',\n})\nexport class EmptyState implements ComponentInterface {\n  @Prop({ reflect: true }) action: string;\n\n  @Prop() actionDisabled: boolean = false;\n\n  @Prop() actionUrl: string;\n\n  @Prop() actionVariant: 'default' | 'ghost' | 'outline' = 'default';\n\n  @Prop({ reflect: true }) description: string;\n\n  @Element() elm!: HTMLElement;\n\n  @Prop({ reflect: true }) headline: string;\n\n  @Prop({ reflect: true }) illustration: string = 'no-document';\n\n  @State() vertical: boolean = false;\n\n  componentDidLoad() {\n    this.resizeHandler();\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class={{ 'empty-state': true, vertical: this.vertical }}>\n          <div class=\"empty-state-container\">\n            <div class=\"illustration\">\n              <zane-svg\n                src={getAssetPath(\n                  `./assets/images/empty-state/${this.illustration}.svg`,\n                )}\n              />\n            </div>\n\n            <div class=\"content\">\n              {this.headline && <div class=\"title\">{this.headline}</div>}\n              {this.description && (\n                <div\n                  class=\"description\"\n                  innerHTML={DOMPurify.sanitize(this.description)}\n                />\n              )}\n              <div class=\"actions\">\n                {this.action && (\n                  <zane-button\n                    disabled={this.actionDisabled}\n                    href={this.actionUrl}\n                    icon={'arrow--right'}\n                    variant={this.actionVariant}\n                  >\n                    {this.action}\n                  </zane-button>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n\n  @Listen('resize', { target: 'window' })\n  resizeHandler() {\n    // this.vertical = this.elm.clientWidth < 768;\n  }\n}\n","@use '../../global/styles/commons';\n\n:host {\n  display: inline-block;\n}\n\n.icon {\n  width: 100%;\n  height: 100%;\n  line-height: 0;\n}\n\n:host(:not([size])) svg {\n  width: 100%;\n  height: 100%;\n}\n\n:host(.inherit) .icon {\n  color: inherit;\n}\n","import { Component, h, Host, Prop, State, Watch } from '@stencil/core';\n\nimport { convertToDomSVG, fetchSVG } from '../../utils';\n\n/**\n * @name SVG\n * @description Render SVG content from an external source.\n * @category Data Display\n * @example <zane-svg src=\"https://icons.getbootstrap.com/assets/icons/bug.svg\" size=\"2rem\"></zane-svg>\n */\n@Component({\n  shadow: true,\n  styleUrl: 'svg.scss',\n  tag: 'zane-svg',\n})\nexport class Svg {\n  /**\n   * The Icon size.\n   */\n  @Prop({ reflect: true }) size: string;\n\n  @Prop() src: string = '';\n\n  @State() svg: string = '';\n\n  async componentWillLoad() {\n    this.svg = await fetchSVG(this.src);\n  }\n\n  @Watch('src')\n  async handleNameChange(newValue: string) {\n    this.svg = await fetchSVG(newValue);\n  }\n\n  render() {\n    const svg = convertToDomSVG(this.svg);\n    let svgHtmlString = 'No icon found';\n    if (svg.tagName === 'svg') {\n      if (this.getSize()) {\n        svg.setAttribute('width', this.getSize());\n        svg.setAttribute('height', this.getSize());\n      }\n      svg.setAttribute('fill', 'currentColor');\n      svgHtmlString = svg.outerHTML;\n    }\n\n    return (\n      <Host>\n        <div class={{ icon: true }} innerHTML={svgHtmlString} />\n      </Host>\n    );\n  }\n\n  private getSize() {\n    let size;\n    switch (this.size) {\n      case 'lg': {\n        size = '1.5rem';\n        break;\n      }\n      case 'md': {\n        size = '1rem';\n        break;\n      }\n      case 'sm': {\n        size = '0.75rem';\n        break;\n      }\n      case 'xl': {\n        size = '1.75rem';\n        break;\n      }\n      case 'xs': {\n        size = '0.5rem';\n        break;\n      }\n      default: {\n        size = this.size;\n      }\n    }\n    return size;\n  }\n}\n"],"mappings":"4KAWM,SAAUA,EAAgBC,GAC9B,IACE,MAAMC,EAAS,IAAIC,UACnB,MAAMC,EAAMF,EAAOG,gBAAgBJ,EAAK,iBAGxC,MAAMK,EAAeF,EAAIG,cAAc,eACvC,GAAID,EAAc,CAChB,MAAM,IAAIE,MAAM,uBAAuBF,EAAaG,c,CAItD,MAAMC,EAAaN,EAAIO,gBACvB,GAAID,EAAWE,QAAQC,gBAAkB,MAAO,CAC9C,MAAM,IAAIL,MAAM,uC,CAGlB,OAAOE,C,CACP,MAAOI,GACPC,QAAQD,MAAM,uCAAwCA,GACtD,MAAM,IAAIN,MACR,0BAA0BM,aAAiBN,MAAQM,EAAME,QAAUC,OAAOH,K,CAGhF,CCjCOI,eAAeC,EAASC,GAC7B,IAAKA,EAAK,MAAO,GACjB,MAAMC,QAAmBC,EAAiB,YAC1C,aAAaD,EAAWD,EAC1B,CCNA,MAAMG,EAAgB,2uP,MCyBTC,EAAU,MALvB,WAAAC,CAAAC,G,UAQUC,KAAcC,eAAY,MAI1BD,KAAaE,cAAoC,UAQhCF,KAAYG,aAAW,cAEvCH,KAAQI,SAAY,KAkD9B,CAhDC,gBAAAC,GACEL,KAAKM,e,CAGP,MAAAC,GACE,OACEC,EAACC,EAAI,CAAAC,IAAA,4CACHF,EAAA,OAAAE,IAAA,2CAAKC,MAAO,CAAE,cAAe,KAAMP,SAAUJ,KAAKI,WAChDI,EAAK,OAAAE,IAAA,2CAAAC,MAAM,yBACTH,EAAK,OAAAE,IAAA,2CAAAC,MAAM,gBACTH,EACE,YAAAE,IAAA,2CAAAE,IAAKC,EACH,+BAA+Bb,KAAKG,uBAK1CK,EAAK,OAAAE,IAAA,2CAAAC,MAAM,WACRX,KAAKc,UAAYN,EAAK,OAAAE,IAAA,2CAAAC,MAAM,SAASX,KAAKc,UAC1Cd,KAAKe,aACJP,EAAA,OAAAE,IAAA,2CACEC,MAAM,cACNK,UAAWC,UAAmBjB,KAAKe,eAGvCP,EAAA,OAAAE,IAAA,2CAAKC,MAAM,WACRX,KAAKkB,QACJV,EAAA,eAAAE,IAAA,2CACES,SAAUnB,KAAKC,eACfmB,KAAMpB,KAAKqB,UACXC,KAAM,eACNC,QAASvB,KAAKE,eAEbF,KAAKkB,Y,CAYxB,aAAAZ,G,sCCzFF,MAAMkB,EAAS,6+E,MCeFC,EAAG,MALhB,WAAA3B,CAAAC,G,UAWUC,KAAGY,IAAW,GAEbZ,KAAG1B,IAAW,EA2DxB,CAzDC,uBAAMoD,GACJ1B,KAAK1B,UAAYkB,EAASQ,KAAKY,I,CAIjC,sBAAMe,CAAiBC,GACrB5B,KAAK1B,UAAYkB,EAASoC,E,CAG5B,MAAArB,GACE,MAAMjC,EAAMD,EAAgB2B,KAAK1B,KACjC,IAAIuD,EAAgB,gBACpB,GAAIvD,EAAIW,UAAY,MAAO,CACzB,GAAIe,KAAK8B,UAAW,CAClBxD,EAAIyD,aAAa,QAAS/B,KAAK8B,WAC/BxD,EAAIyD,aAAa,SAAU/B,KAAK8B,U,CAElCxD,EAAIyD,aAAa,OAAQ,gBACzBF,EAAgBvD,EAAI0D,S,CAGtB,OACExB,EAACC,EAAI,CAAAC,IAAA,4CACHF,EAAA,OAAAE,IAAA,2CAAKC,MAAO,CAAEW,KAAM,MAAQN,UAAWa,I,CAKrC,OAAAC,GACN,IAAIG,EACJ,OAAQjC,KAAKiC,MACX,IAAK,KAAM,CACTA,EAAO,SACP,K,CAEF,IAAK,KAAM,CACTA,EAAO,OACP,K,CAEF,IAAK,KAAM,CACTA,EAAO,UACP,K,CAEF,IAAK,KAAM,CACTA,EAAO,UACP,K,CAEF,IAAK,KAAM,CACTA,EAAO,SACP,K,CAEF,QAAS,CACPA,EAAOjC,KAAKiC,I,EAGhB,OAAOA,C","ignoreList":[]}