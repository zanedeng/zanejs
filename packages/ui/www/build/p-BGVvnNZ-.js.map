{"version":3,"file":"p-BGVvnNZ-.js","sources":["src/utils/debounceEvent.ts"],"sourcesContent":["import { EventEmitter } from '@stencil/core';\nimport { debounce, DebounceSettings } from 'lodash';\n\n/**\n * 事件防抖装饰器\n * 为EventEmitter实例的emit方法添加防抖功能\n *\n * @param event - 要装饰的EventEmitter实例\n * @param wait - 防抖等待时间(毫秒)\n * @param options - lodash防抖选项\n * @returns 返回装饰后的EventEmitter实例\n *\n * @example\n * const emitter = new EventEmitter();\n * const debouncedEmitter = debounceEvent(emitter, 300);\n *\n * // 高频触发只会执行最后一次\n * debouncedEmitter.emit('update', data);\n */\nexport function debounceEvent<T extends EventEmitter>(\n  event: T,\n  wait: number,\n  options?: DebounceSettings,\n): T {\n  // 保留原始引用，避免重复包装\n  const original = (event as any)._original || event;\n\n  // 创建防抖版的emit方法\n  const debouncedEmit = debounce(\n    original.emit.bind(original) as typeof original.emit,\n    wait,\n    options,\n  );\n\n  // 创建代理对象\n  const proxy = new Proxy(original, {\n    get(target, prop) {\n      // 拦截emit调用\n      if (prop === 'emit') {\n        return debouncedEmit;\n      }\n\n      // 保留其他属性和方法\n      const value = Reflect.get(target, prop);\n      return typeof value === 'function' ? value.bind(target) : value;\n    },\n  });\n\n  // 标记已包装\n  (proxy as any)._original = original;\n\n  return proxy as T;\n}\n"],"names":["debounce"],"mappings":";;AAGA;;;;;;;;;;;;;;;AAeG;SACa,aAAa,CAC3B,KAAQ,EACR,IAAY,EACZ,OAA0B,EAAA;;AAG1B,IAAA,MAAM,QAAQ,GAAI,KAAa,CAAC,SAAS,IAAI,KAAK;;AAGlD,IAAA,MAAM,aAAa,GAAGA,sBAAQ,CAC5B,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAyB,EACpD,IAAI,EACJ,OAAO,CACR;;AAGD,IAAA,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,QAAQ,EAAE;QAChC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAA;;AAEd,YAAA,IAAI,IAAI,KAAK,MAAM,EAAE;AACnB,gBAAA,OAAO,aAAa;;;YAItB,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC;AACvC,YAAA,OAAO,OAAO,KAAK,KAAK,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,KAAK;SAChE;AACF,KAAA,CAAC;;AAGD,IAAA,KAAa,CAAC,SAAS,GAAG,QAAQ;AAEnC,IAAA,OAAO,KAAU;AACnB;;;;"}