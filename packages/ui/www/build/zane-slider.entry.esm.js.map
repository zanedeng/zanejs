{"version":3,"file":"zane-slider.entry.esm.js","sources":["src/constants/types.ts","src/components/slider/slider.scss?tag=zane-slider&encapsulation=shadow","src/components/slider/slider.tsx"],"sourcesContent":["export const DRAG_EVENT_TYPES = new Set(['mousemove', 'touchmove']);\n\nexport const DRAG_STOP_EVENT_TYPES = new Set([\n  'mouseup',\n  'touchcancel',\n  'touchend',\n]);\n","@use '../../global/styles/common-input';\n\n.slider-container {\n  display: flex;\n  gap: common-input.v(--spacing-05);\n  align-items: center;\n  user-select: none;\n\n  .slider-wrapper {\n    display: flex;\n    flex: 1;\n    gap: 1rem;\n    align-items: center;\n    user-select: none;\n\n    .slider {\n      position: relative;\n      width: 100%;\n      min-width: 10rem;\n      padding: common-input.v(--spacing-05) 0;\n      cursor: pointer;\n\n      .slider__thumb {\n        position: absolute;\n        top: 50%;\n        left: 0;\n        z-index: 1;\n        width: 1rem;\n        height: 1rem;\n        background-color: common-input.v(--border-inverse);\n        border-radius: 50%;\n        transform: translateY(-50%);\n        transition: transform 0.2s ease-in-out;\n\n        &:hover {\n          transform: translateY(-50%) scale(1.2);\n        }\n      }\n\n      .slider__track {\n        position: absolute;\n        top: 50%;\n        left: 0;\n        width: 100%;\n        height: 0.125rem;\n        background-color: var(--layer-accent);\n        transform: translateY(-50%);\n      }\n\n      .slider__track--filled {\n        position: absolute;\n        top: 50%;\n        left: 0;\n        width: 20%;\n        height: 0.125rem;\n        pointer-events: none;\n        background-color: common-input.v(--border-inverse);\n        transform: translateY(-50%);\n      }\n\n      &.has-focus {\n        .slider__thumb {\n          background-color: common-input.v(--color-primary);\n          transform: translateY(-50%) scale(1.2);\n        }\n\n        .slider__track--filled {\n          background-color: common-input.v(--color-primary);\n        }\n      }\n    }\n  }\n\n  .slide-input {\n    .input {\n      width: 5rem;\n      margin: 0;\n    }\n  }\n}\n","import type { InputComponentInterface } from '../../interfaces';\n\nimport {\n  Component,\n  ComponentInterface,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\nimport { throttle } from 'lodash';\n\nimport { DRAG_EVENT_TYPES, DRAG_STOP_EVENT_TYPES } from '../../constants';\nimport { debounceEvent, getComponentIndex, isInViewport } from '../../utils';\n\n/**\n * 滑动选择器组件\n *\n * 提供可拖动的滑块选择器，支持鼠标/触摸交互、键盘操作和数值输入框集成。\n *\n * @component zane-slider\n * @tags zane-slider\n * @shadow true\n *\n * @example\n * <!-- 基础用法 -->\n * <zane-slider min=\"0\" max=\"100\" value=\"50\"></zane-slider>\n *\n * <!-- 禁用状态 -->\n * <zane-slider disabled value=\"30\"></zane-slider>\n *\n * <!-- 隐藏数值输入框 -->\n * <zane-slider show-only-slider value=\"75\"></zane-slider>\n */\n@Component({\n  shadow: true,\n  styleUrl: 'slider.scss',\n  tag: 'zane-slider',\n})\nexport class Slider implements ComponentInterface, InputComponentInterface {\n  /**\n   * ARIA 属性配置对象\n   * @prop {Object} configAria - 收集所有以 `aria-` 开头的自定义属性\n   * @mutable\n   * @reflect\n   */\n  @Prop({ mutable: true, reflect: true }) configAria: any = {};\n\n  /**\n   * 值变更事件的防抖时间（毫秒）\n   * @prop {number} debounce - 用于优化频繁触发的事件\n   * @default 300\n   */\n  @Prop() debounce = 300;\n\n  /**\n   * 禁用状态开关\n   * @prop {boolean} disabled\n   * @reflect\n   * @default false\n   */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  /** 宿主元素引用 */\n  @Element() elm!: HTMLElement;\n\n  /**\n   * 数值格式化函数\n   * @prop {(value: number | string) => string} formatter - 用于自定义显示值的格式\n   * @example (val) => `${val}%`\n   */\n  @Prop() formatter: (value: number | string) => string;\n\n  /** 组件唯一标识符 */\n  gid: string = getComponentIndex();\n\n  /** 当前是否获得焦点状态 */\n  @State() hasFocus = false;\n\n  /**\n   * 滑块最大值\n   * @prop {number} max\n   * @default 100\n   */\n  @Prop() max: number = 100;\n\n  /**\n   * 滑块最小值\n   * @prop {number} min\n   * @default 0\n   */\n  @Prop() min: number = 0;\n\n  /**\n   * 表单字段名称\n   * @prop {string} name - 自动生成唯一名称\n   * @default `zane-input-${gid}`\n   */\n  @Prop() name: string = `zane-input-${this.gid}`;\n\n  /** 标记是否需要释放事件 */\n  @State() needsOnRelease = false;\n\n  /**\n   * 内部拖拽事件处理函数\n   * @private\n   * @param {Event} event - 鼠标/触摸事件\n   */\n  _onDrag = (event) => {\n    // Do nothing if component is disabled\n    if (this.disabled || this.readonly) {\n      return;\n    }\n\n    this.openTooltip(this.thumbElement, true);\n\n    const clientX: number =\n      event.type === 'touchstart' || event.type === 'touchmove'\n        ? event.touches[0].clientX\n        : event.clientX;\n\n    this.updateByPosition(clientX);\n  };\n\n  /** 节流后的拖拽处理函数（1ms节流） */\n  onDrag = throttle(this._onDrag, 1);\n\n  /**\n   * 只读状态开关\n   * @prop {boolean} readonly\n   * @reflect\n   * @default false\n   */\n  @Prop({ reflect: true }) readonly: boolean = false;\n\n  /**\n   * 必填状态\n   * @prop {boolean} required\n   * @reflect\n   * @default false\n   */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /**\n   * 是否仅显示滑块（隐藏数值输入框）\n   * @prop {boolean} showOnlySlider\n   * @default false\n   */\n  @Prop() showOnlySlider: boolean = false;\n\n  /** 滑块轨道宽度（像素） */\n  @State()\n  slideElementWidth: null | number = null;\n\n  /**\n   * 步进值\n   * @prop {number} step - 每次增减的数值单位\n   * @mutable\n   * @default 1\n   */\n  @Prop({ mutable: true }) step: number = 1;\n\n  /**\n   * 当前滑块值\n   * @prop {number} value - 受控属性\n   * @mutable\n   * @default 0\n   */\n  @Prop({ mutable: true }) value?: number = 0;\n\n  /**\n   * 值变更事件（带防抖）\n   * @event zane-slider--change\n   * @property {Object} detail - 事件详情\n   * @property {number} detail.value  - 变更后的值\n   */\n  @Event({ eventName: 'zane-slider--change' }) zaneChange: EventEmitter;\n\n  /**\n   * 输入实时事件\n   * @event zane-slider--input\n   * @property {Object} detail - 事件详情\n   * @property {number} detail.value  - 当前输入值\n   */\n  @Event({ eventName: 'zane-slider--input' }) zaneInput: EventEmitter;\n\n  private displayElement?: HTMLElement;\n\n  private inputValue: number;\n  private nativeElement?: HTMLInputElement;\n  private slideElement?: HTMLElement;\n  private thumbElement?: HTMLElement;\n\n  /**\n   * 组件加载完成生命周期\n   * 初始化滑块宽度计算并设置ResizeObserver\n   */\n  componentDidLoad() {\n    this.#computeSliderWidth();\n\n    const resizeObserver = new ResizeObserver(() => {\n      this.#computeSliderWidth();\n    });\n\n    resizeObserver.observe(this.elm);\n  }\n\n  /**\n   * 组件加载前生命周期\n   * 收集ARIA属性并初始化内部值\n   */\n  componentWillLoad() {\n    this.elm.getAttributeNames().forEach((name: string) => {\n      if (name.includes('aria-')) {\n        this.configAria[name] = this.elm.getAttribute(name);\n        this.elm.removeAttribute(name);\n      }\n    });\n\n    this.inputValue = this.value;\n  }\n\n  /** 连接回调 - 初始化防抖设置 */\n  connectedCallback() {\n    this.debounceChanged();\n  }\n\n  /**\n   * 获取组件唯一ID\n   * @method\n   * @returns {Promise<string>} 组件唯一标识符\n   */\n  @Method()\n  async getComponentId() {\n    return this.gid;\n  }\n\n  /**\n   * 拖拽开始事件处理\n   * @param {Event} event - 鼠标/触摸事件\n   */\n  onDragStart = (event) => {\n    // Do nothing if component is disabled\n    if (this.disabled || this.readonly) {\n      return;\n    }\n\n    // Register drag stop handlers\n    DRAG_STOP_EVENT_TYPES.forEach((element) => {\n      this.elm?.ownerDocument.addEventListener(element, this.onDragStop);\n    });\n\n    // Register drag handlers\n    DRAG_EVENT_TYPES.forEach((element) => {\n      this.elm?.ownerDocument.addEventListener(element, this.onDrag);\n    });\n\n    this.hasFocus = true;\n\n    this.onDrag(event);\n  };\n\n  /**\n   * 拖拽结束事件处理\n   * @param {Event} event - 鼠标/触摸事件\n   */\n  onDragStop = (event) => {\n    // Do nothing if component is disabled\n    if (this.disabled || this.readonly) {\n      return;\n    }\n\n    // Remove drag stop handlers\n    DRAG_STOP_EVENT_TYPES.forEach((element) => {\n      this.elm?.ownerDocument.removeEventListener(element, this.onDragStop);\n    });\n\n    // Remove drag handlers\n    DRAG_EVENT_TYPES.forEach((element) => {\n      this.elm?.ownerDocument.removeEventListener(element, this.onDrag);\n    });\n\n    const clientX: number =\n      event.type === 'touchend'\n        ? event.changedTouches[0].clientX\n        : event.clientX;\n\n    this.updateByPosition(clientX);\n  };\n\n  /**\n   * 滚轮事件处理\n   * @param {WheelEvent} event - 鼠标滚轮事件\n   */\n  onWheel = (event) => {\n    // Do nothing if component is disabled\n    if (this.disabled || this.readonly) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    let delta = 0;\n    if (event.wheelDelta) {\n      delta = event.wheelDelta / 120;\n    } else if (event.detail) {\n      delta = -event.detail / 3;\n    }\n\n    this.updateValue(Number.parseInt(String(this.value)) + delta * this.step);\n  };\n\n  /**\n   * 控制工具提示显示\n   * @param {HTMLElement} target - 目标元素\n   * @param {boolean} open - 开启/关闭状态\n   */\n  openTooltip = (target, open) => {\n    window.dispatchEvent(\n      new CustomEvent('zane-tooltip-open', {\n        detail: {\n          open,\n          target,\n        },\n      }),\n    );\n  };\n\n  /**\n   * 渲染组件\n   * @returns {JSX.Element} 组件虚拟DOM树\n   */\n  render() {\n    return (\n      <Host has-focus={this.hasFocus} has-value={this.hasValue()}>\n        <div class=\"slider-container\">\n          <div class=\"slider-wrapper\">\n            {!this.showOnlySlider && (\n              <div class=\"slider-range-label\">\n                <span>{this.getFormattedValue(this.min)}</span>\n              </div>\n            )}\n            <div\n              class={{ 'has-focus': this.hasFocus, slider: true }}\n              onMouseDown={this.onDragStart}\n              onWheel={this.onWheel}\n              ref={(elm) => (this.slideElement = elm)}\n            >\n              <div\n                class=\"slider__thumb\"\n                onBlur={this.blurHandler}\n                onFocus={this.focusHandler}\n                onMouseLeave={(_e) => {\n                  if (!this.hasFocus)\n                    this.openTooltip(this.thumbElement, false);\n                }}\n                onMouseOver={(_e) => {\n                  this.openTooltip(this.thumbElement, true);\n                }}\n                onTouchStart={this.onDragStart}\n                ref={(elm) => (this.thumbElement = elm)}\n                style={{\n                  left: `${\n                    (this.value * Math.trunc(this.slideElementWidth)) /\n                      (this.max - this.min) -\n                    8\n                  }px`,\n                }}\n                tabIndex={0}\n                tooltip-target={`slider-tooltip-${this.gid}`}\n              ></div>\n              <div class=\"slider__track\"></div>\n              <div\n                class=\"slider__track--filled\"\n                style={{\n                  width: `${\n                    (this.value * Math.trunc(this.slideElementWidth)) /\n                    (this.max - this.min)\n                  }px`,\n                }}\n              ></div>\n            </div>\n            {!this.showOnlySlider && (\n              <div class=\"slider-range-label\">\n                <span>{this.getFormattedValue(this.max)}</span>\n              </div>\n            )}\n          </div>\n          {this.showOnlySlider ? null : (\n            <div class=\"slide-input\">\n              <zane-number\n                class=\"input\"\n                hide-actions={true}\n                onGoat-input={(e) => {\n                  e.stopPropagation();\n                }}\n                onGoat-number--input={(e) => {\n                  e.stopPropagation();\n                  this.updateValue(e.target.value);\n                }}\n                size=\"sm\"\n                value={this.inputValue}\n              ></zane-number>\n            </div>\n          )}\n        </div>\n        <zane-tooltip\n          id={`slider-tooltip-${this.gid}`}\n          placements=\"top,bottom\"\n          trigger={'manual'}\n        >\n          {this.getFormattedValue(this.value)}\n        </zane-tooltip>\n      </Host>\n    );\n  }\n\n  /**\n   * 移除组件焦点\n   * @method\n   */\n  @Method()\n  async setBlur() {\n    if (this.nativeElement) {\n      this.nativeElement.blur();\n    }\n  }\n\n  /**\n   * 设置组件焦点\n   * @method\n   */\n  @Method()\n  async setFocus(): Promise<void> {\n    this.displayElement.focus();\n  }\n\n  /**\n   * 根据坐标位置更新滑块值\n   * @param {number} currentX - 当前指针X坐标\n   */\n  updateByPosition(current) {\n    const start = this.slideElement.getBoundingClientRect().left;\n    const total = this.slideElement.getBoundingClientRect().width;\n    const value = Number.parseInt(\n      String(((current - start) / total) * (this.max - this.min)),\n    );\n    this.updateValue(value);\n    this.inputValue = this.value;\n  }\n\n  /**\n   * 更新滑块值并触发事件\n   * @param {number} newValue - 新数值\n   */\n  updateValue = (newValue) => {\n    const oldValue = this.value;\n\n    this.value = Math.round(newValue / this.step) * this.step;\n\n    if (this.value === null || this.value < this.min) {\n      this.value = this.min;\n    } else if (this.value > this.max) {\n      this.value = this.max;\n    }\n\n    this.zaneInput.emit({\n      value: this.value,\n    });\n\n    if (oldValue !== this.value) {\n      this.zaneChange.emit({\n        value: this.value,\n      });\n    }\n  };\n\n  /** 全局点击监听（用于失焦处理） */\n  @Listen('click', { target: 'window' })\n  windowClick(evt) {\n    const path = evt.path || evt.composedPath();\n    for (const elm of path) {\n      if (elm === this.elm) return;\n    }\n  }\n\n  /**\n   * 防抖时间变更监听\n   * 动态更新防抖函数\n   */\n  @Watch('debounce')\n  protected debounceChanged() {\n    this.zaneChange = debounceEvent(this.zaneChange, this.debounce);\n  }\n\n  /**\n   * 计算滑块轨道宽度\n   * @private\n   * 使用递归确保在视口内获取准确宽度\n   */\n  #computeSliderWidth() {\n    if (this.slideElementWidth === null && !isInViewport(this.elm)) {\n      setTimeout(() => this.#computeSliderWidth(), 100);\n      return;\n    }\n\n    this.slideElementWidth = this.slideElement.getBoundingClientRect().width;\n  }\n\n  /** 滑块失焦处理 */\n  private blurHandler = () => {\n    this.hasFocus = false;\n    this.openTooltip(this.thumbElement, false);\n  };\n\n  /** 滑块获焦处理 */\n  private focusHandler = () => {\n    this.hasFocus = true;\n  };\n\n  /**\n   * 获取格式化值\n   * @private\n   * @param {number|string} value - 原始值\n   * @returns {string} 格式化后的值\n   */\n  private getFormattedValue(value: number | string) {\n    if (this.formatter) return this.formatter(value);\n    return value;\n  }\n\n  /**\n   * 检查是否有有效值\n   * @private\n   * @returns {boolean} 是否存在有效值\n   */\n  private hasValue(): boolean {\n    return (this.value || '').toString().length > 0;\n  }\n}\n"],"names":["throttle"],"mappings":"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"}