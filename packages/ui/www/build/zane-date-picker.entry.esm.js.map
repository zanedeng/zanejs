{"version":3,"file":"zane-date-picker.entry.esm.js","sources":["src/components/date-picker/date-picker.scss?tag=zane-date-picker&encapsulation=shadow","src/components/date-picker/date-picker.tsx"],"sourcesContent":["@use '../../global/styles/common-input';\n\ninput[type='date']::-webkit-inner-spin-button,\ninput[type='date']::-webkit-calendar-picker-indicator {\n  display: none;\n  appearance: none;\n}\n","import {\n  Component,\n  ComponentInterface,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\n\nimport { debounceEvent, getComponentIndex } from '../../utils';\n\n/**\n * 日期选择器组件\n * @Component 装饰器定义组件元数据\n * @shadow 启用Shadow DOM封装\n * @styleUrl 组件样式表路径\n * @tag 组件自定义标签名称\n */\n@Component({\n  shadow: true,\n  styleUrl: 'date-picker.scss',\n  tag: 'zane-date-picker',\n})\nexport class DatePicker implements ComponentInterface {\n  /**\n   * ARIA无障碍属性配置对象\n   * 用于存储所有aria-*属性\n   * @Prop 装饰器表示这是组件的公开属性\n   * @mutable 表示属性可变\n   * @reflect 表示属性值会反映到DOM属性上\n   */\n  @Prop({ mutable: true, reflect: true }) configAria: any = {};\n\n  /**\n   * 事件防抖时间(毫秒)\n   * 用于控制change事件的触发频率\n   * @Prop 默认值为300ms\n   */\n  @Prop() debounce = 300;\n\n  /**\n   * 是否禁用组件\n   * @Prop 装饰器，reflect表示会反映到DOM属性上\n   * 默认值为false\n   */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  /**\n   * 宿主元素引用\n   * @Element 装饰器获取宿主元素\n   */\n  @Element() elm!: HTMLElement;\n\n  /**\n   * 组件唯一ID\n   */\n  gid: string = getComponentIndex();\n\n  /**\n   * 是否获得焦点状态\n   * @State 装饰器表示这是组件内部状态\n   */\n  @State() hasFocus = false;\n\n  /**\n   * 辅助文本\n   * 显示在输入框下方的帮助信息\n   * @Prop\n   */\n  @Prop() helperText: string;\n\n  /**\n   * 是否为内联模式\n   * @Prop 装饰器，reflect表示会反映到DOM属性上\n   */\n  @Prop({ reflect: true }) inline: boolean = false;\n\n  /**\n   * 是否为无效状态\n   * @Prop\n   */\n  @Prop() invalid: boolean = false;\n\n  /**\n   * 无效状态提示文本\n   * @Prop\n   */\n  @Prop() invalidText: string;\n\n  /**\n   * 标签文本\n   * @Prop\n   */\n  @Prop() label: string;\n\n  /**\n   * 输入框name属性\n   * 默认值为\"zane-input-{唯一ID}\"\n   * @Prop\n   */\n  @Prop() name: string = `zane-input-${this.gid}`;\n\n  /**\n   * 占位符文本\n   * @Prop\n   */\n  @Prop() placeholder: string;\n\n  /**\n   * 是否为只读状态\n   * @Prop 装饰器，reflect表示会反映到DOM属性上\n   */\n  @Prop({ reflect: true }) readonly: boolean = false;\n\n  /**\n   * 是否为必填项\n   * @Prop 装饰器，reflect表示会反映到DOM属性上\n   */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /**\n   * 组件尺寸\n   * - 'lg': 大尺寸\n   * - 'md': 中等尺寸(默认)\n   * - 'sm': 小尺寸\n   * @Prop 装饰器，reflect表示会反映到DOM属性上\n   */\n  @Prop({ reflect: true }) size: 'lg' | 'md' | 'sm' = 'md';\n\n  /**\n   * 当前值\n   * 可以是null、number或string类型\n   * @Prop 装饰器，mutable表示属性可变\n   */\n  @Prop({ mutable: true }) value?: null | number | string = '';\n\n  /**\n   * 是否为警告状态\n   * @Prop\n   */\n  @Prop() warn: boolean = false;\n\n  /**\n   * 警告状态提示文本\n   * @Prop\n   */\n  @Prop() warnText: string;\n\n  /**\n   * 失去焦点事件\n   * @Event 装饰器定义自定义事件\n   * 事件名称为'zane-date-picker--blur'\n   */\n  @Event({ eventName: 'zane-date-picker--blur' }) zaneBlur: EventEmitter;\n\n  /**\n   * 值变化事件(带防抖)\n   * @Event 装饰器定义自定义事件\n   * 事件名称为'zane-date-picker--change'\n   */\n  @Event({ eventName: 'zane-date-picker--change' }) zaneChange: EventEmitter;\n\n  /**\n   * 获得焦点事件\n   * @Event 装饰器定义自定义事件\n   * 事件名称为'zane-date-picker--focus'\n   */\n  @Event({ eventName: 'zane-date-picker--focus' }) zaneFocus: EventEmitter;\n\n  /**\n   * 输入事件(实时触发)\n   * @Event 装饰器定义自定义事件\n   * 事件名称为'zane-date-picker--input'\n   */\n  @Event({ eventName: 'zane-date-picker--input' }) zaneInput: EventEmitter;\n\n  /**\n   * 原生input元素引用\n   */\n  private nativeElement?: HTMLInputElement;\n\n  /**\n   * tabindex值\n   * 从宿主元素获取并传递给内部input元素\n   */\n  private tabindex?: number | string;\n\n  /**\n   * 组件即将加载生命周期钩子\n   * 处理ARIA属性和tabindex\n   */\n  componentWillLoad() {\n    // 处理tabindex\n    if (this.elm.hasAttribute('tabindex')) {\n      const tabindex = this.elm.getAttribute('tabindex');\n      this.tabindex = tabindex === null ? undefined : tabindex;\n      this.elm.removeAttribute('tabindex');\n    }\n    // 收集所有aria-*属性\n    this.elm.getAttributeNames().forEach((name: string) => {\n      if (name.includes('aria-')) {\n        this.configAria[name] = this.elm.getAttribute(name);\n        this.elm.removeAttribute(name);\n      }\n    });\n  }\n\n  /**\n   * 组件连接到DOM时的生命周期回调\n   * 初始化防抖设置\n   */\n  connectedCallback() {\n    this.debounceChanged();\n  }\n\n  /**\n   * 获取组件ID的公共方法\n   * @Method 装饰器定义公共方法\n   * @returns 组件唯一ID\n   */\n  @Method()\n  async getComponentId() {\n    return this.gid;\n  }\n\n  /**\n   * 渲染组件\n   * @returns 组件虚拟DOM\n   */\n  render() {\n    return (\n      <Host has-focus={this.hasFocus} has-value={this.hasValue()}>\n        <div class={{ 'form-control': true, inline: this.inline }}>\n          {this.label && (\n            <label class=\"label\">\n              {this.required && <span class=\"required\">*</span>}\n              {this.label}\n            </label>\n          )}\n\n          <div class=\"field\">\n            <div\n              class={{\n                disabled: this.disabled,\n                'has-focus': this.hasFocus,\n                'input-container': true,\n              }}\n            >\n              <input\n                class=\"input input-native\"\n                disabled={this.disabled}\n                onBlur={this.blurHandler}\n                onFocus={this.focusHandler}\n                onInput={this.inputHandler}\n                onKeyDown={this.keyDownHandler}\n                readonly={this.readonly}\n                ref={(input) => (this.nativeElement = input)}\n                required={this.required}\n                tabindex={this.tabindex}\n                type=\"date\"\n              />\n\n              <zane-button\n                class=\"input-action\"\n                color={'secondary'}\n                disabled={this.disabled}\n                icon={'calendar'}\n                onZane-button--click={() => {\n                  setTimeout(() => {\n                    this.nativeElement.showPicker();\n                  });\n                }}\n                size={this.size}\n                variant=\"ghost.simple\"\n              ></zane-button>\n            </div>\n            {this.renderHelper()}\n          </div>\n        </div>\n      </Host>\n    );\n  }\n\n  /**\n   * 渲染辅助信息\n   * 根据状态显示不同的辅助文本\n   * @returns 辅助信息虚拟DOM\n   */\n  renderHelper() {\n    if (this.invalid)\n      return <div class=\"helper invalid\">{this.invalidText}</div>;\n    else if (this.warn) return <div class=\"helper warn\">{this.warnText}</div>;\n    else if (this.helperText || this.helperText === '')\n      return <div class=\"helper text\">{this.helperText}</div>;\n  }\n\n  /**\n   * 设置失去焦点的公共方法\n   * @Method 装饰器定义公共方法\n   */\n  @Method()\n  async setBlur() {\n    if (this.nativeElement) {\n      this.nativeElement.blur();\n      this.hasFocus = false;\n    }\n  }\n\n  /**\n   * 设置获得焦点的公共方法\n   * @Method 装饰器定义公共方法\n   */\n  @Method()\n  async setFocus() {\n    if (this.nativeElement) {\n      this.nativeElement.focus();\n      this.hasFocus = true;\n    }\n  }\n\n  /**\n   * 监听debounce属性变化\n   * 更新防抖设置\n   * @Watch 装饰器监听属性变化\n   */\n  @Watch('debounce')\n  protected debounceChanged() {\n    this.zaneChange = debounceEvent(this.zaneChange, this.debounce);\n  }\n\n  /**\n   * 失去焦点事件处理\n   * @param ev 焦点事件对象\n   */\n  private blurHandler = (ev: FocusEvent) => {\n    this.hasFocus = false;\n    this.zaneBlur.emit(ev);\n  };\n\n  /**\n   * 清空输入值\n   * @param evt 事件对象\n   */\n  private clearInput = (evt: Event) => {\n    this.nativeElement.value = '';\n    this.inputHandler(evt);\n  };\n\n  /**\n   * 获得焦点事件处理\n   * @param ev 焦点事件对象\n   */\n  private focusHandler = (ev: FocusEvent) => {\n    this.hasFocus = true;\n    this.zaneFocus.emit(ev);\n  };\n\n  /**\n   * 获取当前值的字符串表示\n   * @returns 值的字符串形式\n   */\n  private getValue(): string {\n    return (this.value || '').toString();\n  }\n\n  /**\n   * 检查是否有值\n   * @returns 是否有值的布尔结果\n   */\n  private hasValue(): boolean {\n    return this.getValue().length > 0;\n  }\n\n  /**\n   * 输入事件处理\n   * @param ev 输入事件对象\n   */\n  private inputHandler = (ev: Event) => {\n    const input = ev.target as HTMLInputElement | null;\n    const oldValue = this.value;\n    if (input) {\n      this.value = input.value;\n    }\n    this.zaneInput.emit(ev as KeyboardEvent);\n    if (oldValue !== this.value) {\n      this.zaneChange.emit(ev as KeyboardEvent);\n    }\n  };\n\n  /**\n   * 键盘按下事件处理\n   * 特别处理ESC键清空输入\n   * @param ev 键盘事件对象\n   */\n  private keyDownHandler = (ev: KeyboardEvent) => {\n    if (ev.key === 'Escape') {\n      this.clearInput(ev);\n    }\n  };\n}\n"],"names":[],"mappings":"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"}