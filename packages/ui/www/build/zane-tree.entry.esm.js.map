{"version":3,"file":"zane-tree.entry.esm.js","sources":["src/components/tree/tree/tree.scss?tag=zane-tree&encapsulation=shadow","src/components/tree/tree/tree.tsx"],"sourcesContent":["@use '../../../global/styles/commons';\n\n:host {\n  display: block;\n}\n\n.tree-view {\n  background-color: var(--layer);\n}\n","import {\n  Component,\n  ComponentInterface,\n  Element,\n  h,\n  Listen,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\n\n/**\n * 树形结构可视化组件\n *\n * @example\n * <!-- 基础用法 -->\n * <zane-tree>\n *   <zane-tree-node value=\"node1\">一级节点</zane-tree-node>\n *   <zane-tree-node value=\"node2\">二级节点</zane-tree-node>\n * </zane-tree>\n */\n@Component({\n  shadow: true,\n  styleUrl: 'tree.scss',\n  tag: 'zane-tree',\n})\nexport class Tree implements ComponentInterface {\n  /**\n   * 宿主元素引用（自动注入）\n   * @type {HTMLElement}\n   */\n  @Element() elm!: HTMLElement;\n\n  /**\n   * 空状态显示开关\n   * @prop {boolean} [empty=false] - 是否展示空状态界面\n   * @mutable\n   * @example\n   * <zane-tree empty></zane-tree>\n   */\n  @Prop({ mutable: true }) empty: boolean = false;\n\n  /**\n   * 空状态配置（JSON 字符串或对象）\n   * @prop {string|Object} [emptyState] - 空状态配置参数，支持两种格式：\n   * 1. JSON 字符串格式（推荐）\n   * 2. 直接传入配置对象\n   *\n   * @default {\n   *  \"headline\": \"No items\",\n   *  \"description\": \"There are no items to display\"\n   * }\n   * @mutable\n   * @example\n   * <!-- JSON字符串形式 -->\n   * <zane-tree empty-state='{\"headline\":\"空数据\",\"description\":\"请添加节点\"}'>\n   *\n   * <!-- 对象形式（需通过JS绑定） -->\n   * <zane-tree empty-state={myConfig}>\n   */\n  @Prop({ mutable: true }) emptyState: string = `{\n    \"headline\": \"No items\",\n    \"description\": \"There are no items to display\"\n  }`;\n\n  /**\n   * 内部处理后的空状态配置\n   * @state\n   * @type {Object}\n   */\n  @State()\n  internalEmptyState: any;\n\n  /**\n   * 当前选中节点标识\n   * @prop {string} selectedNode - 当前选中节点的唯一标识符（对应zane-tree-node的value）\n   * @mutable\n   */\n  @Prop({ mutable: true })\n  selectedNode: string;\n\n  /** 订阅节点选择事件的回调函数列表 */\n  subscribers: any[] = [];\n\n  /** 组件加载前解析空状态配置 */\n  componentWillLoad() {\n    this.parseEmptyState();\n  }\n\n  /**\n   * 获取当前选中节点\n   * @method\n   * @returns {Promise<string>} 当前选中节点的value值\n   * @example\n   * const tree = document.querySelector('zane-tree');\n   * const selected = await tree.getSelectedNode();\n   */\n  @Method()\n  async getSelectedNode() {\n    return this.selectedNode;\n  }\n\n  /**\n   * 全局键盘事件监听（窗口级）\n   * @listens window:keydown\n   * @param {KeyboardEvent} evt - 键盘事件对象\n   * @description\n   * 实现树节点的键盘导航：\n   * 1. 当检测到键盘事件发生在当前树组件内时\n   * 2. 按下`ArrowDown`：聚焦下一个可用节点\n   * 3. 按下`ArrowUp`：聚焦上一个可用节点\n   *\n   * 导航规则：\n   * - 仅当事件发生在`zane-tree-node`元素内时触发\n   * - 自动跳过禁用状态的节点（`disabled`）\n   * - 支持循环聚焦（到达末尾后回到首节点）\n   */\n  @Listen('keydown', { target: 'window' })\n  handleKeyDown(evt: KeyboardEvent) {\n    const path = evt.composedPath();\n    let menuItem = null;\n    for (const elm of path) {\n      if ((elm as any).tagName === 'ZANE-TREE-NODE') {\n        menuItem = elm;\n      }\n      if (elm !== this.elm) continue;\n      if (evt.key === 'ArrowDown') {\n        evt.preventDefault();\n        this.focusNextItem(menuItem);\n      } else if (evt.key === 'ArrowUp') {\n        evt.preventDefault();\n        this.focusPreviousItem(menuItem);\n      }\n    }\n  }\n\n  /**\n   * 解析空状态配置\n   * @watch emptyState\n   * @description\n   * 自动将字符串形式的配置转换为对象格式。\n   * 当`emptyState`属性变化时自动触发。\n   */\n  @Watch('emptyState')\n  parseEmptyState() {\n    this.internalEmptyState =\n      typeof this.emptyState === 'string'\n        ? JSON.parse(this.emptyState)\n        : this.emptyState;\n  }\n\n  /**\n   * 组件渲染函数\n   * @returns {VNode} 虚拟节点树\n   * @description\n   * 动态切换两种显示状态：\n   * 1. 空状态：当`empty=true`时显示空白界面\n   * 2. 正常状态：渲染树节点插槽内容\n   */\n  render() {\n    return this.empty ? (\n      <div class=\"tree-view\">{this.renderEmptyState()}</div>\n    ) : (\n      <div class=\"tree-view\">\n        <slot></slot>\n      </div>\n    );\n  }\n\n  /**\n   * 设置初始焦点\n   * @method\n   * @description 将焦点设置到树的第一个节点（无障碍支持）\n   * @example\n   * const tree = document.querySelector('zane-tree');\n   * await tree.setFocus();\n   */\n  @Method()\n  async setFocus() {\n    const firstMenuItem = this.getFirstItem();\n    (firstMenuItem as any)?.setFocus();\n  }\n\n  /**\n   * 订阅节点选择事件\n   * @method\n   * @param {Function} cb - 选择事件回调函数\n   * @description\n   * 注册回调函数，当节点被选择时触发。\n   * 回调函数接收当前选中节点的value值。\n   *\n   * 注意：需手动管理订阅关系，组件销毁前建议取消订阅\n   * @example\n   * tree.subscribeToSelect((value)  => {\n   *   console.log('Selected  node:', value);\n   * });\n   */\n  @Method()\n  async subscribeToSelect(cb) {\n    this.subscribers.push(cb);\n  }\n\n  /**\n   * 处理树节点点击事件\n   * @listens zane-tree-node--click\n   * @param {CustomEvent} evt - 自定义事件对象\n   * @description\n   * 事件规范：\n   * - 事件类型：`zane-tree-node--click`\n   * - 事件数据：`evt.detail.value`  (节点标识符)\n   *\n   * 功能流程：\n   * 1. 更新内部选中状态\n   * 2. 通知所有订阅者\n   */\n  @Listen('zane-tree-node--click')\n  treeNodeClick(evt: CustomEvent<any>) {\n    this.selectedNode = evt.detail.value;\n    this.subscribers.forEach((cb) => cb(evt.detail.value));\n  }\n\n  /**\n   * 聚焦下一个可用节点\n   * @private\n   * @param {HTMLElement} currentItem - 当前焦点节点\n   */\n  private focusNextItem(currentItem) {\n    let nextItem: any = currentItem.nextElementSibling;\n    do {\n      if (\n        nextItem &&\n        nextItem.tagName === 'ZANE-TREE-NODE' &&\n        !nextItem.disabled\n      ) {\n        nextItem.setFocus();\n        return;\n      }\n      nextItem = nextItem\n        ? nextItem.nextElementSibling\n        : this.elm.querySelector('zane-tree-node:first-child');\n    } while (nextItem !== currentItem);\n  }\n\n  /**\n   * 聚焦上一个可用节点\n   * @private\n   * @param {HTMLElement} currentItem - 当前焦点节点\n   */\n  private focusPreviousItem(currentItem) {\n    let previousItem: any = currentItem.previousElementSibling;\n    do {\n      if (\n        previousItem &&\n        previousItem.tagName === 'ZANE-TREE-NODE' &&\n        !previousItem.disabled\n      ) {\n        previousItem.setFocus();\n        return;\n      }\n      previousItem = previousItem\n        ? previousItem.previousElementSibling\n        : this.elm.querySelector('zane-tree-node:last-child');\n    } while (previousItem !== currentItem);\n  }\n\n  /**\n   * 获取首个树节点元素\n   * @private\n   * @returns {HTMLElement | null} 首个可用节点\n   * @todo 注意当前实现选择器不一致问题（zane-menu-item应为zane-tree-node）\n   */\n  private getFirstItem() {\n    return this.elm.querySelector('zane-menu-item');\n  }\n\n  /**\n   * 渲染空状态组件\n   * @private\n   * @returns {VNode} 空状态组件\n   */\n  private renderEmptyState() {\n    if (this.empty)\n      return (\n        <zane-empty-state class=\"empty-menu\" {...this.internalEmptyState} />\n      );\n  }\n}\n"],"names":[],"mappings":"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"}