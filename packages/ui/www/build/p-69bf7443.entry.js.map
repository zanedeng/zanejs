{"version":3,"names":["headerCss","Header","constructor","hostRef","this","centerSlotHasContent","color","float","themeMode","colorChanged","__classPrivateFieldGet","_Header_instances","_Header_computedColor","call","componentWillLoad","_Header_computeCenterSlotHasContent","observeThemeChange","isDarkMode","render","h","Host","key","_Header_computeColorLightOrDark","class","computedColor","header","_Header_getColumnType","name","onSlotchange","hasSlot","host","getComputedStyle","document","documentElement","getPropertyValue","isLightOrDark","darkModeColor","querySelectorAll","forEach","el","setColor","_a","querySelector"],"sources":["src/components/application/header/header/header.scss?tag=zane-header&encapsulation=shadow","src/components/application/header/header/header.tsx"],"sourcesContent":["@use '../../../../global/styles/commons';\n\n:host {\n  /**\n   * @prop --zane-header-height: Height of the header. Defaults to 3rem.\n   */\n  --zane-header-height: 3rem;\n\n  /**\n   * @prop --zane-header-width: Width of the header. Defaults to 100%.\n   */\n  --zane-header-width: 100%;\n\n  display: block;\n}\n\n.header {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  .header-container {\n    display: grid;\n    grid-template-columns: 1fr auto 1fr;\n    align-items: center;\n    width: var(--zane-header-width);\n    height: var(--zane-header-height);\n\n    .left-section {\n      justify-self: flex-start;\n    }\n\n    .center-section {\n      justify-self: center;\n    }\n\n    .right-section {\n      justify-self: flex-end;\n    }\n\n    .section {\n      display: flex;\n      align-items: center;\n      height: 100%;\n\n      slot::slotted(*) {\n        display: flex;\n        align-items: center;\n        height: 100%;\n        color: var(--header-text-color);\n      }\n    }\n  }\n\n  &.three-column .header-container {\n    grid-template-columns: 1fr auto 1fr;\n  }\n\n  &.two-column .header-container {\n    grid-template-columns: auto 1fr;\n  }\n\n  &.float {\n    @each $color in [primary, secondary, success, info, warning, error, white,\n      black, brand-primary, brand-secondary]\n    {\n      &#{'.color-' + $color} .header-container {\n        background: commons.v(--color-#{$color});\n      }\n    }\n\n    .header-container {\n      margin: commons.v(--spacing-05);\n      overflow: clip;\n      border: 1px solid var(--layer-accent);\n      border-radius: commons.v(--border-radius);\n      box-shadow: v(--shadow-md);\n    }\n  }\n\n  &:not(.float) {\n    @each $color in [primary, secondary, success, info, warning, error, white,\n      black, brand-primary, brand-secondary]\n    {\n      &#{'.color-' + $color} {\n        background: commons.v(--color-#{$color});\n      }\n    }\n  }\n}\n\n:host([color-is='dark']):host {\n  --header-text-color: #{commons.v(--color-white)};\n}\n\n:host([color-is='light']):host {\n  --header-text-color: #{commons.v(--color-black)};\n}\n","import { Component, Element, h, Host, Prop, State, Watch } from '@stencil/core';\n\nimport {\n  hasSlot,\n  isDarkMode,\n  isLightOrDark,\n  observeThemeChange,\n} from '../../../../utils';\n\n/**\n * 头部组件，提供可定制的页面顶部导航栏\n * @Component 装饰器定义组件元数据\n * @shadow 启用Shadow DOM封装\n * @styleUrl 指定组件样式文件\n * @tag 定义组件在HTML中的标签名\n */\n@Component({\n  shadow: true,\n  styleUrl: 'header.scss',\n  tag: 'zane-header',\n})\nexport class Header {\n  /**\n   * 标记中心插槽是否有内容\n   * @State 内部状态，当内容变化时会触发重新渲染\n   */\n  @State() centerSlotHasContent = false;\n\n  /**\n   * 头部组件的颜色主题\n   * @Prop 可从外部设置的属性\n   * @type {'black' | 'danger' | 'primary' | 'secondary' | 'success' | 'warning' | 'white' | string}\n   * - 'black': 黑色主题\n   * - 'danger': 危险/错误状态颜色\n   * - 'primary': 主品牌色\n   * - 'secondary': 次要颜色\n   * - 'success': 成功状态颜色\n   * - 'warning': 警告状态颜色\n   * - 'white': 白色主题\n   * - string: 自定义颜色值\n   * @default 'black'\n   */\n  @Prop() color:\n    | 'black'\n    | 'danger'\n    | 'primary'\n    | 'secondary'\n    | 'success'\n    | 'warning'\n    | 'white'\n    | string = 'black';\n\n  /**\n   * 计算后的实际使用颜色\n   * @State 内部状态，根据主题模式自动计算\n   */\n  @State() computedColor: string;\n\n  /**\n   * 暗黑模式下的颜色主题\n   * @Prop 可选属性，暗黑模式下的替代颜色\n   * @type {'black' | 'danger' | 'primary' | 'secondary' | 'success' | 'warning' | 'white' | string}\n   * 枚举值与color属性相同\n   */\n  @Prop() darkModeColor?:\n    | 'black'\n    | 'danger'\n    | 'primary'\n    | 'secondary'\n    | 'success'\n    | 'warning'\n    | 'white'\n    | string;\n\n  /**\n   * 是否启用浮动模式\n   * @Prop 控制头部是否浮动在内容上方\n   * @default false\n   */\n  @Prop() float: boolean = false;\n\n  /**\n   * 宿主元素引用\n   * @Element 获取组件宿主元素\n   */\n  @Element() host!: HTMLElement;\n\n  /**\n   * 当前主题模式\n   * @State 内部状态，跟踪当前UI主题\n   * @type {'dark' | 'light'}\n   * - 'dark': 暗黑主题\n   * - 'light': 明亮主题\n   * @default 'light'\n   */\n  @State() themeMode: 'dark' | 'light' = 'light';\n\n  /**\n   * 颜色变化监听器\n   * @Watch 监听color属性变化\n   */\n  @Watch('color')\n  colorChanged() {\n    this.#computedColor();\n  }\n\n  /**\n   * 组件加载前生命周期钩子\n   * 初始化颜色状态和插槽状态，并监听主题变化\n   */\n  componentWillLoad() {\n    this.colorChanged();\n    this.#computeCenterSlotHasContent();\n    observeThemeChange(() => {\n      this.themeMode = isDarkMode() ? 'dark' : 'light';\n      this.colorChanged();\n    });\n  }\n\n  /**\n   * 渲染组件\n   * @returns 返回JSX表示的组件结构\n   */\n  render() {\n    return (\n      <Host color-is={this.#computeColorLightOrDark()}>\n        <header\n          class={{\n            [`color-${this.computedColor}`]: true,\n            float: this.float,\n            header: true,\n            [this.#getColumnType()]: true,\n          }}\n        >\n          <div class=\"header-container\">\n            <div class=\"left-section section\">\n              <slot name=\"left\" />\n            </div>\n            {this.centerSlotHasContent && (\n              <div class=\"center-section section\">\n                <slot\n                  name=\"center\"\n                  onSlotchange={() => this.#computeCenterSlotHasContent()}\n                />\n              </div>\n            )}\n            <div class=\"right-section section\">\n              <slot name=\"right\" />\n            </div>\n          </div>\n        </header>\n      </Host>\n    );\n  }\n\n  /**\n   * 计算中心插槽是否有内容\n   * @private 私有方法\n   */\n  #computeCenterSlotHasContent() {\n    this.centerSlotHasContent = hasSlot(this.host, 'center');\n  }\n\n  /**\n   * 计算颜色是亮色还是暗色\n   * @private 私有方法\n   * @returns {'light' | 'dark'} 返回颜色亮度类型\n   */\n  #computeColorLightOrDark() {\n    const color = getComputedStyle(document.documentElement).getPropertyValue(\n      `--color-${this.computedColor}`,\n    );\n    return isLightOrDark(color);\n  }\n\n  /**\n   * 计算最终使用的颜色\n   * @private 私有方法\n   * 根据当前主题模式选择适当颜色，并更新子组件颜色\n   */\n  #computedColor() {\n    this.computedColor = this.color;\n    if (isDarkMode() && this.darkModeColor) {\n      this.computedColor = this.darkModeColor;\n    }\n    this.host.querySelectorAll('zane-header-action').forEach((el) => {\n      (el as any).setColor(this.computedColor);\n    });\n    (this.host.querySelector('zane-header-brand') as any)?.setColor(\n      this.computedColor,\n    );\n  }\n\n  /**\n   * 获取布局列类型\n   * @private 私有方法\n   * @returns {'two-column' | 'three-column'} 根据插槽内容返回布局类型\n   */\n  #getColumnType() {\n    return this.centerSlotHasContent ? 'three-column' : 'two-column';\n  }\n}\n"],"mappings":"oMAAA,MAAMA,EAAY,w8K,iXCqBLC,EAAM,MALnB,WAAAC,CAAAC,G,sBAUWC,KAAoBC,qBAAG,MAgBxBD,KAAKE,MAQA,QA6BLF,KAAKG,MAAY,MAgBhBH,KAASI,UAAqB,OA0GxC,CAnGC,YAAAC,GACEC,EAAAN,KAAIO,EAAA,IAAAC,GAAJC,KAAAT,K,CAOF,iBAAAU,GACEV,KAAKK,eACLC,EAAAN,KAAIO,EAAA,IAAAI,GAAJF,KAAAT,MACAY,GAAmB,KACjBZ,KAAKI,UAAYS,IAAe,OAAS,QACzCb,KAAKK,cAAc,G,CAQvB,MAAAS,GACE,OACEC,EAACC,EAAI,CAAAC,IAAA,sDAAWX,EAAAN,KAAIO,EAAA,IAAAW,GAAJT,KAAAT,OACde,EAAA,UAAAE,IAAA,2CACEE,MAAO,CACL,CAAC,SAASnB,KAAKoB,iBAAkB,KACjCjB,MAAOH,KAAKG,MACZkB,OAAQ,KACR,CAACf,EAAAN,KAAmBO,EAAA,IAAAe,GAAAb,KAAnBT,OAAwB,OAG3Be,EAAK,OAAAE,IAAA,2CAAAE,MAAM,oBACTJ,EAAK,OAAAE,IAAA,2CAAAE,MAAM,wBACTJ,EAAA,QAAAE,IAAA,2CAAMM,KAAK,UAEZvB,KAAKC,sBACJc,EAAK,OAAAE,IAAA,2CAAAE,MAAM,0BACTJ,EAAA,QAAAE,IAAA,2CACEM,KAAK,SACLC,aAAc,IAAMlB,EAAAN,KAAiCO,EAAA,IAAAI,GAAAF,KAAjCT,SAI1Be,EAAK,OAAAE,IAAA,2CAAAE,MAAM,yBACTJ,EAAM,QAAAE,IAAA,2CAAAM,KAAK,a,+GAarBvB,KAAKC,qBAAuBwB,EAAQzB,KAAK0B,KAAM,SACjD,EAACR,EAAA,SAAAA,IAQC,MAAMhB,EAAQyB,iBAAiBC,SAASC,iBAAiBC,iBACvD,WAAW9B,KAAKoB,iBAElB,OAAOW,EAAc7B,EACvB,EAACM,EAAA,SAAAA,I,MAQCR,KAAKoB,cAAgBpB,KAAKE,MAC1B,GAAIW,KAAgBb,KAAKgC,cAAe,CACtChC,KAAKoB,cAAgBpB,KAAKgC,a,CAE5BhC,KAAK0B,KAAKO,iBAAiB,sBAAsBC,SAASC,IACvDA,EAAWC,SAASpC,KAAKoB,cAAc,KAE1CiB,EAACrC,KAAK0B,KAAKY,cAAc,wBAA4B,MAAAD,SAAA,SAAAA,EAAED,SACrDpC,KAAKoB,cAET,EAACE,EAAA,SAAAA,IAQC,OAAOtB,KAAKC,qBAAuB,eAAiB,YACtD,E","ignoreList":[]}