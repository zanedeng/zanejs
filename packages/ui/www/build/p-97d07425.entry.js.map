{"version":3,"names":["modalCss","Modal","constructor","hostRef","this","hideClose","managed","open","showLoader","size","closeModal","zaneModalClose","emit","render","h","Host","key","class","role","onClick","event","target","classList","contains","modal","subheading","color","type","heading","darkModeColor","icon","title","variant","name","watchHandler","newValue","document","body","style","overflow"],"sources":["src/components/modal/modal/modal.scss?tag=zane-modal&encapsulation=shadow","src/components/modal/modal/modal.tsx"],"sourcesContent":["@use '../../../global/styles/commons';\n\n:host {\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: var(--z-index-modal);\n  display: none;\n  width: 100vw;\n  height: 100vh;\n}\n\n:host([open]) {\n  display: block;\n}\n\n.modal-container {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100vw;\n  height: 100vh;\n\n  .modal-overlay {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    content: '';\n    background: var(--overlay);\n  }\n\n  .modal--wrapper {\n    z-index: 1;\n    width: 100vw;\n    height: 100vh;\n    padding: 10% 0 var(--spacing-09) 0;\n    overflow: auto;\n  }\n}\n\n.modal {\n  width: 100%;\n  margin: auto;\n  background: var(--layer-01);\n\n  .modal__content {\n    padding: 0 0 var(--spacing-09);\n  }\n\n  .modal-header {\n    display: flex;\n\n    .modal-heading-section {\n      flex: 1;\n      padding: 1rem 0 0 1rem;\n      margin-bottom: 1rem;\n\n      .modal-heading {\n        margin-bottom: 0;\n      }\n    }\n  }\n\n  .action-container {\n    display: flex;\n    flex-direction: row-reverse;\n\n    .close-icon {\n      --zane-button-height: 3rem;\n      --zane-button-border-radius: 0;\n    }\n  }\n\n  /*\n   * Loader styles\n   */\n  &.show-loader {\n    position: relative;\n  }\n\n  .modal__loading {\n    position: absolute;\n    top: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    height: 100%;\n\n    .modal__loading-background {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      content: '';\n      background: var(--overlay);\n    }\n  }\n}\n\n/**\n  * SIZES\n  */\n\n:host([size='xs']) {\n  @include commons.for-phone-only {\n    .modal {\n      width: 100%;\n    }\n  }\n\n  @include commons.for-tablet-portrait-up {\n    .modal {\n      width: 48%;\n    }\n  }\n\n  @include commons.for-tablet-landscape-up {\n    .modal {\n      width: 32%;\n    }\n  }\n\n  @include commons.for-desktop-up {\n    .modal {\n      width: 24%;\n    }\n  }\n}\n\n:host([size='sm']) {\n  @include commons.for-phone-only {\n    .modal {\n      width: 100%;\n    }\n  }\n\n  @include commons.for-tablet-portrait-up {\n    .modal {\n      width: 60%;\n    }\n  }\n\n  @include commons.for-tablet-landscape-up {\n    .modal {\n      width: 42%;\n    }\n  }\n\n  @include commons.for-desktop-up {\n    .modal {\n      width: 36%;\n    }\n  }\n}\n\n:host([size='md']) {\n  @include commons.for-phone-only {\n    .modal {\n      width: 100%;\n    }\n  }\n\n  @include commons.for-tablet-portrait-up {\n    .modal {\n      width: 84%;\n    }\n  }\n\n  @include commons.for-tablet-landscape-up {\n    .modal {\n      width: 60%;\n    }\n  }\n\n  @include commons.for-desktop-up {\n    .modal {\n      width: 48%;\n    }\n  }\n}\n\n:host([size='lg']) {\n  @include commons.for-phone-only {\n    .modal {\n      width: 100%;\n    }\n  }\n\n  @include commons.for-tablet-portrait-up {\n    .modal {\n      width: 96%;\n    }\n  }\n\n  @include commons.for-tablet-landscape-up {\n    .modal {\n      width: 84%;\n    }\n  }\n\n  @include commons.for-desktop-up {\n    .modal {\n      width: 72%;\n    }\n  }\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Prop,\n  Watch,\n} from '@stencil/core';\n\n/**\n * 模态框组件 (zane-modal)\n *\n * @component zane-modal\n * @shadow true\n *\n * @description\n * 提供企业级应用的模态对话框解决方案，支持：\n * - 多种预设尺寸响应式布局\n * - 灵活的内容插槽（头部/主体/底部）\n * - 加载状态可视化\n * - 可控关闭行为（自动关闭/受控关闭）\n * - 无障碍访问支持\n * - 滚动条自动管理\n *\n * @example\n * <!-- 基础用法 -->\n * <zane-modal\n *   heading=\"确认操作\"\n *   open={true}>\n *   <p>确定要删除此项吗？</p>\n *   <div slot=\"footer\">\n *     <zane-button>取消</zane-button>\n *     <zane-button variant=\"primary\">确定</zane-button>\n *   </div>\n * </zane-modal>\n *\n * <!-- 带加载状态的模态框 -->\n * <zane-modal\n *   heading=\"数据处理中\"\n *   open={true}\n *   showLoader={true}>\n *   <p>请稍候，正在保存您的数据...</p>\n * </zane-modal>\n */\n@Component({\n  shadow: true,\n  styleUrl: 'modal.scss',\n  tag: 'zane-modal',\n})\nexport class Modal {\n  @Element() elm!: HTMLElement;\n\n  /**\n   * 模态框主标题\n   * @prop {string} heading - 显示在顶部的标题文本\n   * @visualEffect 使用 heading 样式（字号1.25rem/粗体）\n   */\n  @Prop({ reflect: true }) heading: string;\n\n  /**\n   * 隐藏关闭按钮\n   * @prop {boolean} hideClose - 是否隐藏右上角关闭按钮（默认false）\n   * @default false\n   */\n  @Prop({ reflect: true }) hideClose: boolean = false;\n\n  /**\n   * 受控模式开关\n   * @prop {boolean} managed - 是否由外部状态控制关闭行为（默认false）\n   * @behavior\n   * - false（默认）：组件内部管理 open 状态（点击关闭按钮自动关闭）\n   * - true：需外部监听 zane-modal--close 事件并手动更新 open 状态\n   * @usageNote 在复杂状态管理场景中使用（如React/Vue集成）\n   */\n  @Prop() managed: boolean = false;\n\n  /**\n   * 模态框开启状态\n   * @prop {boolean} open - 控制模态框显示/隐藏（默认false）\n   * @important 核心显示控制属性\n   * @effect 开启时自动禁用页面滚动（关闭时恢复）\n   */\n  @Prop({ reflect: true }) open: boolean = false;\n\n  /**\n   * 加载状态显示\n   * @prop {boolean} showLoader - 是否显示加载指示器（默认false）\n   * @visualEffect\n   * - 半透明遮罩层覆盖内容区\n   * - 居中显示旋转加载图标\n   * @usageNote 适合异步操作期间禁用交互\n   */\n  @Prop({ reflect: true }) showLoader: boolean = false;\n\n  /**\n   * 模态框尺寸方案\n   * @prop {'lg' | 'md' | 'sm'} size - 预设响应式尺寸（默认'md'）\n   * @options\n   * - 'sm'：小尺寸\n   * - 'md'：中尺寸- 默认值\n   * - 'lg'：大尺寸\n   * @responsive 自动适配移动端（小屏下占满宽度）\n   */\n  @Prop({ reflect: true }) size: 'lg' | 'md' | 'sm' = 'md';\n\n  /**\n   * 副标题文本\n   * @prop {string} subheading - 显示在主标题下方的辅助文本\n   * @visualEffect 次级文本样式（字号0.875rem/灰色）\n   */\n  @Prop({ reflect: true }) subheading: string;\n\n  /**\n   * 模态框关闭事件\n   * @event zane-modal--close\n   * @description 当以下情况触发：\n   * - 点击关闭按钮\n   * - 点击模态框外部遮罩层\n   * @important 受控模式下必须监听此事件来更新 open 状态\n   */\n  @Event({ eventName: 'zane-modal--close' }) zaneModalClose: EventEmitter;\n\n  /**\n   * 关闭模态框方法\n   * @method closeModal\n   * @description\n   * 1. 非受控模式下自动更新 open 状态\n   * 2. 触发 zane-modal--close 事件\n   * 3. 恢复页面滚动能力\n   */\n  closeModal() {\n    if (!this.managed) {\n      this.open = false;\n    }\n    this.zaneModalClose.emit();\n  }\n\n  /**\n   * 核心渲染方法\n   * @returns {JSX.Element} 模态框虚拟DOM结构\n   * @renderStructure\n   * 1. 遮罩层（modal-overlay）\n   * 2. 模态框容器（modal--wrapper）\n   * 3. 内容区域（含尺寸控制类）\n   *   - 头部（header）: 标题+关闭按钮\n   *   - 主体（content）: 默认插槽\n   *   - 底部（footer）: footer插槽\n   *   - 加载状态（loading）: 条件渲染\n   */\n  render() {\n    if (this.open)\n      return (\n        <Host>\n          <div\n            aria-labelledby=\"modal-heading\"\n            aria-modal=\"true\"\n            class=\"modal-container\"\n            role=\"dialog\"\n          >\n            <div class=\"modal-overlay\" />\n            <div\n              class=\"modal--wrapper\"\n              onClick={(event) => {\n                if (\n                  (event.target as HTMLElement).classList.contains(\n                    'modal--wrapper',\n                  )\n                )\n                  this.closeModal();\n              }}\n            >\n              <div\n                class={{\n                  [`size-${this.size}`]: true,\n                  modal: true,\n                  'show-loader': this.showLoader,\n                }}\n              >\n                <div class=\"modal-body\">\n                  <div class=\"modal-header\">\n                    <div class=\"modal-heading-section\">\n                      {this.subheading && (\n                        <zane-text\n                          class=\"modal-subheading\"\n                          color=\"secondary\"\n                          type=\"label\"\n                        >\n                          {this.subheading}\n                        </zane-text>\n                      )}\n\n                      {this.heading && (\n                        <zane-text\n                          class=\"modal-heading\"\n                          heading-size=\"3\"\n                          type=\"heading\"\n                        >\n                          {this.heading}\n                        </zane-text>\n                      )}\n                    </div>\n                    <div class=\"action-container\">\n                      {!this.hideClose && (\n                        <zane-button\n                          class=\"close-icon cancel-button\"\n                          color=\"black\"\n                          darkModeColor=\"white\"\n                          icon=\"close--large\"\n                          onZane-button--click={() => {\n                            this.closeModal();\n                          }}\n                          title=\"Close\"\n                          variant=\"ghost\"\n                        ></zane-button>\n                      )}\n                    </div>\n                  </div>\n\n                  <div class=\"modal__content\">\n                    <slot />\n                  </div>\n\n                  {this.showLoader && (\n                    <div class=\"modal__loading\">\n                      <div class=\"modal__loading-background\"></div>\n                      <zane-spinner size=\"2rem\"></zane-spinner>\n                    </div>\n                  )}\n                </div>\n\n                <div class=\"modal__footer\">\n                  <slot name=\"footer\"></slot>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Host>\n      );\n  }\n\n  /**\n   * open 属性监听器\n   * @listens open\n   * @description 控制页面滚动条行为\n   * @effect\n   * - open=true: 禁用页面滚动（body.overflow=hidden ）\n   * - open=false: 恢复页面滚动（body.overflow=visible ）\n   * @param {boolean} newValue - open 属性的新值\n   */\n  @Watch('open')\n  watchHandler(newValue: boolean) {\n    document.body.style.overflow = newValue ? 'hidden' : 'visible';\n  }\n}\n"],"mappings":"gEAAA,MAAMA,EAAW,m3J,MCmDJC,EAAK,MALlB,WAAAC,CAAAC,G,0DAoB2BC,KAASC,UAAY,MAUtCD,KAAOE,QAAY,MAQFF,KAAIG,KAAY,MAUhBH,KAAUI,WAAY,MAWtBJ,KAAIK,KAAuB,IAsJrD,CA3HC,UAAAC,GACE,IAAKN,KAAKE,QAAS,CACjBF,KAAKG,KAAO,K,CAEdH,KAAKO,eAAeC,M,CAetB,MAAAC,GACE,GAAIT,KAAKG,KACP,OACEO,EAACC,EAAI,CAAAC,IAAA,4CACHF,EACkB,OAAAE,IAAA,6EACL,oBACXC,MAAM,kBACNC,KAAK,UAELJ,EAAK,OAAAE,IAAA,2CAAAC,MAAM,kBACXH,EACE,OAAAE,IAAA,2CAAAC,MAAM,iBACNE,QAAUC,IACR,GACGA,EAAMC,OAAuBC,UAAUC,SACtC,kBAGFnB,KAAKM,YAAY,GAGrBI,EAAA,OAAAE,IAAA,2CACEC,MAAO,CACL,CAAC,QAAQb,KAAKK,QAAS,KACvBe,MAAO,KACP,cAAepB,KAAKI,aAGtBM,EAAK,OAAAE,IAAA,2CAAAC,MAAM,cACTH,EAAK,OAAAE,IAAA,2CAAAC,MAAM,gBACTH,EAAK,OAAAE,IAAA,2CAAAC,MAAM,yBACRb,KAAKqB,YACJX,EAAA,aAAAE,IAAA,2CACEC,MAAM,mBACNS,MAAM,YACNC,KAAK,SAEJvB,KAAKqB,YAITrB,KAAKwB,SACJd,EAAA,aAAAE,IAAA,2CACEC,MAAM,gBACO,mBACbU,KAAK,WAEJvB,KAAKwB,UAIZd,EAAA,OAAAE,IAAA,2CAAKC,MAAM,qBACPb,KAAKC,WACLS,EACE,eAAAE,IAAA,2CAAAC,MAAM,2BACNS,MAAM,QACNG,cAAc,QACdC,KAAK,eACiB,4BACpB1B,KAAKM,YAAY,EAEnBqB,MAAM,QACNC,QAAQ,YAMhBlB,EAAK,OAAAE,IAAA,2CAAAC,MAAM,kBACTH,EAAA,QAAAE,IAAA,8CAGDZ,KAAKI,YACJM,EAAK,OAAAE,IAAA,2CAAAC,MAAM,kBACTH,EAAK,OAAAE,IAAA,2CAAAC,MAAM,8BACXH,EAAA,gBAAAE,IAAA,2CAAcP,KAAK,WAKzBK,EAAK,OAAAE,IAAA,2CAAAC,MAAM,iBACTH,EAAM,QAAAE,IAAA,2CAAAiB,KAAK,e,CAmB3B,YAAAC,CAAaC,GACXC,SAASC,KAAKC,MAAMC,SAAWJ,EAAW,SAAW,S","ignoreList":[]}