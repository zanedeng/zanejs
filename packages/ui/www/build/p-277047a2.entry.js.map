{"version":3,"names":["headerActionCss","HeaderAction","constructor","hostRef","this","badge","configAria","selected","size","slotHasContent","target","componentWillLoad","elm","hasChildNodes","getAttributeNames","forEach","name","includes","getAttribute","removeAttribute","render","h","key","class","color","href","icon","variant","setColor"],"sources":["src/components/application/header/header-action/header-action.scss?tag=zane-header-action&encapsulation=shadow","src/components/application/header/header-action/header-action.tsx"],"sourcesContent":["@use '../../../../global/styles/commons';\n\n:host {\n  display: block;\n  height: var(--zane-header-height);\n}\n\n.header-action {\n  --zane-button-padding: 0.75rem;\n  --zane-button-height: 100%;\n  --zane-button-border-radius: 0;\n\n  margin-inline-end: 0.5rem;\n}\n\n:host-context(zane-header[float]) {\n  height: calc(var(--zane-header-height) - 2px);\n}\n\n:host-context(:not(zane-header[float])) .header-action {\n  margin-inline-end: 0;\n}\n","import { Component, Element, h, Method, Prop, State } from '@stencil/core';\n\n@Component({\n  shadow: true,\n  styleUrl: 'header-action.scss',\n  tag: 'zane-header-action',\n})\nexport class HeaderAction {\n  @Prop() badge: string = '_self';\n\n  @State() color: any;\n\n  @Prop({ mutable: true, reflect: true }) configAria: any = {};\n\n  @Element() elm!: HTMLElement;\n\n  /**\n   * Hyperlink to navigate to on click.\n   */\n  @Prop({ reflect: true }) href: string;\n\n  /**\n   * Icon which will displayed on button.\n   * Possible values are icon names.\n   */\n  @Prop() icon: string;\n\n  /**\n   * Button selection state.\n   */\n  @Prop() selected: boolean = false;\n\n  /**\n   * Button size.\n   * Possible values are `\"sm\"`, `\"md\"`, `\"lg\"`, `\"xl\"`, `\"xxl\"`, `\"none\"`. Defaults to `\"md\"`.\n   */\n  @Prop() size: 'lg' | 'md' | 'none' | 'sm' | 'xl' | 'xxl' = 'md';\n\n  @State() slotHasContent = false;\n\n  /**\n   * Sets or retrieves the window or frame at which to target content.\n   */\n  @Prop() target: string = '_self';\n\n  componentWillLoad() {\n    this.slotHasContent = this.elm.hasChildNodes();\n    if (this.elm.getAttributeNames)\n      this.elm.getAttributeNames().forEach((name: string) => {\n        if (name.includes('aria-')) {\n          this.configAria[name] = this.elm.getAttribute(name);\n          this.elm.removeAttribute(name);\n        }\n      });\n  }\n\n  render() {\n    return (\n      <zane-button\n        class=\"header-action\"\n        color={this.color}\n        configAria={this.configAria}\n        href={this.href}\n        icon={this.icon}\n        selected={this.selected}\n        target={this.target}\n        variant={'default.simple'}\n      >\n        {this.slotHasContent && <slot></slot>}\n      </zane-button>\n    );\n  }\n\n  /*\n   * @internal\n   */\n  @Method()\n  async setColor(color: string) {\n    this.color = color;\n  }\n}\n"],"mappings":"kDAAA,MAAMA,EAAkB,iqF,MCOXC,EAAY,MALzB,WAAAC,CAAAC,G,UAMUC,KAAKC,MAAW,QAIgBD,KAAUE,WAAQ,GAkBlDF,KAAQG,SAAY,MAMpBH,KAAII,KAA+C,KAElDJ,KAAcK,eAAG,MAKlBL,KAAMM,OAAW,OAqC1B,CAnCC,iBAAAC,GACEP,KAAKK,eAAiBL,KAAKQ,IAAIC,gBAC/B,GAAIT,KAAKQ,IAAIE,kBACXV,KAAKQ,IAAIE,oBAAoBC,SAASC,IACpC,GAAIA,EAAKC,SAAS,SAAU,CAC1Bb,KAAKE,WAAWU,GAAQZ,KAAKQ,IAAIM,aAAaF,GAC9CZ,KAAKQ,IAAIO,gBAAgBH,E,KAKjC,MAAAI,GACE,OACEC,EACE,eAAAC,IAAA,2CAAAC,MAAM,gBACNC,MAAOpB,KAAKoB,MACZlB,WAAYF,KAAKE,WACjBmB,KAAMrB,KAAKqB,KACXC,KAAMtB,KAAKsB,KACXnB,SAAUH,KAAKG,SACfG,OAAQN,KAAKM,OACbiB,QAAS,kBAERvB,KAAKK,gBAAkBY,EAAA,QAAAC,IAAA,6C,CAS9B,cAAMM,CAASJ,GACbpB,KAAKoB,MAAQA,C","ignoreList":[]}