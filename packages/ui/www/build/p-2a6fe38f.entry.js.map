{"version":3,"names":["popoverCss","Popover","constructor","hostRef","this","dismissTimeout","gid","getComponentIndex","offset","open","openTimeout","tip","trigger","hidePopover","closeEvent","emit","showPopover","setTimeout","openEvent","componentDidLoad","contentRef","host","querySelector","Error","arrowRef","shadowRoot","popoverController","PopoverController","placements","triggerRef","slotRef","assignedElements","nodeName","length","registerTarget","setTriggerRef","triggerObserver","IntersectionObserver","entries","isIntersecting","computePositionThrottle","disconnect","threshold","observe","componentDidUpdate","setOpen","componentWillLoad","disconnectedCallback","destroy","hide","render","h","Host","key","class","popover","ref","el","resizeHandler","show","target","windowClickHandler","evt","popoverContentCss","PopoverContent","tooltipCss","Tooltip","content","elm","popoverElm","name","windowMouseOver","path","composedPath","hasAttribute","getAttribute","targetElm"],"sources":["src/components/popover/popover/popover.scss?tag=zane-popover&encapsulation=shadow","src/components/popover/popover/popover.tsx","src/components/popover/popover-content/popover-content.scss?tag=zane-popover-content&encapsulation=shadow","src/components/popover/popover-content/popover-content.tsx","src/components/tooltip/tooltip.scss?tag=zane-tooltip&encapsulation=shadow","src/components/tooltip/tooltip.tsx"],"sourcesContent":["@use \"../../../global/styles/commons\";\n\n:host {\n  display: inline-block;\n  --zane-popover-tiptab-padding: 0.5rem;\n  --zane-popover-height: inherit;\n  height: var(--zane-popover-height);\n}\n\n.popover {\n  height: var(--zane-popover-height);\n\n  &.tip-tab {\n    padding: var(--zane-popover-tiptab-padding);\n    line-height: 0;\n    transition: background 0.1s ease-out 0s;\n\n    &.open {\n      background: var(--layer);\n    }\n  }\n}\n","import {\n  Component,\n  ComponentInterface,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n} from '@stencil/core';\n\nimport { getComponentIndex } from '../../../utils';\nimport PopoverController from './popover-controller';\n\n/**\n * @name Popover\n * @description The Popover component is used to display additional information.\n * @category Informational\n * @subcategory Popover\n * @img /assets/img/dropdown.webp\n * @imgDark /assets/img/dropdown-dark.webp\n */\n@Component({\n  shadow: true,\n  styleUrl: 'popover.scss',\n  tag: 'zane-popover',\n})\nexport class Popover implements ComponentInterface {\n  /**\n   * Emitted when the popover is closed.\n   */\n  @Event({ eventName: 'zane-popover--close' }) closeEvent: EventEmitter;\n\n  /**\n   * Time in milliseconds to wait before hiding the popover when the trigger is set to `\"hover\"`.\n   */\n  @Prop() dismissTimeout: number = 300;\n  gid: string = getComponentIndex();\n  @Element() host!: HTMLElement;\n\n  /**\n   * The offset of the popover relative to the trigger element.\n   * This value is used to adjust the position of the popover along the axis of the trigger element.\n   */\n  @Prop() offset: number = 4;\n\n  /**\n   * Determines whether the popover is open.\n   */\n  @Prop({ mutable: true, reflect: true }) open: boolean = false;\n\n  /**\n   * Emitted when the popover is opened.\n   */\n  @Event({ eventName: 'zane-popover--open' }) openEvent: EventEmitter;\n\n  /**\n   * Time in milliseconds to wait before showing the popover when the trigger is set to `\"hover\"`.\n   */\n  @Prop() openTimeout: number = 200;\n\n  /**\n   * The placement of the popover relative to the trigger element.\n   * Possible values are:\n   * - `\"top\"`: The popover is placed above the trigger element.\n   * - `\"top-start\"`: The popover is placed above the trigger element, aligned to the start.\n   * - `\"top-end\"`: The popover is placed above the trigger element, aligned to the end.\n   * - `\"right\"`: The popover is placed to the right of the trigger element.\n   * - `\"right-start\"`: The popover is placed to the right of the trigger element, aligned to the start.\n   * - `\"right-end\"`: The popover is placed to the right of the trigger element, aligned to the end.\n   * - `\"bottom\"`: The popover is placed below the trigger element.\n   * - `\"bottom-start\"`: The popover is placed below the trigger element, aligned to the start.\n   * - `\"bottom-end\"`: The popover is placed below the trigger element, aligned to the end.\n   * - `\"left\"`: The popover is placed to the left of the trigger element.\n   * - `\"left-start\"`: The popover is placed to the left of the trigger element, aligned to the start.\n   * - `\"left-end\"`: The popover is placed to the left of the trigger element, aligned to the end.\n   */\n  @Prop({ mutable: true }) placements: string;\n\n  popoverController: PopoverController;\n\n  slotRef: HTMLSlotElement;\n\n  /**\n   * The tip of the popover.\n   * Possible values are:\n   * - `\"caret\"`: A triangle tip.\n   * - `\"tab\"`: A tab tip.\n   * - `\"none\"`: No tip.\n   */\n  @Prop({ reflect: true }) tip: 'caret' | 'none' | 'tab' = 'caret';\n\n  /**\n   * Determines how the popover is triggered.\n   * Possible values are:\n   * - `\"click\"`: The popover is shown or hidden when the trigger element is clicked.\n   * - `\"hover\"`: The popover is shown when the mouse hovers over the trigger element and hidden when it leaves.\n   * - `\"manual\"`: The visibility of the popover must be manually controlled through the `open` property.\n   */\n  @Prop() trigger: 'click' | 'hover' | 'manual' = 'hover';\n\n  async componentDidLoad() {\n    const contentRef = this.host.querySelector('zane-popover-content');\n\n    if (!contentRef) {\n      throw new Error(\n        'The zane-popover component requires a zane-popover-content component to be present.',\n      );\n    }\n\n    const arrowRef = contentRef.shadowRoot.querySelector(\n      '.arrow',\n    ) as HTMLElement;\n\n    this.popoverController = new PopoverController(\n      this.host,\n      this.trigger,\n      this.open,\n      contentRef as HTMLElement,\n      this.tip === 'tab' ? 0 : this.offset,\n      this.tip === 'tab' ? 8 : 0,\n      this.showPopover,\n      this.hidePopover,\n      this.placements,\n      this.openTimeout,\n      this.dismissTimeout,\n      this.tip === 'caret' ? arrowRef : null,\n    );\n\n    let triggerRef = this.slotRef.assignedElements()[0] as HTMLElement;\n    if (triggerRef.nodeName === 'SLOT') {\n      const assignedElements = (\n        triggerRef as HTMLSlotElement\n      ).assignedElements();\n      if (\n        assignedElements.length > 0 &&\n        assignedElements[0].nodeName !== 'ZANE-POPOVER-CONTENT'\n      ) {\n        triggerRef = assignedElements[0] as HTMLSlotElement;\n      }\n    }\n\n    if (triggerRef) {\n      this.popoverController.registerTarget(triggerRef);\n      this.popoverController.setTriggerRef(triggerRef);\n    }\n\n    if (this.open) {\n      const triggerObserver = new IntersectionObserver(\n        (entries) => {\n          if (entries[0].isIntersecting) {\n            this.popoverController.computePositionThrottle('onLoad');\n            triggerObserver.disconnect();\n          }\n        },\n        {\n          threshold: [0, 1],\n        },\n      );\n      triggerObserver.observe(triggerRef);\n    }\n  }\n\n  componentDidUpdate() {\n    this.popoverController.setOpen(this.open);\n    if (this.open) {\n      this.popoverController.computePositionThrottle('onUpdate');\n    }\n  }\n\n  componentWillLoad() {\n    if (this.tip === 'tab' && !this.placements) {\n      this.placements = 'bottom-end,bottom-start,top-end,top-start';\n    }\n  }\n\n  disconnectedCallback() {\n    this.popoverController.destroy();\n  }\n\n  /**\n   * Hides the popover. This method is useful when the trigger is set to `\"manual\"`.\n   */\n  @Method()\n  async hide() {\n    this.open = false;\n  }\n\n  hidePopover = () => {\n    this.open = false;\n    this.closeEvent.emit();\n  };\n\n  render() {\n    return (\n      <Host gid={this.gid}>\n        <div\n          class={{\n            [`tip-${this.tip}`]: true,\n            open: this.open,\n            popover: true,\n          }}\n        >\n          <slot ref={(el) => (this.slotRef = el as HTMLSlotElement)} />\n        </div>\n      </Host>\n    );\n  }\n\n  @Listen('resize', { target: 'window' })\n  resizeHandler() {\n    this.popoverController.computePositionThrottle('resize');\n  }\n\n  /**\n   * Shows the popover.\n   * This method is particularly useful when the trigger mode is set to `\"manual\"`.\n   * It allows for programmatic control over the visibility of the popover, making it visible regardless of the trigger mode.\n   * Optionally, a target HTMLElement can be provided to dynamically set the trigger element for the popover.\n   */\n  @Method()\n  async show(target?: HTMLElement) {\n    if (target) {\n      this.popoverController.registerTarget(target);\n      this.popoverController.setTriggerRef(target);\n    }\n    this.showPopover();\n  }\n\n  showPopover = () => {\n    this.open = true;\n    setTimeout(() => this.openEvent.emit());\n  };\n\n  @Listen('click', { target: 'window' })\n  windowClickHandler(evt) {\n    this.popoverController.windowClickHandler(evt);\n  }\n}\n","@use \"../../../global/styles/commons\";\n\n:host {\n  display: inline-block;\n  transform: scale(0);\n  top: 0;\n  left: 0;\n  position: absolute;\n  pointer-events: none;\n  transition: transform 0.1s ease-out 0s;\n\n  z-index: commons.v(--z-index-popover);\n\n  /**\n   * @prop --popover-content-background: Background color of the popover content\n   */\n  --popover-content-background: var(--layer);\n\n  /**\n   * @prop --popover-padding: Padding of the popover content\n   */\n  --popover-content-padding: #{commons.v(--spacing-05)};\n\n  /**\n   * @prop --popover-content-border-radius: Border radius of the popover content\n   */\n  --popover-content-border-radius: 2px;\n\n  /**\n    * @prop --zane-menu-shadow: Shadow of popover content\n   */\n  --popover-content-shadow: none;\n\n  --popover-content-caret-size: 0.75rem;\n}\n\n:host-context(zane-popover[open]) {\n  pointer-events: auto;\n  transform: scale(1);\n}\n\n:host-context(zane-popover[tip=\"caret\"]) {\n  .arrow {\n    transform: rotate(45deg) scale(1);\n  }\n}\n\n.popover-content {\n  position: relative;\n  background: var(--popover-content-background);\n  padding: var(--popover-content-padding);\n  border-radius: var(--popover-content-border-radius);\n  filter: var(--popover-content-shadow, none);\n\n  .arrow {\n    width: var(--popover-content-caret-size);\n    height: var(--popover-content-caret-size);\n    background: var(--popover-content-background);\n    transform: rotate(45deg) scale(0);\n    position: absolute;\n    z-index: -1;\n  }\n\n}\n","import { Component, ComponentInterface, Element, h, Host } from '@stencil/core';\n\nimport { getComponentIndex } from '../../../utils';\n\n/**\n * @name Popover Content\n * @description The PopoverContent component is used to display additional information.\n * @category Informational\n * @subcategory Popover\n * @childComponent true\n */\n@Component({\n  shadow: true,\n  styleUrl: 'popover-content.scss',\n  tag: 'zane-popover-content',\n})\nexport class PopoverContent implements ComponentInterface {\n  gid: string = getComponentIndex();\n\n  @Element() host!: HTMLElement;\n\n  render() {\n    return (\n      <Host>\n        <div class=\"popover-content\">\n          <slot />\n\n          <div class=\"arrow\"></div>\n        </div>\n      </Host>\n    );\n  }\n}\n","@use \"../../global/styles/commons\";\n\n:host {\n  display: inline-block;\n  --zane-tooltip-height: inherit;\n  height: var(--zane-tooltip-height);\n}\n\n.popover {\n  --zane-popover-height: var(--zane-tooltip-height);\n}\n\n.tooltip-content {\n  @include commons.font-style(label-01);\n  color: var(--text-inverse);\n  max-width: 18rem;\n  --popover-content-background: var(--background-inverse);\n  --popover-content-padding: var(--spacing-03) var(--spacing-05);\n  --popover-content-border-radius: 0;\n  --popover-content-caret-size: 0.5rem;\n}\n","import { Component, Element, h, Host, Listen, Prop } from '@stencil/core';\n\n/**\n * @name Tooltip\n * @description The Tooltip component is used to display additional information on hover.\n * @category Informational\n * @tag content\n * @img /assets/img/tooltip.webp\n * @imgDark /assets/img/tooltip-dark.webp\n */\n@Component({\n  shadow: true,\n  styleUrl: 'tooltip.scss',\n  tag: 'zane-tooltip',\n})\nexport class Tooltip {\n  /**\n   * The content of the tooltip.\n   */\n  @Prop({ mutable: true }) content: string = '';\n\n  @Element() elm!: HTMLElement;\n\n  /**\n   * The placement of the popover relative to the trigger element.\n   * Possible values are:\n   * - `\"top\"`: The popover is placed above the trigger element.\n   * - `\"right\"`: The popover is placed to the right of the trigger element.\n   * - `\"bottom\"`: The popover is placed below the trigger element.\n   * - `\"left\"`: The popover is placed to the left of the trigger element.\n   */\n  @Prop() placements: string = 'top,bottom,right,left';\n\n  popoverElm: any;\n\n  targetElm: HTMLElement;\n\n  /**\n   * If true, the tooltip will be managed by the parent component.\n   */\n  @Prop({ reflect: true }) trigger: 'hover' | 'manual' = 'hover';\n\n  render() {\n    return (\n      <Host>\n        <zane-popover\n          class=\"popover\"\n          placements={this.placements}\n          ref={(elm) => (this.popoverElm = elm)}\n          tip=\"caret\"\n          trigger={this.trigger}\n        >\n          <slot />\n\n          <zane-popover-content class=\"tooltip-content\">\n            {this.content}\n            <slot name=\"content\"></slot>\n          </zane-popover-content>\n        </zane-popover>\n      </Host>\n    );\n  }\n\n  @Listen('mouseover', { target: 'window' })\n  windowMouseOver(evt) {\n    const path = evt.path || evt.composedPath();\n    for (const elm of path) {\n      if (elm === this.elm) return;\n    }\n    let target: HTMLElement;\n    for (const elm of path) {\n      if (\n        elm.hasAttribute &&\n        elm.hasAttribute('tooltip-target') &&\n        elm.getAttribute('tooltip-target') === this.elm.getAttribute('id')\n      )\n        target = elm;\n    }\n\n    if (target && this.targetElm !== target) {\n      this.targetElm = target;\n      if (target.hasAttribute('tooltip-content'))\n        this.content = target.getAttribute('tooltip-content');\n      this.popoverElm.show(target);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}