{"version":3,"names":["formControlCss","FormControl","constructor","hostRef","this","inline","invalid","required","skeleton","warn","componentDidLoad","elm","setAttribute","controlElm","getInputElement","passRequiredToField","passLabelToField","label","componentShouldUpdate","newVal","_oldVal","propName","compName","querySelector","getLabel","h","class","el","oldProps","configAria","Object","assign","render","Host","key","renderHelper","invalidText","warnText","helperText"],"sources":["src/components/form-control/form-control.scss?tag=zane-form-control&encapsulation=shadow","src/components/form-control/form-control.tsx"],"sourcesContent":["@use \"../../global/styles/common-input\";\n\n\n:host(.form-field) {\n  margin-bottom: common-input.v(--spacing-07);\n}\n","import {\n  Component,\n  ComponentInterface,\n  Element,\n  h,\n  Host,\n  Prop,\n} from '@stencil/core';\n\n/**\n * @name Form Control\n * @description The Form Control component adds a label and caption for its child control.\n * @category Form Inputs\n * @tags form\n * @example <zane-form-control label='Full Name' required>\n *   <zane-input type='text'></zane-input>\n * </zane-form-control>\n */\n@Component({\n  shadow: true,\n  styleUrl: 'form-control.scss',\n  tag: 'zane-form-control',\n})\nexport class FormControl implements ComponentInterface {\n  @Element() elm!: HTMLElement;\n\n  @Prop() helperText: string;\n\n  @Prop({ reflect: true }) inline: boolean = false;\n\n  @Prop() invalid: boolean = false;\n\n  @Prop() invalidText: string;\n\n  @Prop() label: string;\n\n  /**\n   * Whether the form control is required.\n   */\n  @Prop() required: boolean = false;\n\n  @Prop() skeleton: boolean = false;\n\n  @Prop() warn: boolean = false;\n\n  @Prop() warnText: string;\n\n  componentDidLoad() {\n    this.elm.setAttribute('role', 'group');\n    const controlElm = this.getInputElement();\n    this.passRequiredToField(controlElm, this.required);\n    this.passLabelToField(controlElm, this.label);\n  }\n\n  componentShouldUpdate(newVal: any, _oldVal, propName: string) {\n    if (propName === 'required') {\n      this.passRequiredToField(this.getInputElement(), newVal);\n    } else if (propName === 'label') {\n      this.passLabelToField(this.getInputElement(), newVal);\n    }\n  }\n\n  getInputElement() {\n    for (const compName of [\n      'zane-input',\n      'zane-textarea',\n      'zane-select',\n      'zane-checkbox',\n      'zane-radio',\n      'zane-code-editor',\n    ]) {\n      const controlElm = this.elm.querySelector(`${compName}`);\n      if (controlElm) return controlElm;\n    }\n  }\n\n  getLabel() {\n    return this.skeleton ? (\n      <div class=\"label skeleton\" />\n    ) : (\n      <label class=\"label\">\n        {this.required && <span class=\"required\">*</span>}\n        {this.label}\n      </label>\n    );\n  }\n\n  passLabelToField(controlElm: Element, label: string) {\n    if (controlElm) {\n      const el = controlElm as any;\n      const oldProps = el.configAria;\n      el.configAria = {\n        'aria-label': label,\n        ...oldProps,\n      };\n    }\n  }\n\n  passRequiredToField(controlElm: Element, required: boolean) {\n    if (controlElm) {\n      const el = controlElm as any;\n      el.required = required;\n    }\n  }\n\n  render() {\n    return (\n      <Host invalid={this.invalid} warn={this.warn}>\n        <div class={{ 'form-control': true, inline: this.inline }}>\n          {this.label && this.getLabel()}\n          <div class=\"field\">\n            <slot />\n          </div>\n          {this.renderHelper()}\n        </div>\n      </Host>\n    );\n  }\n\n  renderHelper() {\n    if (this.invalid)\n      return <div class=\"helper invalid\">{this.invalidText}</div>;\n    else if (this.warn) return <div class=\"helper warn\">{this.warnText}</div>;\n    else if (this.helperText || this.helperText === '')\n      return <div class=\"helper text\">{this.helperText}</div>;\n  }\n}\n"],"mappings":"yDAAA,MAAMA,EAAiB,mrP,MCuBVC,EAAW,MALxB,WAAAC,CAAAC,G,UAU2BC,KAAMC,OAAY,MAEnCD,KAAOE,QAAY,MASnBF,KAAQG,SAAY,MAEpBH,KAAQI,SAAY,MAEpBJ,KAAIK,KAAY,KAmFzB,CA/EC,gBAAAC,GACEN,KAAKO,IAAIC,aAAa,OAAQ,SAC9B,MAAMC,EAAaT,KAAKU,kBACxBV,KAAKW,oBAAoBF,EAAYT,KAAKG,UAC1CH,KAAKY,iBAAiBH,EAAYT,KAAKa,M,CAGzC,qBAAAC,CAAsBC,EAAaC,EAASC,GAC1C,GAAIA,IAAa,WAAY,CAC3BjB,KAAKW,oBAAoBX,KAAKU,kBAAmBK,E,MAC5C,GAAIE,IAAa,QAAS,CAC/BjB,KAAKY,iBAAiBZ,KAAKU,kBAAmBK,E,EAIlD,eAAAL,GACE,IAAK,MAAMQ,IAAY,CACrB,aACA,gBACA,cACA,gBACA,aACA,oBACC,CACD,MAAMT,EAAaT,KAAKO,IAAIY,cAAc,GAAGD,KAC7C,GAAIT,EAAY,OAAOA,C,EAI3B,QAAAW,GACE,OAAOpB,KAAKI,SACViB,EAAA,OAAKC,MAAM,mBAEXD,EAAO,SAAAC,MAAM,SACVtB,KAAKG,UAAYkB,EAAA,QAAMC,MAAM,YAAmB,KAChDtB,KAAKa,M,CAKZ,gBAAAD,CAAiBH,EAAqBI,GACpC,GAAIJ,EAAY,CACd,MAAMc,EAAKd,EACX,MAAMe,EAAWD,EAAGE,WACpBF,EAAGE,WACDC,OAAAC,OAAA,cAAcd,GACXW,E,EAKT,mBAAAb,CAAoBF,EAAqBN,GACvC,GAAIM,EAAY,CACd,MAAMc,EAAKd,EACXc,EAAGpB,SAAWA,C,EAIlB,MAAAyB,GACE,OACEP,EAACQ,EAAI,CAAAC,IAAA,2CAAC5B,QAASF,KAAKE,QAASG,KAAML,KAAKK,MACtCgB,EAAA,OAAAS,IAAA,2CAAKR,MAAO,CAAE,eAAgB,KAAMrB,OAAQD,KAAKC,SAC9CD,KAAKa,OAASb,KAAKoB,WACpBC,EAAK,OAAAS,IAAA,2CAAAR,MAAM,SACTD,EAAA,QAAAS,IAAA,8CAED9B,KAAK+B,gB,CAMd,YAAAA,GACE,GAAI/B,KAAKE,QACP,OAAOmB,EAAA,OAAKC,MAAM,kBAAkBtB,KAAKgC,kBACtC,GAAIhC,KAAKK,KAAM,OAAOgB,EAAA,OAAKC,MAAM,eAAetB,KAAKiC,eACrD,GAAIjC,KAAKkC,YAAclC,KAAKkC,aAAe,GAC9C,OAAOb,EAAA,OAAKC,MAAM,eAAetB,KAAKkC,W","ignoreList":[]}