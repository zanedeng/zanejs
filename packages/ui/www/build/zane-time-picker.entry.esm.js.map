{"version":3,"file":"zane-time-picker.entry.esm.js","sources":["src/components/time-picker/time-picker.scss?tag=zane-time-picker&encapsulation=shadow","src/components/time-picker/time-picker.tsx"],"sourcesContent":["@use '../../global/styles/common-input';\n\ninput[type='time']::-webkit-inner-spin-button,\ninput[type='time']::-webkit-calendar-picker-indicator {\n  display: none;\n  appearance: none;\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n} from '@stencil/core';\n\nimport { getComponentIndex } from '../../utils';\n\n/**\n * @name Time Picker\n * @description Captures time input.\n * @category Form Inputs\n * @tags input, form\n * @example <zane-time-picker value='true'></zane-time-picker>\n */\n@Component({\n  shadow: true,\n  styleUrl: 'time-picker.scss',\n  tag: 'zane-time-picker',\n})\nexport class TimePicker {\n  @Prop({ mutable: true, reflect: true }) configAria: any = {};\n\n  /**\n   * If true, the user cannot interact with the button. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  @Element() elm!: HTMLElement;\n\n  gid: string = getComponentIndex();\n\n  @State() hasFocus = false;\n\n  @Prop({ reflect: true }) inline: boolean = false;\n\n  /**\n   * The input field name.\n   */\n  @Prop() name: string = `zane-input-${this.gid}`;\n\n  /**\n   * The input field placeholder.\n   */\n  @Prop() placeholder: string;\n\n  /**\n   * If true, the user read the value cannot modify it. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) readonly: boolean = false;\n\n  /**\n   * The input field size.\n   * Possible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.\n   */\n  @Prop({ reflect: true }) size: 'lg' | 'md' | 'sm' = 'md';\n\n  /**\n   * The input field value.\n   */\n  @Prop({ mutable: true }) value?: null | number | string = '';\n\n  /**\n   * Emitted when the input loses focus.\n   */\n  @Event({ eventName: 'zane-time-picker--blur' }) zaneBlur: EventEmitter;\n\n  /**\n   * Emitted when the value has changed.\n   */\n  @Event({ eventName: 'zane-time-picker--change' }) zaneChange: EventEmitter;\n  /**\n   * Emitted when the input has focus.\n   */\n  @Event({ eventName: 'zane-time-picker--focus' }) zaneFocus: EventEmitter;\n  /**\n   * Emitted when a keyboard input occurred.\n   */\n  @Event({ eventName: 'zane-time-picker--input' }) zaneInput: EventEmitter;\n  private nativeElement?: HTMLInputElement;\n\n  private tabindex?: number | string;\n\n  componentWillLoad() {\n    // If the ion-input has a tabindex attribute we get the value\n    // and pass it down to the native input, then remove it from the\n    // zane-input to avoid causing tabbing twice on the same element\n    if (this.elm.hasAttribute('tabindex')) {\n      const tabindex = this.elm.getAttribute('tabindex');\n      this.tabindex = tabindex === null ? undefined : tabindex;\n      this.elm.removeAttribute('tabindex');\n    }\n    this.elm.getAttributeNames().forEach((name: string) => {\n      if (name.includes('aria-')) {\n        this.configAria[name] = this.elm.getAttribute(name);\n        this.elm.removeAttribute(name);\n      }\n    });\n  }\n\n  @Method()\n  async getComponentId() {\n    return this.gid;\n  }\n\n  render() {\n    return (\n      <Host has-focus={this.hasFocus} has-value={this.hasValue()}>\n        <div\n          class={{\n            disabled: this.disabled,\n            'has-focus': this.hasFocus,\n            'input-container': true,\n          }}\n        >\n          <input\n            class=\"input input-native\"\n            disabled={this.disabled}\n            onBlur={this.blurHandler}\n            onFocus={this.focusHandler}\n            onInput={this.inputHandler}\n            onKeyDown={this.keyDownHandler}\n            readOnly={this.readonly}\n            ref={(input) => (this.nativeElement = input)}\n            tabindex={this.tabindex}\n            type=\"time\"\n          />\n\n          <zane-button\n            class=\"input-action\"\n            color={'secondary'}\n            disabled={this.disabled}\n            icon={'time'}\n            onZane-button--click={() => {\n              setTimeout(() => {\n                this.nativeElement.showPicker();\n              });\n            }}\n            size={this.size}\n            variant=\"ghost.simple\"\n          ></zane-button>\n        </div>\n      </Host>\n    );\n  }\n\n  /**\n   * Sets blur on the native `input` in `zane-input`. Use this method instead of the global\n   * `input.blur()`.\n   */\n  @Method()\n  async setBlur() {\n    if (this.nativeElement) {\n      this.nativeElement.blur();\n      this.hasFocus = false;\n    }\n  }\n\n  /**\n   * Sets focus on the native `input` in `zane-input`. Use this method instead of the global\n   * `input.focus()`.\n   */\n  @Method()\n  async setFocus() {\n    if (this.nativeElement) {\n      this.nativeElement.focus();\n      this.hasFocus = true;\n    }\n  }\n\n  private blurHandler = (ev: FocusEvent) => {\n    this.hasFocus = false;\n    this.zaneBlur.emit(ev);\n  };\n\n  private clearInput = (evt: Event) => {\n    this.nativeElement.value = '';\n    this.inputHandler(evt);\n  };\n\n  private focusHandler = (ev: FocusEvent) => {\n    this.hasFocus = true;\n    this.zaneFocus.emit(ev);\n  };\n\n  private getValue(): string {\n    return (this.value || '').toString();\n  }\n\n  private hasValue(): boolean {\n    return this.getValue().length > 0;\n  }\n\n  private inputHandler = (ev: Event) => {\n    const input = ev.target as HTMLInputElement | null;\n    const oldValue = this.value;\n    if (input) {\n      this.value = input.value;\n    }\n    this.zaneInput.emit(ev as KeyboardEvent);\n    if (oldValue !== this.value) {\n      this.zaneChange.emit(ev as KeyboardEvent);\n    }\n  };\n\n  private keyDownHandler = (ev: KeyboardEvent) => {\n    if (ev.key === 'Escape') {\n      this.clearInput(ev);\n    }\n  };\n}\n"],"names":[],"mappings":"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"}