{"version":3,"names":["inputNumberCss","InputNumber","constructor","hostRef","this","autocomplete","configAria","debounce","disabled","endSlotHasContent","gid","getComponentIndex","hasFocus","hideActions","inline","invalid","name","passwordVisible","readonly","required","size","skeleton","startSlotHasContent","state","value","warn","blurHandler","ev","zaneBlur","emit","focusHandler","zaneFocus","inputHandler","input","target","oldValue","undefined","JSON","parse","zaneInput","zaneChange","componentWillLoad","elm","hasAttribute","tabindex","getAttribute","removeAttribute","getAttributeNames","forEach","includes","querySelector","connectedCallback","debounceChanged","getComponentId","getLabel","h","class","label","render","Host","key","hasValue","renderInput","renderHelper","invalidText","warnText","helperText","Object","assign","autoComplete","onBlur","onFocus","onInput","placeholder","readOnly","ref","nativeElement","tabIndex","type","color","icon","evt","decrease","variant","increment","setBlur","blur","setFocus","focus","debounceEvent","getValue","toString","length"],"sources":["src/components/input-number/input-number.scss?tag=zane-number&encapsulation=shadow","src/components/input-number/input-number.tsx"],"sourcesContent":["@use '../../global/styles/common-input';\n","import type { InputComponentInterface } from '../../interfaces';\n\nimport {\n  Component,\n  ComponentInterface,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\n\nimport { debounceEvent, getComponentIndex } from '../../utils';\n\n/**\n * @name Number\n * @description Number input lets users enter a numeric value and incrementally increase or decrease the value with a two-segment control.\n * @category Form Inputs\n * @tags input, form\n * @example <zane-number value=\"100\"></zane-input>\n */\n@Component({\n  shadow: true,\n  styleUrl: 'input-number.scss',\n  tag: 'zane-number',\n})\nexport class InputNumber\n  implements ComponentInterface, InputComponentInterface\n{\n  /**\n   * Indicates whether the value of the control can be automatically completed by the browser.\n   */\n  @Prop() autocomplete: 'off' | 'on' = 'off';\n\n  @Prop({ mutable: true, reflect: true }) configAria: any = {};\n\n  /**\n   * Set the amount of time, in milliseconds, to wait to trigger the `zaneChange` event after each keystroke.\n   */\n  @Prop() debounce = 300;\n\n  /**\n   * If true, the user cannot interact with the button. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  @Element() elm!: HTMLElement;\n\n  @State() endSlotHasContent = false;\n\n  gid: string = getComponentIndex();\n\n  @State() hasFocus = false;\n\n  @Prop() helperText: string;\n\n  @Prop({ reflect: true }) hideActions: boolean = false;\n\n  @Prop({ reflect: true }) inline: boolean = false;\n\n  @Prop() invalid: boolean = false;\n\n  @Prop() invalidText: string;\n\n  @Prop() label: string;\n\n  /**\n   * The input field name.\n   */\n  @Prop() name: string = `zane-input-${this.gid}`;\n\n  @State() passwordVisible = false;\n\n  /**\n   * The input field placeholder.\n   */\n  @Prop() placeholder: string;\n\n  /**\n   * If true, the user read the value cannot modify it. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) readonly: boolean = false;\n\n  /**\n   * If true, required icon is show. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /**\n   * The input field size.\n   * Possible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.\n   */\n  @Prop({ reflect: true }) size: 'lg' | 'md' | 'sm' = 'md';\n\n  @Prop() skeleton: boolean = false;\n\n  @State() startSlotHasContent = false;\n\n  /**\n   * The input state.\n   * Possible values are: `\"success\"`, `\"error\"`, `\"warning\"`, 'default'. Defaults to `\"default\"`.\n   */\n  @Prop({ reflect: true }) state: 'default' | 'error' | 'success' | 'warning' =\n    'default';\n\n  /**\n   * The input field value.\n   */\n  @Prop({ mutable: true }) value?: null | number = null;\n\n  @Prop() warn: boolean = false;\n\n  @Prop() warnText: string;\n  /**\n   * Emitted when the input loses focus.\n   */\n  @Event({ eventName: 'zane-number--blur' }) zaneBlur: EventEmitter;\n  /**\n   * Emitted when the value has changed.\n   */\n  @Event({ eventName: 'zane-number--change' }) zaneChange: EventEmitter;\n\n  /**\n   * Emitted when the input has focus.\n   */\n  @Event({ eventName: 'zane-number--focus' }) zaneFocus: EventEmitter;\n  /**\n   * Emitted when a keyboard input occurred.\n   */\n  @Event({ eventName: 'zane-number--input' }) zaneInput: EventEmitter;\n  private nativeElement?: HTMLInputElement;\n  private tabindex?: number | string;\n\n  componentWillLoad() {\n    // If the ion-input has a tabindex attribute we get the value\n    // and pass it down to the native input, then remove it from the\n    // zane-input to avoid causing tabbing twice on the same element\n    if (this.elm.hasAttribute('tabindex')) {\n      const tabindex = this.elm.getAttribute('tabindex');\n      this.tabindex = tabindex === null ? undefined : tabindex;\n      this.elm.removeAttribute('tabindex');\n    }\n    this.elm.getAttributeNames().forEach((name: string) => {\n      if (name.includes('aria-')) {\n        this.configAria[name] = this.elm.getAttribute(name);\n        this.elm.removeAttribute(name);\n      }\n    });\n    this.startSlotHasContent = !!this.elm.querySelector('[slot=\"start\"]');\n    this.endSlotHasContent = !!this.elm.querySelector('[slot=\"end\"]');\n  }\n\n  connectedCallback() {\n    this.debounceChanged();\n  }\n\n  @Method()\n  async getComponentId() {\n    return this.gid;\n  }\n\n  getLabel() {\n    return this.skeleton ? (\n      <div class=\"label skeleton\" />\n    ) : (\n      <label class=\"label\">\n        {this.required && <span class=\"required\">*</span>}\n        {this.label}\n      </label>\n    );\n  }\n\n  render() {\n    return (\n      <Host\n        has-focus={this.hasFocus}\n        has-value={this.hasValue()}\n        invalid={this.invalid}\n        warn={this.warn}\n      >\n        <div class={{ 'form-control': true, inline: this.inline }}>\n          {this.label && this.getLabel()}\n          <div class=\"field\">\n            {this.skeleton ? (\n              <div class=\"input-container-skeleton\" />\n            ) : (\n              this.renderInput()\n            )}\n          </div>\n          {this.renderHelper()}\n        </div>\n      </Host>\n    );\n  }\n\n  renderHelper() {\n    if (this.invalid)\n      return <div class=\"helper invalid\">{this.invalidText}</div>;\n    else if (this.warn) return <div class=\"helper warn\">{this.warnText}</div>;\n    else if (this.helperText || this.helperText === '')\n      return <div class=\"helper text\">{this.helperText}</div>;\n  }\n\n  renderInput() {\n    return (\n      <div\n        class={{\n          disabled: this.disabled,\n          'end-slot-has-content': this.endSlotHasContent,\n          'has-focus': this.hasFocus,\n          'input-container': true,\n          'start-slot-has-content': this.startSlotHasContent,\n        }}\n      >\n        <div class=\"slot-container start\">\n          <slot name=\"start\" />\n        </div>\n\n        <input\n          autoComplete={this.autocomplete}\n          class=\"input input-native\"\n          disabled={this.disabled}\n          name={this.name}\n          onBlur={this.blurHandler}\n          onFocus={this.focusHandler}\n          onInput={this.inputHandler}\n          placeholder={this.placeholder}\n          readOnly={this.readonly}\n          ref={(input) => (this.nativeElement = input)}\n          required={this.required}\n          tabIndex={this.tabindex}\n          type=\"number\"\n          value={this.value}\n          {...this.configAria}\n        />\n\n        {!this.readonly && !this.disabled && !this.hideActions && (\n          <zane-button\n            aria-label=\"Decrease\"\n            class=\"input-action\"\n            color={'secondary'}\n            icon=\"subtract\"\n            onGoat-button--click={(evt) => {\n              this.decrease(evt);\n            }}\n            size={this.size}\n            variant=\"ghost.simple\"\n          ></zane-button>\n        )}\n\n        {!this.readonly && !this.disabled && !this.hideActions && (\n          <zane-button\n            class=\"input-action\"\n            color={'secondary'}\n            icon=\"add\"\n            onGoat-button--click={(evt) => {\n              this.increment(evt);\n            }}\n            size={this.size}\n            variant=\"ghost.simple\"\n          ></zane-button>\n        )}\n\n        <div class=\"slot-container end\">\n          <slot name=\"end\" />\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Sets blur on the native `input` in `zane-input`. Use this method instead of the global\n   * `input.blur()`.\n   */\n  @Method()\n  async setBlur() {\n    if (this.nativeElement) {\n      this.nativeElement.blur();\n      this.hasFocus = false;\n    }\n  }\n\n  /**\n   * Sets focus on the native `input` in `zane-input`. Use this method instead of the global\n   * `input.focus()`.\n   */\n  @Method()\n  async setFocus() {\n    if (this.nativeElement) {\n      this.nativeElement.focus();\n      this.hasFocus = true;\n    }\n  }\n\n  @Watch('debounce')\n  protected debounceChanged() {\n    this.zaneChange = debounceEvent(this.zaneChange, this.debounce);\n  }\n\n  private blurHandler = (ev: FocusEvent) => {\n    this.hasFocus = false;\n    this.zaneBlur.emit(ev);\n  };\n\n  private decrease(ev) {\n    if (this.value === undefined || this.value === null) this.value = 0;\n    if (typeof this.value === 'number') {\n      this.value = (this.value || 0) - 1;\n      this.zaneChange.emit(ev);\n    }\n  }\n\n  private focusHandler = (ev: FocusEvent) => {\n    this.hasFocus = true;\n    this.zaneFocus.emit(ev);\n  };\n\n  private getValue(): string {\n    return (this.value || '').toString();\n  }\n\n  private hasValue(): boolean {\n    return this.getValue().length > 0;\n  }\n\n  private increment(ev) {\n    if (this.value === undefined || this.value === null) this.value = 0;\n    if (typeof this.value === 'number') {\n      this.value = (this.value || 0) + 1;\n      this.zaneChange.emit(ev);\n    }\n  }\n  private inputHandler = (ev: Event) => {\n    const input = ev.target as HTMLInputElement | null;\n    const oldValue = this.value;\n    if (input) {\n      this.value =\n        input.value === '' || input.value === undefined\n          ? null\n          : JSON.parse(input.value);\n    }\n    this.zaneInput.emit(ev as KeyboardEvent);\n    if (oldValue !== this.value) {\n      this.zaneChange.emit(ev as KeyboardEvent);\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]}