{"version":3,"names":["treeCss","Tree","constructor","hostRef","this","empty","emptyState","subscribers","componentWillLoad","parseEmptyState","getSelectedNode","selectedNode","handleKeyDown","evt","path","composedPath","menuItem","elm","tagName","key","preventDefault","focusNextItem","focusPreviousItem","internalEmptyState","JSON","parse","render","h","class","renderEmptyState","setFocus","firstMenuItem","getFirstItem","subscribeToSelect","cb","push","treeNodeClick","detail","value","forEach","currentItem","nextItem","nextElementSibling","disabled","querySelector","previousItem","previousElementSibling","Object","assign"],"sources":["src/components/tree/tree/tree.scss?tag=zane-tree&encapsulation=shadow","src/components/tree/tree/tree.tsx"],"sourcesContent":["@use '../../../global/styles/commons';\n\n:host {\n  display: block;\n}\n\n.tree-view {\n  background-color: var(--layer);\n}\n","import {\n  Component,\n  ComponentInterface,\n  Element,\n  h,\n  Listen,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\n\n/**\n * 树形结构可视化组件\n *\n * @example\n * <!-- 基础用法 -->\n * <zane-tree>\n *   <zane-tree-node value=\"node1\">一级节点</zane-tree-node>\n *   <zane-tree-node value=\"node2\">二级节点</zane-tree-node>\n * </zane-tree>\n */\n@Component({\n  shadow: true,\n  styleUrl: 'tree.scss',\n  tag: 'zane-tree',\n})\nexport class Tree implements ComponentInterface {\n  /**\n   * 宿主元素引用（自动注入）\n   * @type {HTMLElement}\n   */\n  @Element() elm!: HTMLElement;\n\n  /**\n   * 空状态显示开关\n   * @prop {boolean} [empty=false] - 是否展示空状态界面\n   * @mutable\n   * @example\n   * <zane-tree empty></zane-tree>\n   */\n  @Prop({ mutable: true }) empty: boolean = false;\n\n  /**\n   * 空状态配置（JSON 字符串或对象）\n   * @prop {string|Object} [emptyState] - 空状态配置参数，支持两种格式：\n   * 1. JSON 字符串格式（推荐）\n   * 2. 直接传入配置对象\n   *\n   * @default {\n   *  \"headline\": \"No items\",\n   *  \"description\": \"There are no items to display\"\n   * }\n   * @mutable\n   * @example\n   * <!-- JSON字符串形式 -->\n   * <zane-tree empty-state='{\"headline\":\"空数据\",\"description\":\"请添加节点\"}'>\n   *\n   * <!-- 对象形式（需通过JS绑定） -->\n   * <zane-tree empty-state={myConfig}>\n   */\n  @Prop({ mutable: true }) emptyState: string = `{\n    \"headline\": \"No items\",\n    \"description\": \"There are no items to display\"\n  }`;\n\n  /**\n   * 内部处理后的空状态配置\n   * @state\n   * @type {Object}\n   */\n  @State()\n  internalEmptyState: any;\n\n  /**\n   * 当前选中节点标识\n   * @prop {string} selectedNode - 当前选中节点的唯一标识符（对应zane-tree-node的value）\n   * @mutable\n   */\n  @Prop({ mutable: true })\n  selectedNode: string;\n\n  /** 订阅节点选择事件的回调函数列表 */\n  subscribers: any[] = [];\n\n  /** 组件加载前解析空状态配置 */\n  componentWillLoad() {\n    this.parseEmptyState();\n  }\n\n  /**\n   * 获取当前选中节点\n   * @method\n   * @returns {Promise<string>} 当前选中节点的value值\n   * @example\n   * const tree = document.querySelector('zane-tree');\n   * const selected = await tree.getSelectedNode();\n   */\n  @Method()\n  async getSelectedNode() {\n    return this.selectedNode;\n  }\n\n  /**\n   * 全局键盘事件监听（窗口级）\n   * @listens window:keydown\n   * @param {KeyboardEvent} evt - 键盘事件对象\n   * @description\n   * 实现树节点的键盘导航：\n   * 1. 当检测到键盘事件发生在当前树组件内时\n   * 2. 按下`ArrowDown`：聚焦下一个可用节点\n   * 3. 按下`ArrowUp`：聚焦上一个可用节点\n   *\n   * 导航规则：\n   * - 仅当事件发生在`zane-tree-node`元素内时触发\n   * - 自动跳过禁用状态的节点（`disabled`）\n   * - 支持循环聚焦（到达末尾后回到首节点）\n   */\n  @Listen('keydown', { target: 'window' })\n  handleKeyDown(evt: KeyboardEvent) {\n    const path = evt.composedPath();\n    let menuItem = null;\n    for (const elm of path) {\n      if ((elm as any).tagName === 'ZANE-TREE-NODE') {\n        menuItem = elm;\n      }\n      if (elm !== this.elm) continue;\n      if (evt.key === 'ArrowDown') {\n        evt.preventDefault();\n        this.focusNextItem(menuItem);\n      } else if (evt.key === 'ArrowUp') {\n        evt.preventDefault();\n        this.focusPreviousItem(menuItem);\n      }\n    }\n  }\n\n  /**\n   * 解析空状态配置\n   * @watch emptyState\n   * @description\n   * 自动将字符串形式的配置转换为对象格式。\n   * 当`emptyState`属性变化时自动触发。\n   */\n  @Watch('emptyState')\n  parseEmptyState() {\n    this.internalEmptyState =\n      typeof this.emptyState === 'string'\n        ? JSON.parse(this.emptyState)\n        : this.emptyState;\n  }\n\n  /**\n   * 组件渲染函数\n   * @returns {VNode} 虚拟节点树\n   * @description\n   * 动态切换两种显示状态：\n   * 1. 空状态：当`empty=true`时显示空白界面\n   * 2. 正常状态：渲染树节点插槽内容\n   */\n  render() {\n    return this.empty ? (\n      <div class=\"tree-view\">{this.renderEmptyState()}</div>\n    ) : (\n      <div class=\"tree-view\">\n        <slot></slot>\n      </div>\n    );\n  }\n\n  /**\n   * 设置初始焦点\n   * @method\n   * @description 将焦点设置到树的第一个节点（无障碍支持）\n   * @example\n   * const tree = document.querySelector('zane-tree');\n   * await tree.setFocus();\n   */\n  @Method()\n  async setFocus() {\n    const firstMenuItem = this.getFirstItem();\n    (firstMenuItem as any)?.setFocus();\n  }\n\n  /**\n   * 订阅节点选择事件\n   * @method\n   * @param {Function} cb - 选择事件回调函数\n   * @description\n   * 注册回调函数，当节点被选择时触发。\n   * 回调函数接收当前选中节点的value值。\n   *\n   * 注意：需手动管理订阅关系，组件销毁前建议取消订阅\n   * @example\n   * tree.subscribeToSelect((value)  => {\n   *   console.log('Selected  node:', value);\n   * });\n   */\n  @Method()\n  async subscribeToSelect(cb) {\n    this.subscribers.push(cb);\n  }\n\n  /**\n   * 处理树节点点击事件\n   * @listens zane-tree-node--click\n   * @param {CustomEvent} evt - 自定义事件对象\n   * @description\n   * 事件规范：\n   * - 事件类型：`zane-tree-node--click`\n   * - 事件数据：`evt.detail.value`  (节点标识符)\n   *\n   * 功能流程：\n   * 1. 更新内部选中状态\n   * 2. 通知所有订阅者\n   */\n  @Listen('zane-tree-node--click')\n  treeNodeClick(evt: CustomEvent<any>) {\n    this.selectedNode = evt.detail.value;\n    this.subscribers.forEach((cb) => cb(evt.detail.value));\n  }\n\n  /**\n   * 聚焦下一个可用节点\n   * @private\n   * @param {HTMLElement} currentItem - 当前焦点节点\n   */\n  private focusNextItem(currentItem) {\n    let nextItem: any = currentItem.nextElementSibling;\n    do {\n      if (\n        nextItem &&\n        nextItem.tagName === 'ZANE-TREE-NODE' &&\n        !nextItem.disabled\n      ) {\n        nextItem.setFocus();\n        return;\n      }\n      nextItem = nextItem\n        ? nextItem.nextElementSibling\n        : this.elm.querySelector('zane-tree-node:first-child');\n    } while (nextItem !== currentItem);\n  }\n\n  /**\n   * 聚焦上一个可用节点\n   * @private\n   * @param {HTMLElement} currentItem - 当前焦点节点\n   */\n  private focusPreviousItem(currentItem) {\n    let previousItem: any = currentItem.previousElementSibling;\n    do {\n      if (\n        previousItem &&\n        previousItem.tagName === 'ZANE-TREE-NODE' &&\n        !previousItem.disabled\n      ) {\n        previousItem.setFocus();\n        return;\n      }\n      previousItem = previousItem\n        ? previousItem.previousElementSibling\n        : this.elm.querySelector('zane-tree-node:last-child');\n    } while (previousItem !== currentItem);\n  }\n\n  /**\n   * 获取首个树节点元素\n   * @private\n   * @returns {HTMLElement | null} 首个可用节点\n   * @todo 注意当前实现选择器不一致问题（zane-menu-item应为zane-tree-node）\n   */\n  private getFirstItem() {\n    return this.elm.querySelector('zane-menu-item');\n  }\n\n  /**\n   * 渲染空状态组件\n   * @private\n   * @returns {VNode} 空状态组件\n   */\n  private renderEmptyState() {\n    if (this.empty)\n      return (\n        <zane-empty-state class=\"empty-menu\" {...this.internalEmptyState} />\n      );\n  }\n}\n"],"mappings":"kDAAA,MAAMA,EAAU,wxF,MC2BHC,EAAI,MALjB,WAAAC,CAAAC,G,UAmB2BC,KAAKC,MAAY,MAoBjBD,KAAAE,WAAqB,0FAsB9CF,KAAWG,YAAU,EA4MtB,CAzMC,iBAAAC,GACEJ,KAAKK,iB,CAYP,qBAAMC,GACJ,OAAON,KAAKO,Y,CAmBd,aAAAC,CAAcC,GACZ,MAAMC,EAAOD,EAAIE,eACjB,IAAIC,EAAW,KACf,IAAK,MAAMC,KAAOH,EAAM,CACtB,GAAKG,EAAYC,UAAY,iBAAkB,CAC7CF,EAAWC,C,CAEb,GAAIA,IAAQb,KAAKa,IAAK,SACtB,GAAIJ,EAAIM,MAAQ,YAAa,CAC3BN,EAAIO,iBACJhB,KAAKiB,cAAcL,E,MACd,GAAIH,EAAIM,MAAQ,UAAW,CAChCN,EAAIO,iBACJhB,KAAKkB,kBAAkBN,E,GAa7B,eAAAP,GACEL,KAAKmB,0BACInB,KAAKE,aAAe,SACvBkB,KAAKC,MAAMrB,KAAKE,YAChBF,KAAKE,U,CAWb,MAAAoB,GACE,OAAOtB,KAAKC,MACVsB,EAAA,OAAKC,MAAM,aAAaxB,KAAKyB,oBAE7BF,EAAA,OAAKC,MAAM,aACTD,EAAa,a,CAcnB,cAAMG,GACJ,MAAMC,EAAgB3B,KAAK4B,eAC1BD,IAAqB,MAArBA,SAAa,SAAbA,EAAuBD,U,CAkB1B,uBAAMG,CAAkBC,GACtB9B,KAAKG,YAAY4B,KAAKD,E,CAiBxB,aAAAE,CAAcvB,GACZT,KAAKO,aAAeE,EAAIwB,OAAOC,MAC/BlC,KAAKG,YAAYgC,SAASL,GAAOA,EAAGrB,EAAIwB,OAAOC,Q,CAQzC,aAAAjB,CAAcmB,GACpB,IAAIC,EAAgBD,EAAYE,mBAChC,EAAG,CACD,GACED,GACAA,EAASvB,UAAY,mBACpBuB,EAASE,SACV,CACAF,EAASX,WACT,M,CAEFW,EAAWA,EACPA,EAASC,mBACTtC,KAAKa,IAAI2B,cAAc,6BAC7B,OAASH,IAAaD,E,CAQhB,iBAAAlB,CAAkBkB,GACxB,IAAIK,EAAoBL,EAAYM,uBACpC,EAAG,CACD,GACED,GACAA,EAAa3B,UAAY,mBACxB2B,EAAaF,SACd,CACAE,EAAaf,WACb,M,CAEFe,EAAeA,EACXA,EAAaC,uBACb1C,KAAKa,IAAI2B,cAAc,4BAC7B,OAASC,IAAiBL,E,CASpB,YAAAR,GACN,OAAO5B,KAAKa,IAAI2B,cAAc,iB,CAQxB,gBAAAf,GACN,GAAIzB,KAAKC,MACP,OACEsB,EAAkB,mBAAAoB,OAAAC,OAAA,CAAApB,MAAM,cAAiBxB,KAAKmB,oB","ignoreList":[]}