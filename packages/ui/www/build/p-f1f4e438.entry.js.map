{"version":3,"names":["menuCss","Menu","constructor","hostRef","this","empty","emptyStateDescription","emptyStateHeadline","showLoader","size","focusNextItem","currentItem","nextItem","nextElementSibling","tagName","disabled","setFocus","getFirstItem","firstItem","host","querySelector","childNodes","length","nodeName","assignedElements","assignedElement","item","Error","getLastItem","lastItem","i","handleKeyDown","evt","path","composedPath","menuItem","elm","key","preventDefault","focusPreviousItem","render","h","class","renderEmptyState","firstMenuItem","previousItem","previousElementSibling","description","headline","menuItemCss","MenuItem","color","endSlotHasContent","gid","getComponentIndex","hasFocus","isActive","selectable","selected","startSlotHasContent","target","tabindex","NativeElementTag","getNativeElementTagName","Host","active","href","onBlur","blurHandler","onClick","clickHandler","onFocus","focusHandler","onKeyDown","keyDownHandler","onMouseDown","mouseDownHandler","ref","el","nativeElement","name","event","stopPropagation","zaneMenuItemClick","emit","value","innerText","window","open","componentWillLoad","hasAttribute","getAttribute","undefined","removeAttribute","setBlur","blur","focus","windowKeyUp","windowMouseUp","ElementSize","tagCss","Tag","dismissible","dismissClickHandler","zaneTagDismissClick","textContent","tag","renderImage","renderCloseButton","getIconSize","imageSrc","alt","src","MEDIUM","SMALL"],"sources":["src/components/menu/menu/menu.scss?tag=zane-menu&encapsulation=shadow","src/components/menu/menu/menu.tsx","src/components/menu/menu-item/menu-item.scss?tag=zane-menu-item&encapsulation=shadow","src/components/menu/menu-item/menu-item.tsx","src/enums/ElementSize.ts","src/components/tag/tag.scss?tag=zane-tag&encapsulation=shadow","src/components/tag/tag.tsx"],"sourcesContent":["@use '../../../global/styles/commons';\n\n:host {\n  /**\n    * @prop --zane-menu-background: Background color of the menu\n   */\n  --zane-menu-background: var(--layer);\n\n  /**\n    * @prop --zane-menu-max-height: Maximum height of the menu\n   */\n  --zane-menu-max-height: 100%;\n\n  /**\n    * @prop --zane-menu-shadow: Shadow of the menu\n   */\n  --zane-menu-shadow: 0 2px 6px 0 rgb(0 0 0 / 20%);\n\n  display: inline-block;\n  min-width: 10rem;\n}\n\n.menu {\n  box-sizing: border-box;\n  max-height: var(--zane-menu-max-height);\n  padding-block: commons.v(--spacing-02);\n  overflow-x: auto;\n  background: var(--zane-menu-background);\n  border: 1px solid #{commons.v(--border-subtle)};\n  box-shadow: var(--zane-menu-shadow);\n}\n\n:host(.no-border) .menu {\n  border: none;\n  box-shadow: none;\n}\n","import {\n  Component,\n  ComponentInterface,\n  Element,\n  h,\n  Listen,\n  Method,\n  Prop,\n} from '@stencil/core';\n\n/**\n * @name Menu\n * @description Menus display a list of choices on temporary surfaces.\n * @category Navigation\n * @subcategory Menu\n * @img /assets/img/menu.webp\n * @imgDark /assets/img/menu-dark.webp\n */\n@Component({\n  shadow: true,\n  styleUrl: 'menu.scss',\n  tag: 'zane-menu',\n})\nexport class Menu implements ComponentInterface {\n  @Prop({ mutable: true }) empty: boolean = false;\n\n  @Prop({ mutable: true }) emptyStateDescription: string =\n    'There are no items to display';\n\n  @Prop({ mutable: true }) emptyStateHeadline: string = 'No items';\n\n  @Element() host!: HTMLElement;\n\n  @Prop({ reflect: true }) layer?: '01' | '02' | 'background';\n\n  @Prop() showLoader: boolean = false;\n\n  /**\n   * The menu item size.\n   * Possible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.\n   */\n  @Prop({ reflect: true }) size: 'lg' | 'md' | 'sm' = 'md';\n\n  @Prop({ mutable: true }) value?: number | string;\n\n  focusNextItem(currentItem: HTMLElement) {\n    let nextItem: any = currentItem.nextElementSibling;\n    do {\n      if (\n        nextItem &&\n        nextItem.tagName === 'ZANE-MENU-ITEM' &&\n        !nextItem.disabled\n      ) {\n        nextItem.setFocus();\n        return;\n      }\n      nextItem = nextItem ? nextItem.nextElementSibling : this.getFirstItem();\n    } while (nextItem !== currentItem);\n  }\n\n  getFirstItem() {\n    let firstItem: any = this.host.querySelector('zane-menu-item');\n    if (\n      !firstItem &&\n      this.host.childNodes.length > 0 &&\n      this.host.childNodes[0].nodeName === 'SLOT'\n    ) {\n      const assignedElements = (\n        this.host.childNodes[0] as HTMLSlotElement\n      ).assignedElements();\n      for (const assignedElement of assignedElements) {\n        const item = assignedElement as HTMLElement;\n        if (item.tagName === 'ZANE-MENU-ITEM') {\n          firstItem = item;\n          break;\n        }\n      }\n\n      if (!firstItem) {\n        throw new Error('zane-menu: No menu items found');\n      }\n    }\n    return firstItem;\n  }\n\n  getLastItem() {\n    let lastItem: any = this.host.querySelector('zane-menu-item:last-child');\n    if (\n      !lastItem &&\n      this.host.childNodes.length > 0 &&\n      this.host.childNodes[0].nodeName === 'SLOT'\n    ) {\n      const assignedElements = (\n        this.host.childNodes[0] as HTMLSlotElement\n      ).assignedElements();\n      for (let i = assignedElements.length - 1; i >= 0; i--) {\n        const item = assignedElements[i] as HTMLElement;\n        if (item.tagName === 'ZANE-MENU-ITEM') {\n          lastItem = item;\n          break;\n        }\n      }\n\n      if (!lastItem) {\n        throw new Error('zane-menu: No menu items found');\n      }\n    }\n    return lastItem;\n  }\n\n  @Listen('keydown', { target: 'window' })\n  handleKeyDown(evt: KeyboardEvent) {\n    const path = evt.composedPath();\n    let menuItem = null;\n    for (const elm of path) {\n      if ((elm as any).tagName === 'ZANE-MENU-ITEM') {\n        menuItem = elm;\n      }\n      if (elm !== this.host) continue;\n      if (evt.key === 'ArrowDown') {\n        evt.preventDefault();\n        this.focusNextItem(menuItem);\n      } else if (evt.key === 'ArrowUp') {\n        evt.preventDefault();\n        this.focusPreviousItem(menuItem);\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div class=\"menu\">\n        <div class=\"slot-container\">\n          <slot />\n        </div>\n\n        {this.renderEmptyState()}\n      </div>\n    );\n  }\n\n  /**\n   * Sets focus on first menu item. Use this method instead of the global\n   * `element.focus()`.\n   */\n  @Method()\n  async setFocus() {\n    const firstMenuItem = this.getFirstItem();\n    firstMenuItem?.setFocus();\n  }\n\n  private focusPreviousItem(currentItem: HTMLElement) {\n    let previousItem: any = currentItem.previousElementSibling;\n    do {\n      if (\n        previousItem &&\n        previousItem.tagName === 'ZANE-MENU-ITEM' &&\n        !previousItem.disabled\n      ) {\n        previousItem.setFocus();\n        return;\n      }\n      previousItem = previousItem\n        ? previousItem.previousElementSibling\n        : this.getLastItem();\n    } while (previousItem !== currentItem);\n  }\n\n  private renderEmptyState() {\n    if (this.empty)\n      return (\n        <zane-empty-state\n          class=\"empty-menu\"\n          description={this.emptyStateDescription}\n          headline={this.emptyStateHeadline}\n        />\n      );\n  }\n}\n","@use '../../../global/styles/commons';\n\n:host {\n  display: block;\n}\n\n$border-width: 2px;\n\n.menu-item {\n  box-sizing: border-box;\n  display: flex;\n  gap: commons.v(--spacing-02);\n  align-items: center;\n  min-height: 2.5rem;\n  padding-inline: calc(#{commons.v(--spacing-05)} - #{$border-width});\n  color: commons.v(--text-secondary);\n  text-decoration: none;\n  cursor: pointer;\n  border: $border-width solid transparent;\n\n  @include commons.font-style(body-compact-01);\n\n  .item-section {\n    display: flex;\n    align-items: center;\n\n    &.start {\n      width: 1.5rem;\n    }\n  }\n\n  .slot-main {\n    display: block;\n    flex: 1;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n\n  .slot-end {\n    color: commons.v(--text-helper);\n  }\n}\n\n:host-context([size='sm']) {\n  .menu-item {\n    min-height: 2rem;\n  }\n}\n\n:host-context([size='md']) {\n  .menu-item {\n    min-height: 2.5rem;\n  }\n}\n\n:host-context([size='lg']) {\n  .menu-item {\n    min-height: 3rem;\n  }\n}\n\n.menu-item {\n  &:hover {\n    color: commons.v(--text-primary);\n    background: commons.v(--layer-hover);\n\n    .slot-end {\n      color: commons.v(--icon-01);\n    }\n  }\n\n  &.active {\n    background: var(--selected-ui);\n  }\n}\n\n@each $color in [primary, secondary, success, info, warning, error, white,\n  black]\n{\n  .menu-item#{'.color-' + $color} {\n    &:hover,\n    &.has-focus:not(.active) {\n      color: white;\n      background: commons.v(--color-#{$color});\n\n      .slot-end {\n        color: white;\n      }\n    }\n  }\n}\n\n.menu-item.color-danger {\n  &:hover,\n  &.has-focus:not(.active) {\n    color: white;\n    background: commons.v(--color-error);\n\n    .slot-end {\n      color: white;\n    }\n  }\n}\n\n.menu-item.has-focus:not(.active) {\n  outline: none;\n  border-color: commons.v(--color-primary);\n}\n\n.menu-item.disabled {\n  color: commons.v(--text-disabled) !important;\n  cursor: not-allowed;\n  background-color: commons.v(--disabled-01) !important;\n\n  &:hover,\n  &.has-focus:not(.active) {\n    color: commons.v(--text-disabled) !important;\n    background-color: commons.v(--disabled-01) !important;\n  }\n\n  &.active,\n  &.selected {\n    color: commons.v(--text-disabled) !important;\n    background-color: var(--disabled-01) !important;\n  }\n}\n\n.menu-item:not(.end-slot-has-content) {\n  .slot-end {\n    display: none;\n  }\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  State,\n} from '@stencil/core';\n\nimport { getComponentIndex } from '../../../utils';\n\n/**\n * @name Menu Item\n * @description Menu items display a list of choices on temporary surfaces.\n * @category Navigation\n * @subcategory Menu\n * @childComponent true\n */\n@Component({\n  shadow: true,\n  styleUrl: 'menu-item.scss',\n  tag: 'zane-menu-item',\n})\nexport class MenuItem {\n  @Prop() color:\n    | 'black'\n    | 'danger'\n    | 'default'\n    | 'primary'\n    | 'secondary'\n    | 'success'\n    | 'warning'\n    | 'white' = 'default';\n\n  /**\n   * If true, the user cannot interact with the button. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  @Element() elm!: HTMLElement;\n\n  @State() endSlotHasContent = false;\n\n  gid: string = getComponentIndex();\n\n  @State() hasFocus = false;\n\n  /**\n   * Hyperlink to navigate to on click.\n   */\n  @Prop({ reflect: true }) href: string;\n\n  @State() isActive = false;\n\n  @Prop({ reflect: true }) layer?: '01' | '02' | 'background';\n\n  @Prop({ reflect: true }) selectable: boolean = false;\n\n  /**\n   * Menu item selection state.\n   */\n  @Prop({ reflect: true }) selected: boolean = false;\n\n  @State() startSlotHasContent = false;\n  /**\n   * Sets or retrieves the window or frame at which to target content.\n   */\n  @Prop() target: string = '_self';\n  /**\n   * The menu item value.\n   */\n  @Prop({ mutable: true }) value?: null | number | string;\n  /**\n   * Emitted when the menu item is clicked.\n   */\n  @Event({ eventName: 'zane-menu-item--click' })\n  zaneMenuItemClick: EventEmitter;\n\n  private nativeElement?: HTMLElement;\n  private tabindex?: number | string = 1;\n\n  async componentWillLoad() {\n    // If the ion-input has a tabindex attribute we get the value\n    // and pass it down to the native input, then remove it from the\n    // zane-input to avoid causing tabbing twice on the same element\n    if (this.elm.hasAttribute('tabindex')) {\n      const tabindex = this.elm.getAttribute('tabindex');\n      this.tabindex = tabindex === null ? undefined : tabindex;\n      this.elm.removeAttribute('tabindex');\n    }\n    this.endSlotHasContent = !!this.elm.querySelector('[slot=\"end\"]');\n  }\n\n  getNativeElementTagName() {\n    return this.href ? 'a' : 'div';\n  }\n\n  render = () => {\n    const NativeElementTag = this.getNativeElementTagName();\n\n    return (\n      <Host active={this.isActive} has-focus={this.hasFocus}>\n        <NativeElementTag\n          aria-disabled={this.disabled}\n          class={{\n            [`color-${this.color}`]: true,\n            active: this.isActive,\n            disabled: this.disabled,\n            'end-slot-has-content': this.endSlotHasContent,\n            'has-focus': this.hasFocus,\n            'menu-item': true,\n            selected: this.selected,\n          }}\n          href={this.href}\n          onBlur={this.blurHandler}\n          onClick={this.clickHandler}\n          onFocus={this.focusHandler}\n          onKeyDown={this.keyDownHandler}\n          onMouseDown={this.mouseDownHandler}\n          ref={(el) => (this.nativeElement = el as HTMLElement)}\n          tabindex={this.tabindex}\n          target={this.target}\n        >\n          {this.selectable && (\n            <div class=\"item-section start\">\n              {this.selected && (\n                <zane-icon class=\"checkmark\" name=\"checkmark\" />\n              )}\n            </div>\n          )}\n\n          <div class=\"item-section slot-main\">\n            <slot />\n          </div>\n\n          <div class=\"item-section slot-end\">\n            <slot name=\"end\" />\n          </div>\n        </NativeElementTag>\n      </Host>\n    );\n  };\n\n  /**\n   * Sets blur on the native `input` in `zane-input`. Use this method instead of the global\n   * `input.blur()`.\n   */\n  @Method()\n  async setBlur() {\n    if (this.nativeElement) {\n      this.nativeElement.blur();\n    }\n  }\n\n  /**\n   * Sets focus on the native `input` in `zane-input`. Use this method instead of the global\n   * `input.focus()`.\n   */\n  @Method()\n  async setFocus() {\n    if (this.nativeElement) {\n      this.nativeElement.focus();\n    }\n  }\n\n  @Listen('keyup', { target: 'window' })\n  windowKeyUp(evt) {\n    if (this.isActive && evt.key === ' ') this.isActive = false;\n  }\n\n  @Listen('mouseup', { target: 'window' })\n  windowMouseUp() {\n    if (this.isActive) this.isActive = false;\n  }\n\n  private blurHandler = () => {\n    this.hasFocus = false;\n  };\n\n  private clickHandler = (event) => {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    } else {\n      this.setFocus();\n      this.zaneMenuItemClick.emit({\n        value: this.value || this.elm.innerText,\n      });\n      if (this.href) window.open(this.href, this.target);\n    }\n  };\n\n  private focusHandler = () => {\n    this.hasFocus = true;\n  };\n\n  private keyDownHandler = (evt) => {\n    if (evt.key === ' ' || evt.key === 'Enter') {\n      evt.preventDefault();\n      this.isActive = true;\n      this.clickHandler(evt);\n    }\n  };\n\n  private mouseDownHandler = () => {\n    this.isActive = true;\n  };\n}\n","/**\n * 元素尺寸枚举\n * 定义标准化的组件尺寸等级\n *\n * @remarks\n * 采用类似Bootstrap/Tailwind的尺寸命名约定\n * 适用于按钮、输入框、卡片等组件的尺寸控制\n */\nexport enum ElementSize {\n  /**\n   * 超大尺寸 (xxxl)\n   * @default 'xxxl'\n   */\n  EXTRA_EXTRA_EXTRA_LARGE = 'xxxl',\n\n  /**\n   * 特大尺寸 (xxl)\n   * @default 'xxl'\n   */\n  EXTRA_EXTRA_LARGE = 'xxl',\n\n  /**\n   * 加大尺寸 (xl)\n   * @default 'xl'\n   */\n  EXTRA_LARGE = 'xl',\n\n  /**\n   * 大尺寸 (lg)\n   * @default 'lg'\n   */\n  LARGE = 'lg',\n\n  /**\n   * 中等尺寸 (md)\n   * @default 'md'\n   */\n  MEDIUM = 'md',\n\n  /**\n   * 超小尺寸 (sm)\n   * @default 'sm'\n   */\n  SMALL = 'sm',\n}\n","@use '../../global/styles/commons';\n\n$tag-background-color: var(--tag-background-color, var(--tag-background-gray));\n$tag-color: var(--tag-color, var(--tag-color-gray));\n$tag-hover-color: var(--tag-hover-color, var(--tag-hover-gray));\n\n:host {\n  display: inline-block;\n}\n\n.tag {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n  color: $tag-color;\n  background: $tag-background-color;\n\n  @include commons.font-style(label-01);\n\n  .tag-image {\n    width: 1.5rem;\n    height: 1.5rem;\n    background: $tag-hover-color;\n    border-radius: 100%;\n  }\n\n  .tag-content {\n    display: flex;\n    align-items: center;\n    max-width: 100%;\n    padding: 0 0.5rem;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n\n  &.dismissible .tag-content {\n    padding-inline-end: 0.25rem;\n  }\n\n  &.selected {\n    color: var(--background);\n    background: $tag-hover-color;\n\n    .close-btn-icon {\n      color: var(--background);\n    }\n  }\n}\n\n.close-btn {\n  padding: 0;\n  margin: 0;\n  margin-inline-end: var(--spacing-01);\n  line-height: 0;\n  cursor: pointer;\n  background: transparent;\n  border: none;\n  border-radius: 12px;\n\n  &:hover {\n    background: $tag-hover-color;\n\n    .close-btn-icon {\n      color: var(--background);\n    }\n  }\n}\n\n/**\n * Sizes\n */\n.tag.size-md {\n  height: 1.5rem;\n  border-radius: 12px;\n}\n\n.tag.size-sm {\n  height: 1.125rem;\n  border-radius: 9px;\n}\n\n@each $color in [ 'gray', 'blue', 'green', 'red', 'yellow', 'primary',\n  'success', 'info', 'warning', 'error']\n{\n  .tag#{'.color-' + $color} {\n    --tag-background-color: var(--tag-background-#{$color});\n    --tag-color: var(--tag-color-#{$color});\n    --tag-hover-color: var(--tag-hover-#{$color});\n  }\n}\n","import {\n  Component,\n  ComponentInterface,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Prop,\n} from '@stencil/core';\n\nimport { ElementSize } from '../../enums';\n\n/**\n * @name Tag\n * @description Use tags to label, categorize, or organize items using keywords that describe them.\n * @category Data Display\n * @tag controls\n * @example <zane-tag class=\"color-red\">Important</zane-tag>\n */\n@Component({\n  shadow: true,\n  styleUrl: 'tag.scss',\n  tag: 'zane-tag',\n})\nexport class Tag implements ComponentInterface {\n  /**\n   * Tag color.\n   * Possible values are: 'gray', 'blue', 'green', 'red', 'yellow', 'primary', 'success', 'info', 'warning', 'error'.\n   */\n  @Prop({ reflect: true }) color:\n    | 'blue'\n    | 'error'\n    | 'gray'\n    | 'green'\n    | 'info'\n    | 'primary'\n    | 'red'\n    | 'success'\n    | 'warning'\n    | 'yellow' = 'gray';\n\n  /**\n   * If true, the tag will have a close icon.\n   */\n  @Prop() dismissible: boolean = false;\n\n  @Element() elm!: HTMLElement;\n\n  /**\n   * Image source.\n   */\n  @Prop() imageSrc?: string;\n\n  /**\n   * If true, the tag will be selected.\n   */\n  @Prop({ reflect: true }) selected: boolean = false;\n\n  /**\n   * Text size.\n   */\n  @Prop({ reflect: true }) size: 'md' | 'sm' = 'md';\n\n  /**\n   * Tag value.\n   */\n  @Prop({ reflect: true }) value: string = '';\n\n  /**\n   * Emitted when the tag is clicked.\n   */\n  @Event({ eventName: 'zane-tag--click' }) zaneClick: EventEmitter;\n\n  /**\n   * Emitted when the close icon is clicked.\n   */\n  @Event({ eventName: 'zane-tag--dismiss' }) zaneTagDismissClick: EventEmitter;\n\n  render() {\n    return (\n      <Host>\n        <div\n          class={{\n            [`color-${this.color}`]: true,\n            [`size-${this.size}`]: true,\n            dismissible: this.dismissible,\n            selected: this.selected,\n            tag: true,\n          }}\n        >\n          {this.renderImage()}\n          <div class=\"tag-content\">\n            <slot />\n          </div>\n          {this.renderCloseButton()}\n        </div>\n      </Host>\n    );\n  }\n\n  renderCloseButton() {\n    if (this.dismissible)\n      return (\n        <button class=\"close-btn\" onClick={() => this.dismissClickHandler()}>\n          <zane-icon\n            class=\"close-btn-icon inherit\"\n            name=\"close\"\n            size={this.getIconSize()}\n          ></zane-icon>\n        </button>\n      );\n  }\n\n  renderImage() {\n    if (this.imageSrc)\n      return <img alt=\"Tag image\" class=\"tag-image\" src={this.imageSrc} />;\n  }\n\n  private dismissClickHandler = () => {\n    this.zaneTagDismissClick.emit({\n      value: this.value || this.elm.textContent,\n    });\n  };\n\n  private getIconSize() {\n    switch (this.size) {\n      case ElementSize.MEDIUM: {\n        return '1.25rem';\n      }\n      case ElementSize.SMALL: {\n        return '1rem';\n      }\n      default: {\n        return '1rem';\n      }\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}