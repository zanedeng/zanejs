{"version":3,"names":["datePickerCss","DatePicker","constructor","hostRef","this","configAria","debounce","disabled","gid","getComponentIndex","hasFocus","inline","invalid","name","readonly","required","size","value","warn","blurHandler","ev","zaneBlur","emit","clearInput","evt","nativeElement","inputHandler","focusHandler","zaneFocus","input","target","oldValue","zaneInput","zaneChange","keyDownHandler","key","componentWillLoad","elm","hasAttribute","tabindex","getAttribute","undefined","removeAttribute","getAttributeNames","forEach","includes","connectedCallback","debounceChanged","getComponentId","render","h","Host","hasValue","class","label","onBlur","onFocus","onInput","onKeyDown","ref","type","color","icon","setTimeout","showPicker","variant","renderHelper","invalidText","warnText","helperText","setBlur","blur","setFocus","focus","debounceEvent","getValue","toString","length"],"sources":["src/components/date-picker/date-picker.scss?tag=zane-date-picker&encapsulation=shadow","src/components/date-picker/date-picker.tsx"],"sourcesContent":["@use '../../global/styles/common-input';\n\ninput[type='date']::-webkit-inner-spin-button,\ninput[type='date']::-webkit-calendar-picker-indicator {\n  display: none;\n  appearance: none;\n}\n","import {\n  Component,\n  ComponentInterface,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\n\nimport { debounceEvent, getComponentIndex } from '../../utils';\n\n/**\n * @name Date Picker\n * @category Form Inputs\n * @description Captures date input.\n * @example <zane-date-picker value='true'></zane-date-picker>\n */\n@Component({\n  shadow: true,\n  styleUrl: 'date-picker.scss',\n  tag: 'zane-date-picker',\n})\nexport class DatePicker implements ComponentInterface {\n  @Prop({ mutable: true, reflect: true }) configAria: any = {};\n\n  /**\n   * Set the amount of time, in milliseconds, to wait to trigger the `zaneChange` event after each keystroke.\n   */\n  @Prop() debounce = 300;\n\n  /**\n   * If true, the user cannot interact with the button. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  @Element() elm!: HTMLElement;\n\n  gid: string = getComponentIndex();\n\n  @State() hasFocus = false;\n\n  @Prop() helperText: string;\n\n  @Prop({ reflect: true }) inline: boolean = false;\n\n  @Prop() invalid: boolean = false;\n\n  @Prop() invalidText: string;\n\n  @Prop() label: string;\n\n  /**\n   * The input field name.\n   */\n  @Prop() name: string = `zane-input-${this.gid}`;\n\n  /**\n   * The input field placeholder.\n   */\n  @Prop() placeholder: string;\n\n  /**\n   * If true, the user read the value cannot modify it. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) readonly: boolean = false;\n\n  /**\n   * If true, required icon is show. Defaults to `false`.\n   */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /**\n   * The input field size.\n   * Possible values are: `\"sm\"`, `\"md\"`, `\"lg\"`. Defaults to `\"md\"`.\n   */\n  @Prop({ reflect: true }) size: 'lg' | 'md' | 'sm' = 'md';\n\n  /**\n   * The input field value.\n   */\n  @Prop({ mutable: true }) value?: null | number | string = '';\n\n  @Prop() warn: boolean = false;\n\n  @Prop() warnText: string;\n\n  /**\n   * Emitted when the input loses focus.\n   */\n  @Event({ eventName: 'zane-date-picker--blur' }) zaneBlur: EventEmitter;\n\n  /**\n   * Emitted when the value has changed.\n   */\n  @Event({ eventName: 'zane-date-picker--change' }) zaneChange: EventEmitter;\n\n  /**\n   * Emitted when the input has focus.\n   */\n  @Event({ eventName: 'zane-date-picker--focus' }) zaneFocus: EventEmitter;\n  /**\n   * Emitted when a keyboard input occurred.\n   */\n  @Event({ eventName: 'zane-date-picker--input' }) zaneInput: EventEmitter;\n  private nativeElement?: HTMLInputElement;\n  private tabindex?: number | string;\n\n  componentWillLoad() {\n    // If the ion-input has a tabindex attribute we get the value\n    // and pass it down to the native input, then remove it from the\n    // zane-input to avoid causing tabbing twice on the same element\n    if (this.elm.hasAttribute('tabindex')) {\n      const tabindex = this.elm.getAttribute('tabindex');\n      this.tabindex = tabindex === null ? undefined : tabindex;\n      this.elm.removeAttribute('tabindex');\n    }\n    this.elm.getAttributeNames().forEach((name: string) => {\n      if (name.includes('aria-')) {\n        this.configAria[name] = this.elm.getAttribute(name);\n        this.elm.removeAttribute(name);\n      }\n    });\n  }\n\n  connectedCallback() {\n    this.debounceChanged();\n  }\n\n  @Method()\n  async getComponentId() {\n    return this.gid;\n  }\n\n  render() {\n    return (\n      <Host has-focus={this.hasFocus} has-value={this.hasValue()}>\n        <div class={{ 'form-control': true, inline: this.inline }}>\n          {this.label && (\n            <label class=\"label\">\n              {this.required && <span class=\"required\">*</span>}\n              {this.label}\n            </label>\n          )}\n\n          <div class=\"field\">\n            <div\n              class={{\n                disabled: this.disabled,\n                'has-focus': this.hasFocus,\n                'input-container': true,\n              }}\n            >\n              <input\n                class=\"input input-native\"\n                disabled={this.disabled}\n                onBlur={this.blurHandler}\n                onFocus={this.focusHandler}\n                onInput={this.inputHandler}\n                onKeyDown={this.keyDownHandler}\n                readonly={this.readonly}\n                ref={(input) => (this.nativeElement = input)}\n                required={this.required}\n                tabindex={this.tabindex}\n                type=\"date\"\n              />\n\n              <zane-button\n                class=\"input-action\"\n                color={'secondary'}\n                disabled={this.disabled}\n                icon={'calendar'}\n                onZane-button--click={() => {\n                  setTimeout(() => {\n                    this.nativeElement.showPicker();\n                  });\n                }}\n                size={this.size}\n                variant=\"ghost.simple\"\n              ></zane-button>\n            </div>\n            {this.renderHelper()}\n          </div>\n        </div>\n      </Host>\n    );\n  }\n\n  renderHelper() {\n    if (this.invalid)\n      return <div class=\"helper invalid\">{this.invalidText}</div>;\n    else if (this.warn) return <div class=\"helper warn\">{this.warnText}</div>;\n    else if (this.helperText || this.helperText === '')\n      return <div class=\"helper text\">{this.helperText}</div>;\n  }\n\n  /**\n   * Sets blur on the native `input` in `zane-input`. Use this method instead of the global\n   * `input.blur()`.\n   */\n  @Method()\n  async setBlur() {\n    if (this.nativeElement) {\n      this.nativeElement.blur();\n      this.hasFocus = false;\n    }\n  }\n\n  /**\n   * Sets focus on the native `input` in `zane-input`. Use this method instead of the global\n   * `input.focus()`.\n   */\n  @Method()\n  async setFocus() {\n    if (this.nativeElement) {\n      this.nativeElement.focus();\n      this.hasFocus = true;\n    }\n  }\n\n  @Watch('debounce')\n  protected debounceChanged() {\n    this.zaneChange = debounceEvent(this.zaneChange, this.debounce);\n  }\n\n  private blurHandler = (ev: FocusEvent) => {\n    this.hasFocus = false;\n    this.zaneBlur.emit(ev);\n  };\n\n  private clearInput = (evt: Event) => {\n    this.nativeElement.value = '';\n    this.inputHandler(evt);\n  };\n\n  private focusHandler = (ev: FocusEvent) => {\n    this.hasFocus = true;\n    this.zaneFocus.emit(ev);\n  };\n\n  private getValue(): string {\n    return (this.value || '').toString();\n  }\n\n  private hasValue(): boolean {\n    return this.getValue().length > 0;\n  }\n\n  private inputHandler = (ev: Event) => {\n    const input = ev.target as HTMLInputElement | null;\n    const oldValue = this.value;\n    if (input) {\n      this.value = input.value;\n    }\n    this.zaneInput.emit(ev as KeyboardEvent);\n    if (oldValue !== this.value) {\n      this.zaneChange.emit(ev as KeyboardEvent);\n    }\n  };\n\n  private keyDownHandler = (ev: KeyboardEvent) => {\n    if (ev.key === 'Escape') {\n      this.clearInput(ev);\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]}