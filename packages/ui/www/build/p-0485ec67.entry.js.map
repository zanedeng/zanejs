{"version":3,"names":["inputCss","Input","constructor","hostRef","this","autocomplete","configAria","debounce","disabled","gid","getComponentIndex","inline","invalid","name","readonly","required","size","skeleton","type","warn","hasFocus","passwordVisible","startSlotHasContent","endSlotHasContent","blurHandler","ev","zaneBlur","emit","focusHandler","zaneFocus","inputHandler","input","target","oldValue","value","zaneInput","zaneChange","componentWillLoad","elm","hasAttribute","tabindex","getAttribute","undefined","removeAttribute","getAttributeNames","forEach","includes","querySelector","connectedCallback","debounceChanged","getComponentId","getLabel","h","class","label","render","Host","key","hasValue","renderInput","renderHelper","invalidText","warnText","helperText","Object","assign","autoComplete","onBlur","onFocus","onInput","evt","placeholder","readOnly","ref","nativeElement","tabIndex","content","color","icon","variant","setBlur","blur","setFocus","focus","debounceEvent","getValue","toString","length"],"sources":["src/components/input/input.scss?tag=zane-input&encapsulation=shadow","src/components/input/input.tsx"],"sourcesContent":["@use '../../global/styles/common-input';\n","import type { InputComponentInterface } from '../../interfaces';\n\nimport {\n  Component,\n  ComponentInterface,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\n\nimport { debounceEvent, getComponentIndex } from '../../utils';\n\n/**\n * 自定义输入框组件 zane-input\n *\n * 实现功能：\n * 1. 支持多种输入类型（文本、密码、邮箱等）及尺寸控制\n * 2. 包含表单验证状态（错误/警告）及辅助文本展示\n * 3. 提供前后插槽(start/end)扩展能力\n * 4. 支持防抖事件处理与无障碍访问\n * 5. 集成密码可见性切换功能\n *\n */\n@Component({\n  shadow: true,\n  styleUrl: './input.scss',\n  tag: 'zane-input',\n})\nexport class Input implements ComponentInterface, InputComponentInterface {\n\n  /**\n   * 自动填充控制\n   * - `on`: 允许浏览器自动填充\n   * - `off`: 禁用自动填充\n   * @default 'off'\n   */\n  @Prop() autocomplete: 'off' | 'on' = 'off';\n\n  /**\n   * 动态ARIA属性配置对象\n   * - 收集宿主元素上所有`aria-*`属性并转移到内部input元素\n   * - 需通过mutable允许组件内修改\n   */\n  @Prop({ mutable: true, reflect: true }) configAria: any = {};\n\n  /**\n   * 输入内容变化事件(zane-input--change)的防抖延迟(ms)\n   * @default 300\n   */\n  @Prop() debounce = 300;\n\n  /**\n   * 禁用状态\n   * - 设置后阻止用户交互\n   * @attr\n   */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  @Element() elm!: HTMLElement;\n\n  gid: string = getComponentIndex();\n\n  /**\n   * 辅助说明文本\n   * - 在非错误/警告状态下显示\n   */\n  @Prop() helperText: string;\n\n  /**\n   * 行内布局模式\n   * - 设置后标签与输入框水平排列\n   * @attr\n   */\n  @Prop({ reflect: true }) inline: boolean = false;\n\n  /**\n   * 验证失败状态\n   * - 激活时会显示invalidText并应用错误样式\n   */\n  @Prop() invalid: boolean = false;\n\n  /**\n   * 验证失败提示文本\n   * - 当invalid=true时显示\n   */\n  @Prop() invalidText: string;\n\n  /**\n   * 输入框标签文本\n   * - 显示在输入区域上方\n   */\n  @Prop() label: string;\n\n  /**\n   * 输入框名称\n   * - 用于表单提交时识别字段\n   * - 默认生成唯一ID: zane-input-{gid}\n   */\n  @Prop() name: string = `zane-input-${this.gid}`;\n\n  /**\n   * 占位提示文本\n   */\n  @Prop() placeholder: string;\n\n  /**\n   * 只读状态\n   * - 允许查看但禁止修改内容\n   * @attr\n   */\n  @Prop({ reflect: true }) readonly: boolean = false;\n\n  /**\n   * 必填标识\n   * - 显示红色星号(*)并触发浏览器原生验证\n   * @attr\n   */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /**\n   * 尺寸控制\n   * - `sm`: 小尺寸(高度32px)\n   * - `md`: 中尺寸(高度40px)\n   * - `lg`: 大尺寸(高度48px)\n   * @default 'md'\n   * @attr\n   */\n  @Prop({ reflect: true }) size: 'lg' | 'md' | 'sm' = 'md';\n\n  /**\n   * 骨架屏模式\n   * - 加载状态时显示灰色占位块\n   */\n  @Prop() skeleton: boolean = false;\n\n  /**\n   * 输入类型\n   * - `text`: 普通文本\n   * - `password`: 密码(带可见切换按钮)\n   * - `email`: 邮箱格式验证\n   * - `tel`: 电话号码输入\n   * @default 'text'\n   */\n  @Prop() type: 'email' | 'password' | 'tel' | 'text' = 'text';\n\n  /**\n   * 输入框值\n   * - 使用双向数据绑定\n   */\n  @Prop({ mutable: true }) value: string;\n\n  /**\n   * 警告状态\n   * - 非致命性错误提示，显示warnText\n   */\n  @Prop() warn: boolean = false;\n\n  /**\n   * 警告提示文本\n   * - 当warn=true时显示\n   */\n  @Prop() warnText: string;\n\n  /**\n   * 输入框聚焦状态\n   * - 控制宿主元素has-focus属性\n   */\n  @State() hasFocus = false;\n\n  /**\n   * 密码可见性状态\n   * - 仅当type=password时生效\n   * - true: 显示明文\n   * - false: 显示掩码\n   */\n  @State() passwordVisible = false;\n\n  /**\n   * 检测start插槽是否有内容\n   * - 用于动态调整输入框内边距\n   */\n  @State() startSlotHasContent = false;\n\n  /**\n   * 检测end插槽是否有内容\n   * - 用于动态调整输入框内边距\n   */\n  @State() endSlotHasContent = false;\n\n  /**\n   * 失去焦点事件\n   * @event zane-input--blur\n   * @param {FocusEvent} ev - 原生焦点事件对象\n   */\n  @Event({ eventName: 'zane-input--blur' }) zaneBlur: EventEmitter;\n\n  /**\n   * 防抖后的值变更事件\n   * @event zane-input--change\n   * @param {KeyboardEvent} ev - 键盘事件对象(防抖处理)\n   */\n  @Event({ eventName: 'zane-input--change' }) zaneChange: EventEmitter;\n\n  /**\n   * 获得焦点事件\n   * @event zane-input--focus\n   * @param {FocusEvent} ev - 原生焦点事件对象\n   */\n  @Event({ eventName: 'zane-input--focus' }) zaneFocus: EventEmitter;\n\n  /**\n   * 实时输入事件\n   * @event zane-input--input\n   * @param {KeyboardEvent} ev - 每次按键触发的键盘事件\n   */\n  @Event({ eventName: 'zane-input--input' }) zaneInput: EventEmitter;\n  private nativeElement?: HTMLInputElement;\n  private tabindex?: number | string;\n\n  componentWillLoad() {\n    if (this.elm.hasAttribute('tabindex')) {\n      const tabindex = this.elm.getAttribute('tabindex');\n      this.tabindex = tabindex === null ? undefined : tabindex;\n      this.elm.removeAttribute('tabindex');\n    }\n    this.elm.getAttributeNames().forEach((name: string) => {\n      if (name.includes('aria-')) {\n        this.configAria[name] = this.elm.getAttribute(name);\n        this.elm.removeAttribute(name);\n      }\n    });\n    this.startSlotHasContent = !!this.elm.querySelector('[slot=\"start\"]');\n    this.endSlotHasContent = !!this.elm.querySelector('[slot=\"end\"]');\n  }\n\n  connectedCallback() {\n    this.debounceChanged();\n  }\n\n  /**\n   * 获取组件唯一ID\n   * @returns {string} 组件全局唯一标识(gid)\n   */\n  @Method()\n  async getComponentId() {\n    return this.gid;\n  }\n\n  getLabel() {\n    return this.skeleton ? (\n      <div class=\"label skeleton\" />\n    ) : (\n      <label class=\"label\">\n        {this.required && <span class=\"required\">*</span>}\n        {this.label}\n      </label>\n    );\n  }\n\n  render() {\n    return (\n      <Host\n        has-focus={this.hasFocus}\n        has-value={this.hasValue()}\n        invalid={this.invalid}\n        warn={this.warn}\n      >\n        <div class={{ 'form-control': true, inline: this.inline }}>\n          {this.label && this.getLabel()}\n          <div class=\"field\">\n            {this.skeleton ? (\n              <div class=\"input-container-skeleton skeleton\" />\n            ) : (\n              this.renderInput()\n            )}\n          </div>\n          {this.renderHelper()}\n        </div>\n      </Host>\n    );\n  }\n\n  renderHelper() {\n    if (this.invalid)\n      return <div class=\"helper invalid\">{this.invalidText}</div>;\n    else if (this.warn) return <div class=\"helper warn\">{this.warnText}</div>;\n    else if (this.helperText || this.helperText === '')\n      return <div class=\"helper text\">{this.helperText}</div>;\n  }\n\n  renderInput() {\n    const type =\n      this.type === 'password' && this.passwordVisible ? 'text' : this.type;\n\n    return (\n      <div\n        class={{\n          disabled: this.disabled,\n          'end-slot-has-content': this.endSlotHasContent,\n          'has-focus': this.hasFocus,\n          'input-container': true,\n          'start-slot-has-content': this.startSlotHasContent,\n        }}\n      >\n        <div class=\"slot-container start\">\n          <slot name=\"start\" />\n        </div>\n\n        <input\n          autoComplete={this.autocomplete}\n          class=\"input input-native\"\n          disabled={this.disabled}\n          name={this.name}\n          onBlur={this.blurHandler}\n          onFocus={this.focusHandler}\n          onInput={(evt) => this.inputHandler(evt)}\n          placeholder={this.placeholder}\n          readOnly={this.readonly}\n          ref={(input) => (this.nativeElement = input)}\n          required={this.required}\n          tabIndex={this.tabindex}\n          type={type}\n          value={this.value}\n          {...this.configAria}\n        />\n\n        {this.type === 'password' && (\n          <zane-tooltip\n            content={this.passwordVisible ? 'Show password' : 'Hide password'}\n          >\n            <zane-button\n              color={'secondary'}\n              icon={this.passwordVisible ? 'view--off' : 'view'}\n              onGoat-button--click={() => {\n                this.passwordVisible = !this.passwordVisible;\n              }}\n              size={this.size}\n              variant=\"ghost.simple\"\n            ></zane-button>\n          </zane-tooltip>\n        )}\n\n        <div class=\"slot-container end\">\n          <slot name=\"end\" />\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * 移除输入框焦点\n   * - 同时更新hasFocus状态\n   */\n  @Method()\n  async setBlur() {\n    if (this.nativeElement) {\n      this.nativeElement.blur();\n      this.hasFocus = false;\n    }\n  }\n\n  /**\n   * 激活输入框焦点\n   * - 同时更新hasFocus状态\n   */\n  @Method()\n  async setFocus() {\n    if (this.nativeElement) {\n      this.nativeElement.focus();\n      this.hasFocus = true;\n    }\n  }\n\n  /**\n   * 防抖配置变更监听\n   * - 当debounce属性变化时更新事件防抖设置\n   */\n  @Watch('debounce')\n  protected debounceChanged() {\n    this.zaneChange = debounceEvent(this.zaneChange, this.debounce);\n  }\n\n  /** 输入框失焦处理函数 */\n  private blurHandler = (ev: FocusEvent) => {\n    this.hasFocus = false;\n    this.zaneBlur.emit(ev);\n  };\n\n  /** 输入框聚焦处理函数 */\n  private focusHandler = (ev: FocusEvent) => {\n    this.hasFocus = true;\n    this.zaneFocus.emit(ev);\n  };\n\n  /** 获取当前输入值的字符串表示 */\n  private getValue(): string {\n    return (this.value || '').toString();\n  }\n\n  /** 检测输入值是否非空 */\n  private hasValue(): boolean {\n    return this.getValue().length > 0;\n  }\n\n  /**\n   * 输入事件处理\n   * - 更新value值\n   * - 触发zaneInput/zaneChange事件\n   */\n  private inputHandler = (ev: Event) => {\n    const input = ev.target as HTMLInputElement | null;\n    const oldValue = this.value;\n    if (input) {\n      this.value = input.value;\n    }\n    this.zaneInput.emit(ev as KeyboardEvent);\n    if (oldValue !== this.value) {\n      this.zaneChange.emit(ev as KeyboardEvent);\n    }\n  };\n}\n"],"mappings":"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","ignoreList":[]}