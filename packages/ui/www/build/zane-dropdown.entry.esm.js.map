{"version":3,"file":"zane-dropdown.entry.esm.js","sources":["src/components/dropdown/dropdown/dropdown.scss?tag=zane-dropdown&encapsulation=shadow","src/components/dropdown/dropdown/dropdown.tsx"],"sourcesContent":["@use '../../../global/styles/commons';\n\n:host {\n  --dropdown-height: inherit;\n\n  display: inline-block;\n  height: var(--dropdown-height);\n}\n\n.dropdown {\n  display: inline-block;\n  height: var(--dropdown-height);\n\n  zane-menu {\n    --zane-menu-shadow: none;\n  }\n}\n","import {\n  Component,\n  ComponentInterface,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n} from '@stencil/core';\n\nimport PopoverController from '../../popover/popover/popover-controller';\n\n/**\n * 下拉菜单组件\n * @Component 装饰器定义组件元数据\n * @shadow 启用Shadow DOM封装\n * @styleUrl 组件样式表路径\n * @tag 组件自定义标签名称\n */\n@Component({\n  shadow: true,\n  styleUrl: 'dropdown.scss',\n  tag: 'zane-dropdown',\n})\nexport class Dropdown implements ComponentInterface {\n\n  /**\n   * 下拉菜单关闭事件\n   * @Event 装饰器定义自定义事件\n   * 事件名称为'zane-dropdown--close'\n   */\n  @Event({ eventName: 'zane-dropdown--close' }) closeEvent: EventEmitter;\n\n  /**\n   * 是否禁用下拉菜单\n   * @Prop 默认值为false\n   */\n  @Prop() disabled: boolean = false;\n\n  /**\n   * 宿主元素引用\n   * @Element 装饰器获取宿主元素\n   */\n  @Element() host!: HTMLElement;\n\n  /**\n   * 是否为受控模式\n   * 在受控模式下，组件的状态完全由外部控制\n   * @Prop 装饰器，reflect表示会反映到DOM属性上\n   */\n  @Prop({ reflect: true }) managed: boolean = false;\n\n  /**\n   * 下拉菜单内容区域的引用\n   */\n  menuRef: HTMLZaneDropdownMenuElement;\n\n  /**\n   * 下拉菜单是否打开\n   * @Prop 装饰器，mutable表示属性可变，reflect表示会反映到DOM属性上\n   */\n  @Prop({ mutable: true, reflect: true }) open: boolean = false;\n\n  /**\n   * 下拉菜单打开事件\n   * @Event 装饰器定义自定义事件\n   * 事件名称为'zane-dropdown--open'\n   */\n  @Event({ eventName: 'zane-dropdown--open' }) openEvent: EventEmitter;\n\n  /**\n   * 下拉菜单位置选项\n   * 多个位置用逗号分隔，按优先级排序\n   * @Prop 装饰器，reflect表示会反映到DOM属性上\n   * 默认值为'bottom-start,top-start,bottom-end,top-end'\n   */\n  @Prop({ reflect: true }) placements: string =\n    'bottom-start,top-start,bottom-end,top-end';\n\n  /**\n   * Popover控制器实例\n   * 用于管理弹出位置、显示/隐藏等逻辑\n   */\n  popoverController: PopoverController;\n\n  /**\n   * 触发器插槽引用\n   */\n  slotRef: HTMLSlotElement;\n\n  /**\n   * 触发下拉菜单的方式\n   * - 'click': 点击触发\n   * - 'hover': 悬停触发\n   * - 'manual': 手动控制\n   * @Prop 装饰器，reflect表示会反映到DOM属性上\n   * 默认值为'click'\n   */\n  @Prop({ reflect: true }) trigger: 'click' | 'hover' | 'manual' = 'click';\n\n  /**\n   * 触发器元素引用\n   * 可以是任何HTML元素或zane-button组件\n   */\n  triggerRef: HTMLElement | HTMLZaneButtonElement;\n\n  /**\n   * 菜单项点击事件\n   * @Event 装饰器定义自定义事件\n   * 事件名称为'zane-dropdown--item-click'\n   */\n  @Event({ eventName: 'zane-dropdown--item-click' })\n  zaneDropdownItemClick: EventEmitter;\n\n  /**\n   * 组件加载完成生命周期钩子\n   * 初始化下拉菜单控制器和事件监听\n   */\n  componentDidLoad() {\n    // 获取下拉菜单内容区域\n    const contentRef = this.host.querySelector('zane-dropdown-menu');\n\n    if (!contentRef) {\n      throw new Error(\n        'zane-dropdown: The dropdown component must have a zane-dropdown-menu child component',\n      );\n    }\n\n    this.menuRef = contentRef;\n\n    // 初始化Popover控制器\n    this.popoverController = new PopoverController(\n      this.host,\n      this.trigger,\n      this.open,\n      contentRef,\n      0,\n      0,\n      this.showPopover,\n      this.hidePopover,\n      this.placements,\n    );\n\n    // 获取触发器元素\n    this.triggerRef = this.slotRef.assignedElements()[0] as HTMLElement;\n    if (this.triggerRef.nodeName === 'SLOT') {\n      const assignedElements = (\n        this.triggerRef as HTMLSlotElement\n      ).assignedElements();\n      if (assignedElements.length > 0) {\n        this.triggerRef = assignedElements[0] as HTMLSlotElement;\n      }\n    }\n\n    // 注册触发器并设置引用\n    this.popoverController.registerTarget(this.triggerRef);\n    this.popoverController.setTriggerRef(this.triggerRef);\n\n    // 监听菜单项点击事件\n    this.host.addEventListener('zane-menu-item--click', (evt: CustomEvent) => {\n      this.zaneDropdownItemClick.emit(evt.detail);\n      this.setFocusOnTrigger();\n      this.popoverController.hidePopover();\n    });\n\n    // 监听ESC键关闭下拉菜单\n    this.host.addEventListener('keydown', (evt) => {\n      if (evt.key === 'Escape') {\n        evt.preventDefault();\n        this.popoverController.hidePopover();\n      }\n    });\n  }\n\n  /**\n   * 组件更新生命周期钩子\n   * 更新Popover控制器的状态\n   */\n  componentDidUpdate() {\n    this.popoverController.setOpen(this.open);\n    if (this.open) {\n      this.popoverController.computePositionThrottle('onUpdate');\n    }\n  }\n\n  /**\n   * 组件断开连接生命周期钩子\n   * 清理Popover控制器\n   */\n  disconnectedCallback() {\n    this.popoverController.destroy();\n  }\n\n  /**\n   * 隐藏下拉菜单的回调函数\n   */\n  hidePopover = () => {\n    this.open = false;\n    this.closeEvent.emit();\n  };\n\n  /**\n   * 渲染组件\n   * @returns 组件虚拟DOM\n   */\n  render() {\n    return (\n      <Host>\n        <div\n          class={{\n            dropdown: true,\n            open: this.open,\n          }}\n        >\n          <slot ref={(el) => (this.slotRef = el as HTMLSlotElement)} />\n        </div>\n      </Host>\n    );\n  }\n\n  /**\n   * 监听窗口resize事件\n   * 调整下拉菜单位置\n   * @Listen 装饰器监听window的resize事件\n   */\n  @Listen('resize', { target: 'window' })\n  resizeHandler() {\n    this.popoverController.computePositionThrottle('resize');\n  }\n\n  /**\n   * 设置焦点的公共方法\n   * @Method 装饰器定义公共方法\n   */\n  @Method()\n  async setFocus() {\n    this.setFocusOnTrigger();\n  }\n\n  /**\n   * 将焦点设置到触发器元素\n   */\n  setFocusOnTrigger() {\n    (this.triggerRef as HTMLZaneButtonElement).setFocus\n      ? (this.triggerRef as HTMLZaneButtonElement).setFocus()\n      : this.triggerRef.focus();\n  }\n\n  /**\n   * 显示下拉菜单的回调函数\n   */\n  showPopover = () => {\n    this.open = true;\n    setTimeout(() => {\n      this.menuRef.setFocus();\n      this.openEvent.emit();\n    });\n  };\n\n  /**\n   * 监听window的click事件\n   * 处理点击外部关闭下拉菜单\n   * @Listen 装饰器监听window的click事件\n   * @param evt 点击事件对象\n   */\n  @Listen('click', { target: 'window' })\n  windowClickHandler(evt) {\n    this.popoverController.windowClickHandler(evt);\n  }\n}\n"],"names":[],"mappings":"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"}